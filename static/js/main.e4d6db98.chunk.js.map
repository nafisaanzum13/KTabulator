{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/SettingModal.jsx","components/FilterModal.jsx","components/JoinModal.jsx","components/UnionModal.jsx","components/URLForm.jsx","components/LandingPage.jsx","components/TablePanel.jsx","components/TableSelection.jsx","components/TaskMenu.jsx","components/FirstColSelection.jsx","components/OtherColSelection.jsx","components/PreviewOrigin.jsx","components/ActionPanel.jsx","components/PagePanel.jsx","components/MainBody.jsx","layouts/App.jsx","index.js"],"names":["Header","state","className","href","class","title","onClick","props","copyTable","openModal","undoPreviousStep","Component","Footer","SettingModal","isOpen","this","showSetting","onChange","e","toggleSemantic","type","value","checked","semanticEnabled","unionCutOff","unionCutOffChange","min","max","step","closeModal","FilterModal","optionsEle","i","push","dataAndChecked","toggleChecked","data","replace","length","showFilter","checkAll","toggleAll","Button","applyFilter","cancelFilter","JoinModal","showJoin","originColOptions","originJoinIndex","selectJoinColumn","placeholder","options","isMulti","joinColOptions","joinJoinIndex","runJoin","cancelJoin","UnionModal","showUnionModal","hardcodeUnion","cancelUnionAlign","URLForm","handleURLPaste","bind","preventDefault","urlPasted","clipboardData","window","getData","onPaste","LandingPage","TablePanel","showFullTitle","createSuperTable","createSelectedTableView","showPartialTitle","setState","colIndex","tableHeader","label","textLiteral","niceRender","firstColHeaderInfo","curText","j","onMouseEnter","onMouseLeave","textToAdd","rowNum","tableData","colNum","table","tempRow","tempHeader","buttonsEle","textEle","firstColFilled","columnHeaderGen","handlePlusClick","contextSetColumn","contextAddColumn","showFilterMethods","keyColIndex","buttonEle","getOtherOptions","contextDeleteColumn","rows","previewColIndex","style","backgroundColor","previewData","readOnly","cellColor","curTitle","onCellChange","onDoubleClick","originPreviewPage","tableDataExplore","tableHeaderRow","tableRows","tableEle","border","str","TableSelection","createButtonArray","originTableArray","buttonArray","buttonText","headerCells","cells","headerData","removeNewLine","innerText","slice","tableContent","dangerouslySetInnerHTML","__html","outerHTML","selectButton","tableOpenList","listType","buttonFunction","toggleTable","Collapse","originTableArrayEle","TaskMenu","subject","resultStr","bracketIndex","indexOf","handleStartSubject","decodeURIComponent","toggleTableSelection","showTableSelection","CardBody","Card","handleStartTable","FirstColSelection","createFirstColSelection","keyCheckedIndex","firstColSelection","firstColChecked","selectedNeighbours","alert","populateEle","populateText","pDataset","oValue","pValue","populateKeyColumn","confirmAddFirstCol","returnEle","typeEle","firstColText","firstColTextChange","toUpperCase","includes","toggleFirstNeighbour","selectionEle","OtherColSelection","createOtherColSelection","otherColSelection","otherColChecked","otherCheckedIndex","console","log","populateOtherColumn","otherColText","otherColTextChange","toggleOtherNeighbour","PreviewOrigin","createPreviewEle","createOriginEle","previewInfoExpanded","previewInfoArray","previewEle","key","togglePreviewElement","brEle","selectedCell","originEle","origin","ActionPanel","createPropertyArray","createSiblingArray","createTableArray","createRecommendArray","createStartRecommend","createCustomizedUnion","firstIndex","secondIndex","tableArray","propertyNeighbours","siblingArray","tableElement","thirdIndex","tableTitleText","toggleOtherTable","unionTable","colMapping","siblingElement","zeroDividerSet","tooltipText","name","listClassSib","toggleSibling","unionPage","propertyElement","predicate","object","propertyText","listClass","togglePropertyNeighbours","recommendArray","recommendEle","neighbourArray","recommendText","populateRecommendation","recommendationText","createNeighbourText","actionInfo","neighbourArrayText","sameNeighbourOneRow","sameNeighbourDiffRow","curActionInfo","populateStartRecommend","unionURL","formEle","handleUnionPaste","tableListEle","unionTableArray","unionOpenList","toggleUnionTable","showUnionAlign","actionEle","wrapperEle","titleEle","usecaseSelected","selectedTableIndex","task","addToFirstCol","createSameNeighbour","sameNeighbourEle","contextSortColumn","openFilter","contextDedupColumn","curIndex","tabIndex","selectedIndex","onSelect","index","handleTabSwitch","toggleUnionJoin","showUnionTables","showJoinTables","handleJoinTable","PagePanel","pageEle","wikiPageClass","iframeURL","buttonhideShow","toggleWikiPage","aria-hidden","pageHidden","id","src","MainBody","optionsMap","tablePasted","lastAction","prevState","keyColNeighbours","firstDegNeighbours","selectedClassAnnotation","curFilterIndex","showJoinModal","joinTableIndex","joinTableData","cellChange","selectColHeader","getKeyOptions","getNeighbourPromise","getOtherColPromise","addAllNeighbour","getTableStates","unionProperty","document","body","classList","add","promiseArray","fetchText","allPromiseReady","then","values","htmlText","wikiTableArray","DOMParser","parseFromString","getElementsByClassName","tagName","undefined","remove","textArea","createElement","copiedText","appendChild","select","execCommand","removeChild","taskSelected","_","cloneDeep","fetchJSON","regexReplace","resultsBinding","processedBinding","filter","a","p","dctArray","dbopArray","sort","b","o","count","getPCount","prevNeighbour","curNeighbour","datatype","concat","removePrefix","updateFirstColSelection","results","bindings","target","neighbourIndex","curColumnArray","curNeighbourData","otherColCheckedIndex","firstColCheckedUpdated","allSubject","queryBody","queryURL","myJson","keyColOptions","curValue","somevar","tempObj","neighbour","colEmpty","colFilled","nonEmptyInfo","tempSelection","scrollTo","selectedOptions","keyColLabel","ownLabel","cellValue","curPromise","keyQueryGen","updatedRowCount","Math","rowsToAdd","emptyEntryCount","startingIndex","tempOrigin","uniqBy","x","setFirstColumnData","promiseArrayOne","promiseArrayTwo","valuesOne","valuesTwo","selectionInfo","updateUnionSelection","updatedNeighbours","updateNeighbourInfo","numNewRows","hasMultiple","originToAdd","keyOrigin","lastIndex","dataArray","recommendNeighbours","relation","differenceBy","filledPercent","numCols","fillRecommendation","keyColIndexUpdated","tableDataUpdated","k","newTableHeader","tableHeaderUpdated","selectedClassAnnotationUpdated","optionsMapUpdated","curCol","requiredLength","subjectNeighbours","objectNeighbours","curRow","rowToAdd","firstDegNeighboursUpdated","curData","curRecommendation","sliceIndex","splice","numRecommend","order","numericCol","isNaN","Number","aValue","bValue","rowIndex","otherColPromiseSubject","otherColPromiseObject","subjectInfoArray","updatePreviewInfo","objectInfoArray","minLength","originText","Promise","resolve","tableIndex","queryPromise","queryOne","urlReplace","queryTwo","findClassAnnotation","queryResults","propertyNeighboursPO","bindingArray","urlOrigin","curSiblingArray","siblingName","s","setTableFromHTML","stateInfo","siblingNameArray","tableArrayPromise","pageHTML","findTableFromHTML","tableArrayValues","aTableLength","bTableLength","aName","bName","selectedSibling","selectedTable","otherTableHTML","otherTableData","setUnionData","tempMapping","tableConcat","otherTableOrigin","headerRow","sameTable","diffColFound","m","Set","checkIndex","allFalse","valuesToKeep","originTableHeader","joinTableHeader","joinTableDataUpdated","curJoinEntry","curEntryFound","dataToUnion","tempData","bodyEle","bottomContentClass","topContentClass","url","fetch","response","ok","Error","json","catch","error","text","all","updateKeyColNeighbours","subPropertyOf","neighbourCount","neighbourToAdd","valuesToAdd","neighbourRange","range","neighbourSubPropertyOf","objLabel","categoryPreviewInfoArray","categoryBinding","dataToAdd","colInNew","HTMLCleanCell","trim","split","pageName","originCols","wikiTablesFound","tablesFound","tablePromise","findTableFromTable","unionScore","tableHTML","curHeaderCells","newCols","remainCols","searchCols","headerName","sameStructure","remainClassAnnotation","curSearchIndex","intersection","totalSuccess","numTrial","hyperCDF","tempTable","curCellText","anchorArray","getElementsByTagName","hrefArray","curRowSpan","rowSpan","curColSpan","colSpan","remainEntries","curColIndex","curEntry","classAnnotation","curColumnClass","curCellClass","selecteTableHTML","N","K","n","denom","combinations","processAllNeighbours","allNeighboursArray","allNeighboursArrayCopy","prevEntry","filledCount","round","storeFirstDeg","neighbourArrayCopy","dedupedData","uniq","addRecommendNeighbours","processedNeighboursCopy","processedNeighbours","upperStrOne","upperStrTwo","myArray","oType","subjectNeighbourArray","temp","processedSubjectNeighbours","objectNeighbourArray","processedObjectNeighbours","unionSelection","unionChecked","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e4d6db98.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { FaCopy, FaUndo } from \"react-icons/fa\";\r\nimport { FiSettings } from \"react-icons/fi\";\r\n\r\nclass Header extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"row header-body\">\r\n          <div className=\"col-md-8\">\r\n            <a href=\"index.html\" class=\"logo\">\r\n              <b>\r\n                <span>K</span>Tabulator\r\n              </b>\r\n            </a>\r\n          </div>\r\n          <div className=\"offset-md-2 col-md-2 row\">\r\n            <div className=\"col-md-4\">\r\n              <button\r\n                className=\"btn btn-default\"\r\n                title=\"export table\"\r\n                onClick={() => this.props.copyTable()}\r\n              >\r\n                <FaCopy className=\"logo-left-color\" />\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <button\r\n                className=\"btn btn-default\"\r\n                title=\"Union Table Settings\"\r\n              >\r\n                <FiSettings\r\n                  className=\"logo-left-color\"\r\n                  onClick={() => this.props.openModal()}\r\n                />\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <button\r\n                className=\"btn btn-default\"\r\n                title=\"undo previous action\"\r\n                onClick={() => this.props.undoPreviousStep()}\r\n              >\r\n                <FaUndo className=\"color-wrangler\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <hr class=\"header-hr\"></hr>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nclass Footer extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        {/* <hr className=\"m-0\"></hr> */}\r\n        <div className=\"text-center text-sm\">\r\n          <small>University of Waterloo, 2020</small>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport Modal from 'react-modal';\r\n// The two following lines are for range sliders\r\nimport RangeSlider from \"react-bootstrap-range-slider\";\r\nimport \"react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css\";\r\n\r\nclass SettingModal extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Modal \r\n          isOpen={this.props.showSetting}\r\n          className=\"setting-modal\"\r\n        >\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6 offset-md-3\">\r\n                <h4>Table Union Search Settings</h4>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">Semantic Mapping:</div>\r\n              <div className=\"col-md-6\">\r\n                <div onChange={(e) => this.props.toggleSemantic(e)}>\r\n                  <input\r\n                  type=\"radio\"\r\n                  value=\"enabled\"\r\n                  checked={this.props.semanticEnabled === \"enabled\"}\r\n                  />{\" \"}\r\n                  Enabled\r\n                  <input\r\n                    type=\"radio\"\r\n                    value=\"disabled\"\r\n                    checked={this.props.semanticEnabled === \"disabled\"}\r\n                  />{\" \"}\r\n                  Disabled\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">Percentage of Columns to Union:</div>\r\n              <div className=\"col-md-6\">\r\n                <RangeSlider\r\n                  value={this.props.unionCutOff}\r\n                  onChange={(e) => this.props.unionCutOffChange(e)}\r\n                  min={0}\r\n                  max={1}\r\n                  step={0.05}\r\n                />\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4 offset-md-4\">\r\n                <button onClick={() => this.props.closeModal()}>Confirm Settings</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SettingModal;\r\n","import React, { Component } from \"react\";\r\nimport Modal from 'react-modal';\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass FilterModal extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n\r\n    let optionsEle = [];\r\n    for (let i=0;i<this.props.dataAndChecked.length;++i) {\r\n      optionsEle.push(\r\n        <div>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={this.props.dataAndChecked[i].checked}\r\n            onChange={(e) => this.props.toggleChecked(e, i)}\r\n          />\r\n          {niceRender(this.props.dataAndChecked[i].data)}\r\n        </div>\r\n      )\r\n    }\r\n    // console.log(optionsEle);\r\n\r\n    return (\r\n      <div>\r\n        <Modal \r\n          isOpen={this.props.showFilter}\r\n          className=\"filter-modal\"\r\n        >\r\n          <div className=\"container\">\r\n            <div>\r\n              Here is the list of data to filter.\r\n            </div>\r\n            <br />\r\n            <div className=\"checkbox-list\">\r\n              <div>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={this.props.checkAll}\r\n                  onChange={(e) => this.props.toggleAll(e)}\r\n                />\r\n                Check/Uncheck all\r\n              </div>\r\n              <br />\r\n              {optionsEle}\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-1 offset-md-9\">\r\n                <Button onClick={(e) => this.props.applyFilter(e)}>OK</Button>\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                <Button onClick={(e) => this.props.cancelFilter(e)}>Cancel</Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterModal;\r\n\r\n// This function renders data in a nicer way. \r\n// It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\nfunction niceRender(str) {\r\n  return str.replace(/_\\(.*?\\)/g, \"\")\r\n            .replace(/_/g, \" \");\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Modal from 'react-modal';\r\nimport Select from \"react-select\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass JoinModal extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n\r\n    // let optionsEle = [];\r\n\r\n    // console.log(this.props.originColOptions);\r\n    // console.log(this.props.joinColOptions);\r\n\r\n    // Note, the props originColOptions and joinColOptions are what we are going to pass to react select as options\r\n\r\n    return (\r\n      <div>\r\n        <Modal \r\n          isOpen={this.props.showJoin}\r\n          className=\"join-modal\"\r\n        >\r\n          <div className=\"container\">\r\n            <div className=\"row\"> \r\n              <div className=\"col-md-5\">\r\n                Choose join column from table panel\r\n              </div>\r\n              <div className=\"offset-md-1 col-md-5\">\r\n                Choose join column from selected table\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <Select\r\n                className=\"col-md-5\"\r\n                value={this.props.originColOptions[this.props.originJoinIndex]}\r\n                onChange={(e) => this.props.selectJoinColumn(e, \"originTable\")}\r\n                placeholder={\"Choose Join Column\"}\r\n                options={this.props.originColOptions}\r\n                isMulti={false}\r\n              />\r\n              <Select\r\n                className=\"offset-md-1 col-md-5\"\r\n                value={this.props.joinColOptions[this.props.joinJoinIndex]}\r\n                onChange={(e) => this.props.selectJoinColumn(e, \"joinTable\")}\r\n                placeholder={\"Choose Join Column\"}\r\n                options={this.props.joinColOptions}\r\n                isMulti={false}\r\n              />\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-1 offset-md-9\">\r\n                <Button onClick={(e) => this.props.runJoin(e)}>OK</Button>\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                <Button onClick={(e) => this.props.cancelJoin(e)}>Cancel</Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JoinModal;\r\n","import React, { Component } from \"react\";\r\nimport Modal from 'react-modal';\r\nimport { Button } from \"reactstrap\";\r\n\r\n// Note: this component is hard-coded and should be fixed.\r\n\r\nclass UnionModal extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <Modal \r\n          isOpen={this.props.showUnionModal}\r\n          className=\"union-modal\"\r\n        >\r\n          <div className=\"container\">\r\n            <div className=\"row\"> \r\n              <div className=\"col-md-5\">\r\n                Choose one of the following alignments:\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"modal-body\">\r\n              <div>\r\n                <Button onClick={(e) => this.props.hardcodeUnion(e)}>Alignment 1</Button>\r\n                <p>First Column---English title; director---Director(s); country---Country</p>\r\n              </div>\r\n              <div>\r\n                <Button>Alignment 2</Button>\r\n                <p>First Column---Original title; director---Director(s); country---Country</p>\r\n              </div>\r\n              <div>\r\n                <Button>Alignment 3</Button>\r\n                <p>First Column---Year; director---Director(s); country---Country</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-2 offset-md-10\">\r\n                <Button onClick={() => this.props.cancelUnionAlign()}>Cancel</Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UnionModal;\r\n","import React, { Component } from \"react\";\r\n\r\nclass URLForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.handleURLPaste = this.handleURLPaste.bind(this);\r\n  }\r\n\r\n  handleURLPaste(e) {\r\n    e.preventDefault();\r\n    let urlPasted = (e.clipboardData || window.clipboardData).getData(\"text\");\r\n    this.props.handleURLPaste(urlPasted);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row text-center\">\r\n          <div className=\"col-md-6 offset-md-3\">\r\n            <input\r\n              placeholder=\"e.g., https://en.wikipedia.org/wiki/Canada\"\r\n              onPaste={this.handleURLPaste}\r\n              className=\" form-control\"\r\n            ></input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default URLForm;\r\n","import React, { Component } from \"react\";\r\nimport URLForm from \"../components/URLForm\";\r\n\r\nclass LandingPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div class=\"landing-page\">\r\n          <div class=\" row text-center\">\r\n            <div class=\"white-form col-md-5\">\r\n              <h1 class=\"\"> Welcome!</h1>\r\n              <hr className=\"header-hr\"></hr>\r\n              <h4>Enter the URL of a Wikipedia page and start wrangling!</h4>\r\n              <URLForm handleURLPaste={this.props.handleURLPaste} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LandingPage;\r\n","import React, { Component } from \"react\";\r\n// import TableSelection from \"../components/TableSelection\";\r\n// import Tooltip from '@atlaskit/tooltip';\r\n// import Select from \"react-select\";\r\n// import { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport { FaSearch, FaEdit, FaPlus, FaMinus, FaFilter, FaArrowDown, FaEllipsisH} from \"react-icons/fa\";\r\n\r\nclass TablePanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showFullTitle: false, // boolean storing whether we want to display the full title for the first column, in the startSubject case\r\n    };\r\n    this.createSuperTable = this.createSuperTable.bind(this);\r\n    this.createSelectedTableView = this.createSelectedTableView.bind(this);\r\n    // The following functions are for first column's display in the startSubject case. They are helpers for columnHeaderGen\r\n    this.showFullTitle = this.showFullTitle.bind(this);\r\n    this.showPartialTitle = this.showPartialTitle.bind(this);\r\n  }\r\n\r\n  showFullTitle() {\r\n    this.setState({\r\n      showFullTitle: true,\r\n    })\r\n  }\r\n\r\n  showPartialTitle() {\r\n    this.setState({\r\n      showFullTitle: false,\r\n    })\r\n  }\r\n\r\n  // This function creates the i-th column header from this.props.tableHeader[i]\r\n  // It is a helper function for createSuperTable\r\n\r\n  columnHeaderGen(colIndex) {\r\n    // console.log(colIndex);\r\n    // console.log(this.props.tableHeader);\r\n\r\n    // In this case we deal with the first column header\r\n    // We want to divide it into two subcases: \"start table\" vs. \"start subject\"\r\n    if (colIndex === 0) {\r\n      // First subcase is start table\r\n      if (this.props.tableHeader.length > 0 && \r\n          this.props.tableHeader[0].length === 1 && \r\n          this.props.tableHeader[0][0].label === \"OriginURL\") {\r\n        let textLiteral = \"\";\r\n        for (let i = 0; i < this.props.tableHeader[0].length; ++i) {\r\n          let textToAdd = i > 0 ? \"\\nAND \" + niceRender(this.props.tableHeader[0][i].label) : niceRender(this.props.tableHeader[0][i].label);\r\n          textLiteral+=textToAdd;\r\n        }\r\n        let textEle = \r\n          <div>\r\n            {textLiteral}\r\n          </div>\r\n        return textEle;\r\n      }\r\n      // Second subcase is start subject\r\n      else {\r\n        // In this subcase, we first check if firstColHeaderInfo has length < 2\r\n        let firstColHeaderInfo = this.props.firstColHeaderInfo;\r\n\r\n        // If yes, we simply display it\r\n        if (firstColHeaderInfo.length < 2) {\r\n          let textLiteral = [];\r\n          for (let i = 0; i < firstColHeaderInfo.length; ++i) {\r\n            let curText = \"\";\r\n            for (let j = 0; j < firstColHeaderInfo[i].length; ++j) {\r\n              let textToAdd = j > 0 ? \"\\nAND \" + niceRender(firstColHeaderInfo[i][j].label) : niceRender(firstColHeaderInfo[i][j].label);\r\n              curText+=textToAdd;\r\n            }\r\n            textLiteral.push(\r\n              <p>\r\n                {curText}\r\n              </p>\r\n            )\r\n          }\r\n          let textEle = \r\n            <div>\r\n              {textLiteral}\r\n            </div>\r\n          return textEle;\r\n        }\r\n\r\n        // Else, firstColHeaderInfo has length longer than 1, so we have to check this.state.showFullTitle\r\n        // what we render depends on whether this.state.showFullTitle is true or not\r\n        else {\r\n          let showFullTitle = this.state.showFullTitle;\r\n\r\n          // If showFullTitle is false, we display the first element from firstColHeaderInfo\r\n          // As well as an icon that, on hover, sets showFullTitle to true\r\n          if (showFullTitle === false) {\r\n            let textLiteral = [];\r\n            let curText = \"\";\r\n            for (let j = 0; j < firstColHeaderInfo[0].length; ++j) {\r\n              let textToAdd = j > 0 ? \"\\nAND \" + niceRender(firstColHeaderInfo[0][j].label) : niceRender(firstColHeaderInfo[0][j].label);\r\n              curText+=textToAdd;\r\n            }\r\n            textLiteral.push(\r\n              <p>\r\n                {curText}\r\n                {\"\\u00A0\"}\r\n                <FaEllipsisH \r\n                  onMouseEnter={() => this.showFullTitle()}\r\n                  onMouseLeave={() => this.showPartialTitle()}\r\n                />\r\n              </p>\r\n            )\r\n            let textEle = \r\n              <div>\r\n                {textLiteral}\r\n              </div>\r\n            return textEle;\r\n          }\r\n          // If showFullTitle is true, we display the full table header for the first column\r\n          else {\r\n            let textLiteral = [];\r\n            for (let i = 0; i < firstColHeaderInfo.length; ++i) {\r\n              let curText = \"\";\r\n              for (let j = 0; j < firstColHeaderInfo[i].length; ++j) {\r\n                let textToAdd = j > 0 ? \"\\nAND \" + niceRender(firstColHeaderInfo[i][j].label) : niceRender(firstColHeaderInfo[i][j].label);\r\n                curText+=textToAdd;\r\n              }\r\n              if (i === 0) {\r\n                textLiteral.push(\r\n                  <p>\r\n                    {curText}\r\n                    {\"\\u00A0\"}\r\n                    <FaEllipsisH \r\n                      onMouseEnter={() => this.showFullTitle()}\r\n                      onMouseLeave={() => this.showPartialTitle()}\r\n                    />\r\n                  </p>\r\n                )\r\n              }\r\n              else {\r\n                textLiteral.push(\r\n                  <p>\r\n                    {curText}\r\n                  </p>\r\n                )\r\n              }\r\n            }\r\n            let textEle = \r\n              <div>\r\n                {textLiteral}\r\n              </div>\r\n            return textEle;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // In this case we deal with non-first column headers\r\n    else {\r\n      let textLiteral = \"\";\r\n      for (let i = 0; i < this.props.tableHeader[colIndex].length; ++i) {\r\n        let textToAdd = \r\n          this.props.tableHeader[colIndex][i].type === \"object\" ? \"is \" + this.props.tableHeader[colIndex][i].value + \" of\" \r\n          : this.props.tableHeader[colIndex][i].value;\r\n        textToAdd = i > 0 ? \"\\nOR \" + textToAdd : textToAdd;\r\n        textLiteral+=textToAdd;\r\n      }\r\n      let textEle = \r\n        <div>\r\n          {textLiteral}\r\n        </div>\r\n      return textEle;\r\n    }\r\n  }\r\n\r\n  // This function takes the states tableData, keyColIndex, tableHeader, optionsMap\r\n  // And convert them into HTML for the super table\r\n\r\n  createSuperTable() {\r\n\r\n    // console.log(this.props.firstColHeaderInfo);\r\n    // console.log(\"Has first column been filled? \" + this.props.firstColFilled);\r\n    // console.log(this.props.tableData);\r\n    // console.log(\"The current previewColIndex is \"+this.props.previewColIndex);\r\n    \r\n    const rowNum = this.props.tableData.length;\r\n    const colNum = this.props.tableData[0].length;\r\n\r\n    let table = [];\r\n\r\n    // This part creates the table header row\r\n\r\n    let tempRow = [];\r\n    for (let colIndex = 0; colIndex < colNum; ++colIndex) {\r\n      let tempHeader;\r\n      // This part deals with the column 0 \r\n      if (colIndex === 0) {\r\n        let buttonsEle = null;\r\n        let textEle = <div><br /></div>;\r\n        if (this.props.firstColFilled === true) {\r\n          // If we have filled in the first column already, then we can generate its header text\r\n          textEle = this.columnHeaderGen(colIndex);\r\n          // Moreover, if the first column head is not [\"OriginURL\"], then we can create the button element\r\n          if (this.props.tableHeader[0][0].value !== \"OriginURL\") {\r\n            buttonsEle = \r\n              <div>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Add entities\"\r\n                  onClick={() => this.props.handlePlusClick()}\r\n                >\r\n                  <FaArrowDown />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Set as key column\"\r\n                  onClick={(e) => this.props.contextSetColumn(e, colIndex)}\r\n                >\r\n                  <FaSearch />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Add column to the right\"\r\n                  onClick={(e) => this.props.contextAddColumn(e, colIndex)}\r\n                >\r\n                  <FaPlus />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Filter this column\"\r\n                  onClick={(e) => this.props.showFilterMethods(e, colIndex)}\r\n                >\r\n                  <FaFilter />\r\n                </button>\r\n                {/* <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Delete this column\"\r\n                  // onClick={(e) => this.props.contextSetColumn(e, colIndex)}\r\n                >\r\n                  <FaMinus />\r\n                </button> */}\r\n              </div>\r\n          }\r\n          else {\r\n            buttonsEle =\r\n              <div>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Add column to the right\"\r\n                  onClick={(e) => this.props.contextAddColumn(e, colIndex)}\r\n                >\r\n                  <FaPlus />\r\n                </button>\r\n              </div>\r\n          }\r\n        }\r\n        tempHeader = (\r\n          <th className=\"table-head\">\r\n            <div\r\n              className=\"super-header-div\"\r\n            >\r\n            </div>\r\n            {buttonsEle}\r\n            {textEle}\r\n          </th>\r\n        )\r\n      }\r\n      // This part deals with key columns that are not column 0\r\n      else if (colIndex === this.props.keyColIndex) {\r\n        let textEle = this.columnHeaderGen(colIndex);\r\n        let buttonEle = <div><br /></div>;\r\n        if (this.props.firstColFilled === true) {\r\n          buttonEle = \r\n            <div>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Add column to the right\"\r\n                  onClick={(e) => this.props.contextAddColumn(e, colIndex)}\r\n                >\r\n                  <FaPlus />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Filter this column\"\r\n                  onClick={(e) => this.props.showFilterMethods(e, colIndex)}\r\n                >\r\n                  <FaFilter />\r\n                </button>\r\n            </div>\r\n        }\r\n        tempHeader = (\r\n          <th className=\"table-head\">\r\n            {buttonEle}\r\n            {textEle}\r\n          </th>\r\n        );\r\n      }\r\n      // This part deals with the non-key, non-first column headers\r\n      else {\r\n        let textEle = this.columnHeaderGen(colIndex);\r\n        let buttonEle = <div><br /></div>;;\r\n        if (this.props.firstColFilled === true) {\r\n          buttonEle = \r\n            <div>\r\n              <button\r\n                className=\"btn btn-default\"\r\n                title=\"Add entities\"\r\n                onClick={(e) => this.props.getOtherOptions(e, colIndex)}\r\n              >\r\n                <FaEdit />\r\n              </button>\r\n              <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Set as key column\"\r\n                  onClick={(e) => this.props.contextSetColumn(e, colIndex)}\r\n                >\r\n                  <FaSearch />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Add column to the right\"\r\n                  onClick={(e) => this.props.contextAddColumn(e, colIndex)}\r\n                >\r\n                  <FaPlus />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Delete this column\"\r\n                  onClick={(e) => this.props.contextDeleteColumn(e, colIndex)}\r\n                >\r\n                  <FaMinus />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Filter this column\"\r\n                  onClick={(e) => this.props.showFilterMethods(e, colIndex)}\r\n                >\r\n                  <FaFilter />\r\n                </button>\r\n            </div>\r\n        }\r\n        tempHeader = (\r\n          <th className=\"table-head\">\r\n            {buttonEle}\r\n            {textEle}\r\n          </th>\r\n        );\r\n      }\r\n      tempRow.push(tempHeader);\r\n    }\r\n    table.push(\r\n      <thead className=\"table-head\">\r\n        <tr>{tempRow}</tr>\r\n      </thead>\r\n    );\r\n\r\n    // i corresponds to the row number, j corresponds to the column number\r\n\r\n    // We are adding an ID for each cell for contextmenu\r\n    let rows = [];\r\n    for (let i = 0; i < rowNum; i++) {\r\n      let tempRow = [];\r\n      // Inner loop to create each cell of the row\r\n      for (let j = 0; j < colNum; j++) {\r\n        // We want to treat preview columns and other columns differently\r\n\r\n        // First we deal with preview column\r\n        if (j === this.props.previewColIndex) {\r\n          let cellColor = {backgroundColor: \"LightGray\"};\r\n          tempRow.push(\r\n            <td style={cellColor}>\r\n              <input\r\n                className=\"twenty-vw column-preview-color\"\r\n                type=\"text\"\r\n                value={niceRender(this.props.tableData[i][j].previewData)}\r\n                readOnly\r\n              />\r\n            </td>\r\n          );\r\n        }\r\n        // Else we are dealing with a regular column\r\n        else {\r\n          let cellColor;\r\n          // We use light blue to represent search column\r\n          if (j === this.props.keyColIndex) {\r\n            cellColor = { backgroundColor: \"LightBlue\" };\r\n          }\r\n          // We use white to represent other columns\r\n          else {\r\n            cellColor = { backgroundColor: \"White\" };\r\n          }\r\n          // We include a small modification here to deal with the cell titles\r\n          let curTitle = niceRender(this.props.tableData[i][j].data).replace(/;/g, \"\\n\");\r\n          tempRow.push(\r\n            <td style={cellColor}>\r\n              <input\r\n                className=\"twenty-vw\"\r\n                type=\"text\"\r\n                value={niceRender(this.props.tableData[i][j].data)}\r\n                title={curTitle}\r\n                onChange={(e) => this.props.onCellChange(e, i, j)}\r\n                onDoubleClick={(e) => this.props.originPreviewPage(e, i, j)}\r\n              />\r\n            </td>\r\n          );\r\n        }\r\n      }\r\n      //Create the parent and add the children\r\n      rows.push(<tr>{tempRow}</tr>);\r\n    }\r\n    table.push(<tbody>{rows}</tbody>);\r\n    return table;\r\n  }\r\n\r\n  // This function makes no modification of the data at all.\r\n  // It takes all the data from this.props.tableDataExplore, and convert them into HTML\r\n  createSelectedTableView() {\r\n    // console.log(rowNum);\r\n    // console.log(colNum);\r\n    // console.log(this.props.tableDataExplore[0][0].data);\r\n    // console.log(this.props.tableDataExplore[0][0].origin);\r\n    const rowNum = this.props.tableDataExplore.length;\r\n    const colNum = this.props.tableDataExplore[0].length;\r\n\r\n    let table = [];\r\n\r\n    // This part creates the table header row\r\n    let tempRow = [];\r\n    for (let j = 0; j < colNum; ++j) {\r\n      let tempHeader = (\r\n        <th className=\"table-head table-col\">\r\n          {this.props.tableDataExplore[0][j].data}\r\n        </th>\r\n      );\r\n      tempRow.push(tempHeader);\r\n    }\r\n    let tableHeaderRow = <tr className=\"table-head table-col\">{tempRow}</tr>;\r\n    table.push(<thead>{tableHeaderRow}</thead>);\r\n\r\n    // i corresponds to the row number, j corresponds to the column number\r\n    let tableRows = [];\r\n    for (let i = 1; i < rowNum; i++) {\r\n      let tempRow = [];\r\n      //Inner loop to create each cell of the row\r\n      for (let j = 0; j < colNum; j++) {\r\n        // Create the each cell\r\n        tempRow.push(\r\n          <td className=\"table-col\">\r\n            {this.props.tableDataExplore[i][j].data}\r\n          </td>\r\n        );\r\n      }\r\n      //Create the parent and add the children\r\n      tableRows.push(<tr>{tempRow}</tr>);\r\n    }\r\n    table.push(<tbody>{tableRows}</tbody>);\r\n    return table;\r\n  }\r\n\r\n  render() {\r\n    let tableEle = null;\r\n\r\n    // In all cases, once we have pasted the URL. We want to display the super table in the table panel.\r\n    tableEle = (\r\n      // class table-fixed helps with sticky column headers\r\n      <div>\r\n        <table class border=\"1\" className=\"table table-sm table-bordered\">\r\n          {this.createSuperTable()}\r\n        </table>\r\n        {/* {menuArray} */}\r\n      </div>\r\n    );\r\n    return <div>{tableEle}</div>;\r\n  }\r\n}\r\n\r\nexport default TablePanel;\r\n\r\n// This function renders this.props.tableData[i][j].data in a nicer way. \r\n// It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\nfunction niceRender(str) {\r\n  return str.replace(/_\\(.*?\\)/g, \"\")\r\n            .replace(/_/g, \" \");\r\n}\r\n\r\n","// This component takes in 5 props:\r\n\r\n// 1) originTableArray: 1D array storing all tables found on pasted URL\r\n// 2) tableOpenList:    1D array storing whether each table in originTableArray has been toggled open or not\r\n// 3) toggleTable:      function that handles the toggling on/off of a table\r\n// 4) listType:         string. Has value \"select\" when we are using TableSelection to select the starting table.\r\n//                              Has value \"join\" when we are using TableSelection in the join tables setting.\r\n// 5) buttonFunction:   function corresponding to the listType.\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Button, Collapse } from \"reactstrap\";\r\nimport { FaTable } from \"react-icons/fa\";\r\n\r\nclass TableSelection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.createButtonArray = this.createButtonArray.bind(this);\r\n  }\r\n\r\n  createButtonArray() {\r\n    // this.props.originTableArray is a list of tables passed into this component \r\n    const originTableArray = this.props.originTableArray;\r\n\r\n    let buttonArray = [];\r\n    for (let i = 0; i < originTableArray.length; ++i) {\r\n      // This first part create the buttons with text: table index plus column names\r\n      // It also removes some newline characters\r\n      let buttonText = \"Table \" + i + \": \";\r\n      // console.log(originTableArray[i]);\r\n      let headerCells = originTableArray[i].rows[0].cells;\r\n      for (let j = 0; j < headerCells.length; ++j) {\r\n        let headerData = removeNewLine(headerCells[j].innerText);\r\n        if (headerData[headerData.length - 1] === \"\\n\") {\r\n          headerData = headerData.slice(0, -1);\r\n        }\r\n        buttonText = buttonText + headerData + \"| \";\r\n      }\r\n      // Now let's update the table content\r\n      let tableContent = (\r\n        <div\r\n          dangerouslySetInnerHTML={{\r\n            __html: this.props.originTableArray[i].outerHTML,\r\n          }}\r\n        />\r\n      );\r\n      let selectButton;\r\n      if (this.props.tableOpenList[i] === true) {\r\n        let buttonText = \"\";\r\n        if (this.props.listType === \"select\") {\r\n          buttonText = \"Select\";\r\n        }\r\n        else if (this.props.listType === \"join\"){\r\n          buttonText = \"Join\"\r\n        }\r\n        else {\r\n          buttonText = \"Union\"\r\n        }\r\n        selectButton = \r\n          <Button\r\n            onClick={(e) => this.props.buttonFunction(e, i)}\r\n          >\r\n            {buttonText}\r\n          </Button>\r\n      }\r\n      buttonArray.push(\r\n        <li\r\n          className=\"list-group-item\"\r\n        >\r\n        <span \r\n          onClick={(e) => this.props.toggleTable(e, i)}\r\n        >\r\n          {buttonText} {}\r\n          <FaTable />\r\n        </span>\r\n        {selectButton}\r\n          <Collapse isOpen={this.props.tableOpenList[i]}>\r\n            <div>{tableContent}</div>\r\n          </Collapse>\r\n        </li>\r\n      );\r\n    }\r\n    return (\r\n      <ul className=\"list-group list-css list-group-flush\">{buttonArray}</ul>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const numTables = this.props.originTableArray.length;\r\n    let originTableArrayEle = null;\r\n    if (numTables !== 0) {\r\n      originTableArrayEle = <div>{this.createButtonArray()}</div>;\r\n    }\r\n    return <div>{originTableArrayEle}</div>;\r\n  }\r\n}\r\n\r\nexport default TableSelection;\r\n\r\nfunction removeNewLine(str) {\r\n  if (str[str.length - 1] === \"\\n\") {\r\n    return str.slice(0, -1);\r\n  } else {\r\n    return str;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Collapse, CardBody, Card } from \"reactstrap\";\r\nimport { FaList } from \"react-icons/fa\";\r\nimport TableSelection from \"../components/TableSelection\";\r\n\r\nclass TaskMenu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const subject = niceRender(reverseReplace(this.props.urlPasted.slice(30)));\r\n    return (\r\n      <div className=\"action-scrollable\">\r\n        <ul class=\"list-group list-css list-group-flush\">\r\n          <hr className=\"m-0\"></hr>\r\n          <li\r\n            className=\"list-group-item\"\r\n            onClick={(e) => this.props.handleStartSubject(e, \"startSubject\")}\r\n          >\r\n            Start creating a table about {decodeURIComponent(subject)}\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <span onClick={() => this.props.toggleTableSelection()}>\r\n              Start with an existing table from page <FaList />\r\n            </span>\r\n\r\n            <Collapse isOpen={this.props.showTableSelection}>\r\n              <CardBody>\r\n                <Card>\r\n                  <div>\r\n                    <TableSelection\r\n                      originTableArray={this.props.originTableArray}\r\n                      tableOpenList={this.props.tableOpenList}\r\n                      toggleTable={this.props.toggleTable}\r\n                      buttonFunction={this.props.handleStartTable}\r\n                      listType={\"select\"}\r\n                    />\r\n                  </div>\r\n                </Card>\r\n              </CardBody>\r\n            </Collapse>\r\n          </li>\r\n          <hr className=\"m-0\"></hr>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskMenu;\r\n\r\n// This function changes the copied text \"%E2%80%93\" to \"-\" when we copy a URL from google.\r\n\r\nfunction reverseReplace(str) {\r\n  return str.replace(/%E2%80%93/, \"–\");\r\n}\r\n\r\n// This function renders this.props.tableData[i][j].data in a nicer way.\r\n// It changes\"_\" to \" \", and removes everything after the first occurence of (\r\n\r\nfunction niceRender(str) {\r\n  let resultStr = str;\r\n  let bracketIndex = str.indexOf(\"(\");\r\n  // If ( is present in a string, we want to remove it\r\n  // We include the -1 because usually ( is preceeded by _\r\n  if (bracketIndex !== -1) {\r\n    resultStr = resultStr.slice(0, bracketIndex - 1);\r\n  }\r\n  // now we turn all \"_\" into \" \"\r\n  return resultStr.replace(/_/g, \" \");\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass FirstColSelection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.createFirstColSelection = this.createFirstColSelection.bind(this);\r\n  }\r\n\r\n  createFirstColSelection() {\r\n    let keyCheckedIndex = this.props.keyCheckedIndex;\r\n    let firstColSelection = this.props.firstColSelection;\r\n    let firstColChecked = this.props.firstColChecked;\r\n\r\n    let selectedNeighbours = [];\r\n    // We will create the selectedNeighbours array from this.props.firstColSelection and this.props.firstColChecked\r\n    if (firstColChecked.length !== firstColSelection.length) {\r\n      alert(\"Some error exists\");\r\n    }\r\n    for (let i = 0; i < firstColChecked.length; ++i) {\r\n      if (firstColChecked[i] === true) {\r\n        selectedNeighbours.push(firstColSelection[i]);\r\n      }\r\n    }\r\n\r\n    // console.log(selectedNeighbours);\r\n\r\n    // We initialize the populateEle as text telling users they should select from the attribute list\r\n    let populateEle = (\r\n      <div className=\"fixed-populateEle\">\r\n        <b>Choose from attributes below</b> to determine the content for the\r\n        first column\r\n        {/* <br /> */}\r\n      </div>\r\n    );\r\n    \r\n    // If selectedNeighbours is not empty, we have to create the populateText and populateEle\r\n    if (keyCheckedIndex !== -1 && selectedNeighbours.length > 0) {\r\n      let populateText =\r\n        this.props.firstColFilled === false\r\n          ? \"Populate first column with entities that\"\r\n          : \"Add to first column with entities that\";\r\n      for (let i = 0; i < selectedNeighbours.length; ++i) {\r\n        let curText = i > 0 ? \", and\" : \"\";\r\n        if (selectedNeighbours[i].pDataset === \"dct\") {\r\n          curText =\r\n            curText + \" are \" + niceRender(selectedNeighbours[i].oValue);\r\n        } else {\r\n          curText =\r\n            curText +\r\n            \" have \" +\r\n            selectedNeighbours[i].pValue +\r\n            \"=\" +\r\n            niceRender(selectedNeighbours[i].oValue);\r\n        }\r\n        populateText += curText;\r\n      }\r\n      populateText += \"?\";\r\n      // We conditionally create the button element\r\n      // If firstColFilled is false, we want to run populateKeyColumn\r\n      // Otherwise, we want to run addKeyColumn\r\n      let buttonEle =\r\n        this.props.firstColFilled === false ? (\r\n          <Button\r\n            className=\"btn-sm\"\r\n            onClick={(e) =>\r\n              this.props.populateKeyColumn(e, 0, selectedNeighbours)\r\n            }\r\n          >\r\n            OK\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            className=\"btn-sm\"\r\n            onClick={(e) =>\r\n              this.props.confirmAddFirstCol(e, selectedNeighbours)\r\n            }\r\n          >\r\n            OK\r\n          </Button>\r\n        );\r\n      populateEle = (\r\n        <div className=\"fixed-populateEle\">\r\n          <b>{populateText}</b>\r\n          {\"\\u00A0\"}\r\n          {buttonEle}\r\n          <br />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // We now create the returnEle. First, we push on the populateEle\r\n    let returnEle = [];\r\n    // returnEle.push(populateEle);\r\n\r\n    // Modified on August 26th: we want to add an input search bar that acts as a type-ahead\r\n    let typeEle = (\r\n      <div>\r\n        <div>\r\n          <p>\r\n            Search for attributes:\r\n            {\"\\u00A0\"}\r\n            <input\r\n              value={this.props.firstColText}\r\n              onChange={(e) => this.props.firstColTextChange(e)}\r\n              placeholder={\"Type here\"}\r\n            />\r\n          </p>\r\n        </div>\r\n      </div>\r\n    )\r\n    returnEle.push(typeEle);\r\n\r\n    // We loop over the firstColSelection array, and push on the needed radio checkbox and textual information\r\n    for (let i = 0; i < firstColSelection.length; ++i) {\r\n      if (firstColSelection[i].pValue === \"category\") {\r\n        // Addition condition added here:\r\n        // before pushing a neighbour on, we need to check either of the following two conditions meets\r\n        // 1) this.props.firstColText is empty (\"\")\r\n        // 2) niceRender(firstColSelection[i].oValue) includes this.props.firstColText\r\n        if (this.props.firstColText === \"\"\r\n            ||\r\n            niceRender(firstColSelection[i].oValue).toUpperCase().includes(this.props.firstColText.toUpperCase())) {\r\n          returnEle.push(\r\n            <div>\r\n              <div>\r\n                <p>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={firstColChecked[i]}\r\n                    onChange={(e) => this.props.toggleFirstNeighbour(e, i)}\r\n                  />\r\n                  {\"\\u00A0\"}\r\n                  {\"\\u00A0\"}\r\n                  {niceRender(firstColSelection[i].oValue)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          );\r\n        }\r\n      } \r\n      else {\r\n        // Addition condition added here:\r\n        // before pushing a neighbour on, we need to check either of the following three conditions meets\r\n        // 1) this.props.firstColText is empty (\"\")\r\n        // 2) firstColSelection[i].pValue includes this.props.firstColText\r\n        // 2) niceRender(firstColSelection[i].oValue) includes this.props.firstColText\r\n        if (this.props.firstColText === \"\"\r\n            ||\r\n            firstColSelection[i].pValue.toUpperCase().includes(this.props.firstColText.toUpperCase())\r\n            ||\r\n            niceRender(firstColSelection[i].oValue).toUpperCase().includes(this.props.firstColText.toUpperCase())) {\r\n          returnEle.push(\r\n            <div>\r\n              <p>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={firstColChecked[i]}\r\n                  onChange={(e) => this.props.toggleFirstNeighbour(e, i)}\r\n                />\r\n                {\"\\u00A0\"}\r\n                {\"\\u00A0\"}\r\n                {firstColSelection[i].pValue}\r\n                {\":\"}\r\n                {\"\\u00A0\"}\r\n                {\"\\u00A0\"}\r\n                {\"\\u00A0\"}\r\n                {\"\\u00A0\"}\r\n                {\"\\u00A0\"}\r\n                {\"\\u00A0\"}\r\n                {\"\\u00A0\"}\r\n                {\"\\u00A0\"}\r\n                {niceRender(firstColSelection[i].oValue)}\r\n              </p>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        {populateEle}\r\n        <div className=\"padding-top-8vh\">{returnEle}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let selectionEle = this.createFirstColSelection();\r\n\r\n    return <div>{selectionEle}</div>;\r\n  }\r\n}\r\n\r\nexport default FirstColSelection;\r\n\r\n// This function renders this.props.tableData[i][j].data in a nicer way.\r\n// It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\nfunction niceRender(str) {\r\n  return str.replace(/_\\(.*?\\)/g, \"\").replace(/_/g, \" \");\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass OtherColSelection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.createOtherColSelection = this.createOtherColSelection.bind(this);\r\n  }\r\n\r\n  createOtherColSelection() {\r\n    let otherColSelection = this.props.otherColSelection;\r\n    let otherColChecked = this.props.otherColChecked;\r\n    let otherCheckedIndex = this.props.otherCheckedIndex;\r\n\r\n    // console.log(otherColSelection);\r\n    // console.log(otherColChecked);\r\n    // console.log(otherCheckedIndex);\r\n\r\n    // First do some basic error checking\r\n    if (otherColChecked.length !== otherColSelection.length) {\r\n      console.log(\"Some error exists\");\r\n    }\r\n\r\n    // Now, we will create the selectedNeighbours array from otherColSelection and otherColChecked\r\n    let selectedNeighbours = [];\r\n    for (let i = 0; i < otherColChecked.length; ++i) {\r\n      if (otherColChecked[i] === true) {\r\n        selectedNeighbours.push(otherColSelection[i]);\r\n      }\r\n    }\r\n\r\n    // We initialize the populateEle as text telling users they should select from the attribute list\r\n    let populateEle = (\r\n      <div className=\"fixed-populateEle\">\r\n        <b>Choose from attributes below</b> to determine the content for this\r\n        column\r\n        <br />\r\n      </div>\r\n    );\r\n\r\n    // If selectedNeighbours is not empty, we have to create the populateText and populateEle\r\n    if (otherCheckedIndex !== -1 && selectedNeighbours.length > 0) {\r\n      let populateText = \"Populate this column with attributes \";\r\n      for (let i = 0; i < selectedNeighbours.length; ++i) {\r\n        let curText =\r\n          selectedNeighbours[i].type === \"object\"\r\n            ? \"is \" + selectedNeighbours[i].value + \" of\"\r\n            : selectedNeighbours[i].value;\r\n        curText = i > 0 ? \" OR \" + curText : curText;\r\n        populateText += curText;\r\n      }\r\n      populateText += \"?\";\r\n      populateEle = (\r\n        <div className=\"fixed-populateEle\">\r\n          <b>{populateText}</b>\r\n          {\"\\u00A0\"}\r\n          <Button\r\n            className=\"btn-sm\"\r\n            onClick={(e) =>\r\n              this.props.populateOtherColumn(\r\n                e,\r\n                this.props.colIndex,\r\n                selectedNeighbours\r\n              )\r\n            }\r\n          >\r\n            OK\r\n          </Button>\r\n          <br />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let returnEle = [];\r\n    // Modified on August 23rd: We want to display the textual information separately (not right next to any attribute)\r\n    // We also want to make this div fixed\r\n    returnEle.push(populateEle);\r\n\r\n    // Modified on August 26th: we want to add an input search bar that acts as a type-ahead\r\n    let typeEle = (\r\n      <div>\r\n        <div>\r\n          <p>\r\n            <br />\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <p>\r\n            Search for attributes:\r\n            {\"\\u00A0\"}\r\n            <input\r\n              value={this.props.otherColText}\r\n              onChange={(e) => this.props.otherColTextChange(e)}\r\n              placeholder={\"Type here\"}\r\n            />\r\n          </p>\r\n        </div>\r\n      </div>\r\n    )\r\n    returnEle.push(typeEle);\r\n\r\n    // We loop through the otherColSelection array, and push on the needed radio checkbox\r\n    for (let i = 0; i < otherColSelection.length; ++i) {\r\n      // Modified on August 26th: before pushing a neighbour on, we need to check either of the following two conditions meets\r\n      // 1) this.props.otherColText is empty (\"\")\r\n      // 2) otherColSelection[i].label includes this.props.otherColText\r\n      if (this.props.otherColText === \"\" \r\n          || \r\n          otherColSelection[i].label.toUpperCase().includes(this.props.otherColText.toUpperCase())) {\r\n        returnEle.push(\r\n          <div>\r\n            <div>\r\n              <p>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={otherColChecked[i]}\r\n                  onChange={(e) =>\r\n                    this.props.toggleOtherNeighbour(e, i, this.props.colIndex)\r\n                  }\r\n                />\r\n                {\"\\u00A0\"}\r\n                {\"\\u00A0\"}\r\n                {otherColSelection[i].label}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return returnEle;\r\n  }\r\n\r\n  render() {\r\n    let selectionEle = this.createOtherColSelection();\r\n\r\n    return <div>{selectionEle}</div>;\r\n  }\r\n}\r\n\r\nexport default OtherColSelection;\r\n","import React, { Component } from \"react\";\r\nimport { FaPlus, FaMinus } from \"react-icons/fa\";\r\n\r\nclass PreviewOrigin extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.createPreviewEle = this.createPreviewEle.bind(this);\r\n    this.createOriginEle = this.createOriginEle.bind(this);\r\n  }\r\n\r\n  createPreviewEle() {\r\n    let previewInfoExpanded = this.props.previewInfoExpanded;\r\n    let previewInfoArray = this.props.previewInfoArray;\r\n    // We do some preliminary error checking\r\n    if (previewInfoExpanded.length !== previewInfoArray.length) {\r\n      alert(\"Some error exists!\");\r\n    }\r\n\r\n    // Move on to actual body of the function\r\n    let previewEle = [];\r\n    for (let i = 0; i < previewInfoArray.length; ++i) {\r\n      // First case: the current previewInfoArray element's value array only has one element. We just want to show some text.\r\n      if (previewInfoArray[i].value.length === 1) {\r\n        previewEle.push(\r\n          <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <b>{previewInfoArray[i].key}:</b>\r\n              </div>\r\n              <div className=\"col-md-7\">\r\n                {niceRender(previewInfoArray[i].value[0])}\r\n              </div>\r\n            </div>\r\n            <br />\r\n          </div>\r\n        )\r\n      } \r\n      // Second case: the current previewInfoArray element's value array has more than one element.\r\n      // In this case we have to check for the previewInfoExpanded's variable.\r\n      else {\r\n        // Subcase one: previewInfoExpanded[i] is false, which means we want to push on one element only, and show a plus button\r\n        if (previewInfoExpanded[i] === false) {\r\n          previewEle.push(\r\n            <div>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <b>{previewInfoArray[i].key}:</b>\r\n                </div>\r\n                <div className=\"col-md-7\">\r\n                  {niceRender(previewInfoArray[i].value[0])}\r\n                </div>\r\n                <div className=\"col-md-1\">\r\n                  <button\r\n                    className=\"btn btn-default\"\r\n                    onClick={(e) => this.props.togglePreviewElement(e, i)}\r\n                  >\r\n                    <FaPlus />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <br />\r\n            </div>\r\n          )\r\n        }\r\n        // Subcase one: previewInfoExpanded[i] is true, which means we want to push on value.length number of elements.\r\n        // In this case we want to give a minus, or collapse icon\r\n        else {\r\n          // We first push on the first element(or row), which will include the minus icon\r\n          previewEle.push(\r\n            <div>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <b>{previewInfoArray[i].key}:</b>\r\n                </div>\r\n                <div className=\"col-md-7\">\r\n                  {niceRender(previewInfoArray[i].value[0])}\r\n                </div>\r\n                <div className=\"col-md-1\">\r\n                  <button\r\n                    className=\"btn btn-default\"\r\n                    onClick={(e) => this.props.togglePreviewElement(e, i)}\r\n                  >\r\n                    <FaMinus />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n          // We then push on the subsequent values\r\n          for (let j = 1; j < previewInfoArray[i].value.length; ++j) {\r\n            let brEle = j === previewInfoArray[i].value.length - 1 ? <br /> : null;\r\n            previewEle.push(\r\n              <div>\r\n                <div className=\"row\">\r\n                  <div className=\"offset-md-4 col-md-7\">\r\n                    {\"- \" + niceRender(previewInfoArray[i].value[j])}\r\n                  </div>\r\n                </div>\r\n                {brEle}\r\n              </div>\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n    let returnEle = (\r\n      <div>\r\n        <p>Preview of <b>{niceRender(this.props.selectedCell.data)}</b> is:</p>\r\n        {previewEle}\r\n      </div>\r\n    )\r\n    return returnEle;\r\n  }\r\n\r\n  createOriginEle() {\r\n    let originEle = [];\r\n    for (let i = 0; i < this.props.selectedCell.origin.length; ++i) {\r\n      originEle.push(\r\n        <p>\r\n          {niceRender(this.props.selectedCell.origin[i])}\r\n        </p>\r\n      );\r\n    }\r\n    let returnEle = (\r\n      <div>\r\n        <p>Origin of <b>{niceRender(this.props.selectedCell.data)}</b> is:</p>\r\n        {originEle}\r\n      </div>\r\n    )\r\n    return returnEle;\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props.previewInfoArray);\r\n    // console.log(this.props.previewInfoExpanded);\r\n    // console.log(this.props.selectedCell);\r\n    let previewEle = this.createPreviewEle();\r\n    let originEle = this.createOriginEle();\r\n    return (\r\n      <div>\r\n        {previewEle}\r\n        <hr className=\"preview-origin-divider\"/>\r\n        {originEle}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreviewOrigin;\r\n\r\n// This function renders strings in a nicer way. \r\n// It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\nfunction niceRender(str) {\r\n  return str.replace(/_\\(.*?\\)/g, \"\")\r\n            .replace(/_/g, \" \");\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TaskMenu from \"../components/TaskMenu\";\r\nimport { Collapse, Button, CardBody, Card } from \"reactstrap\";\r\nimport { FaList, FaTable } from \"react-icons/fa\";\r\n// import TableSelection from \"../components/TableSelection\";\r\n// The two following lines are for tabs\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport TableSelection from \"./TableSelection\";\r\n// The two following lines are for range sliders\r\n// import RangeSlider from \"react-bootstrap-range-slider\";\r\n// import \"react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css\";\r\nimport FirstColSelection from \"./FirstColSelection\";\r\nimport OtherColSelection from \"./OtherColSelection\";\r\nimport PreviewOrigin from \"./PreviewOrigin\";\r\n\r\nclass ActionPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.createPropertyArray = this.createPropertyArray.bind(this);\r\n    this.createSiblingArray = this.createSiblingArray.bind(this);\r\n    this.createTableArray = this.createTableArray.bind(this);\r\n    this.createRecommendArray = this.createRecommendArray.bind(this);\r\n    this.createStartRecommend = this.createStartRecommend.bind(this);\r\n    this.createCustomizedUnion = this.createCustomizedUnion.bind(this); // updated 9/13\r\n  }\r\n\r\n  createTableArray(firstIndex, secondIndex) {\r\n    const tableArray = this.props.propertyNeighbours[firstIndex].siblingArray[\r\n      secondIndex\r\n    ].tableArray;\r\n    let tableElement = [];\r\n    for (let thirdIndex = 0; thirdIndex < tableArray.length; ++thirdIndex) {\r\n      // console.log(\"Hello\");\r\n      // console.log(tableArray[thirdIndex].title);\r\n      let tableTitleText = \"Table \" + thirdIndex + \": \";\r\n      for (let i = 0; i < tableArray[thirdIndex].title.length; ++i) {\r\n        tableTitleText = tableTitleText + tableArray[thirdIndex].title[i] + \"|\";\r\n      }\r\n      tableElement.push(\r\n        <div>\r\n          <Button\r\n            onClick={(e) =>\r\n              this.props.toggleOtherTable(\r\n                e,\r\n                firstIndex,\r\n                secondIndex,\r\n                thirdIndex\r\n              )\r\n            }\r\n          >\r\n            {tableTitleText}\r\n            <FaTable />\r\n          </Button>\r\n          <Collapse isOpen={tableArray[thirdIndex].isOpen}>\r\n            <Card>\r\n              <CardBody>\r\n                <div>\r\n                  <ul className=\"list-group list-css\">\r\n                    <li\r\n                      className=\"col-md-4 list-group-item list-button list-button-backgound-pink\"\r\n                      onClick={(e) =>\r\n                        this.props.unionTable(\r\n                          firstIndex,\r\n                          secondIndex,\r\n                          tableArray[thirdIndex].data,\r\n                          tableArray[thirdIndex].colMapping\r\n                        )\r\n                      }\r\n                    >\r\n                      Union table\r\n                    </li>\r\n                  </ul>\r\n                  <div\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: tableArray[thirdIndex].data.outerHTML,\r\n                    }}\r\n                  ></div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Collapse>\r\n        </div>\r\n      );\r\n    }\r\n    return tableElement;\r\n  }\r\n\r\n  createSiblingArray(firstIndex) {\r\n    const siblingArray = this.props.propertyNeighbours[firstIndex].siblingArray;\r\n    let siblingElement = [];\r\n    let zeroDividerSet = false;\r\n    for (\r\n      let secondIndex = 0;\r\n      secondIndex < siblingArray.length;\r\n      ++secondIndex\r\n    ) {\r\n      let tooltipText =\r\n        \"Examine tables on page \" + siblingArray[secondIndex].name;\r\n      // let divider = null;\r\n      let listClassSib = \"list-group-item\";\r\n      if (siblingArray[secondIndex].isOpen) {\r\n        listClassSib = \"list-group-item list-with-background\";\r\n      }\r\n      if (\r\n        zeroDividerSet === false &&\r\n        siblingArray[secondIndex].tableArray.length === 0\r\n      ) {\r\n        zeroDividerSet = true;\r\n        // divider = (\r\n        //   <li>\r\n        //     <h5>\r\n        //       Below are sibling pages on which no similar tables are found:\r\n        //     </h5>\r\n        //     <hr />\r\n        //   </li>\r\n        // );\r\n        siblingElement.push(\r\n          <li className=\"list-group-item\">\r\n            <hr />\r\n            <h5>\r\n              Below are sibling pages on which no similar tables are found:\r\n            </h5>\r\n            <hr />\r\n          </li>\r\n        );\r\n      }\r\n\r\n      siblingElement.push(\r\n        <li\r\n          className={listClassSib}\r\n          title={tooltipText}\r\n          // onClick={(e) =>\r\n          //   this.props.toggleSibling(e, firstIndex, secondIndex)\r\n          // }\r\n        >\r\n          <span\r\n            onClick={(e) =>\r\n              this.props.toggleSibling(e, firstIndex, secondIndex)\r\n            }\r\n          >\r\n            {niceRender(siblingArray[secondIndex].name) + \" \"}\r\n            <FaList />\r\n          </span>\r\n\r\n          <Collapse isOpen={siblingArray[secondIndex].isOpen}>\r\n            <div>\r\n              <ul className=\"list-group list-css\">\r\n                <li\r\n                  className=\"col-md-4 list-group-item list-button\"\r\n                  onClick={(e) => this.props.unionPage(firstIndex, secondIndex)}\r\n                >\r\n                  Union from page\r\n                </li>\r\n              </ul>\r\n              {this.createTableArray(firstIndex, secondIndex)}\r\n            </div>\r\n          </Collapse>\r\n        </li>\r\n      );\r\n    }\r\n    return (\r\n      <ul className=\"list-group list-css list-group-flush\">\r\n        {\" \"}\r\n        {siblingElement}{\" \"}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  createPropertyArray() {\r\n    // console.log(\"Getting here meaning we are recreating the property array\");\r\n    const propertyNeighbours = this.props.propertyNeighbours;\r\n    // console.log(propertyNeighbours);\r\n    let propertyElement = [];\r\n    for (let i = 0; i < propertyNeighbours.length; ++i) {\r\n      // We create the text for property buttons: table index plus column names\r\n      const predicate = propertyNeighbours[i].predicate;\r\n      const object = propertyNeighbours[i].object;\r\n      let propertyText =\r\n        predicate !== \"subject\"\r\n          ? predicate + \": \" + object + \" \"\r\n          : object + \" \";\r\n      let tooltipText = \"Show other pages with \" + predicate + \": \" + object;\r\n\r\n      let listClass = \"list-group-item\";\r\n      if (this.props.propertyNeighbours[i].isOpen) {\r\n        listClass = \"list-group-item list-with-background\";\r\n      }\r\n\r\n      propertyElement.push(\r\n        <li class={listClass} title={tooltipText}>\r\n          <span onClick={(e) => this.props.togglePropertyNeighbours(e, i)}>\r\n            {niceRender(propertyText)}\r\n            <FaList />\r\n          </span>\r\n\r\n          <Collapse isOpen={this.props.propertyNeighbours[i].isOpen}>\r\n            <div>\r\n              <hr />\r\n              {/* <ul className=\"list-group list-css\">\r\n                <li\r\n                  className=\"col-md-4 list-group-item list-button list-button-backgound-pink\"\r\n                  onClick={(e) => this.props.unionProperty(i)}\r\n                >\r\n                  Union from all pages\r\n                </li>\r\n              </ul> */}\r\n              {this.createSiblingArray(i)}\r\n            </div>\r\n          </Collapse>\r\n        </li>\r\n      );\r\n    }\r\n    return (\r\n      <ul className=\"list-group list-css list-group-flush\">\r\n        {propertyElement}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  // This function creates the HTML element for recommend array\r\n\r\n  createRecommendArray(colIndex, recommendArray) {\r\n    // console.log(recommendArray);\r\n    let recommendEle = [];\r\n    // stringRecommend and semanticRecommend are both HTML elements that should be constructed from recommend array\r\n    for (let i = 0; i < recommendArray.length; ++i) {\r\n      let neighbourArray = [\r\n        {\r\n          value: recommendArray[i].value,\r\n          type: recommendArray[i].type,\r\n        },\r\n      ];\r\n      let recommendText = recommendArray[i].label;\r\n      recommendEle.push(\r\n        <div>\r\n          <p>\r\n            <Button\r\n              onClick={(e) =>\r\n                this.props.populateRecommendation(e, colIndex, neighbourArray)\r\n              }\r\n            >\r\n              {recommendText}\r\n            </Button>\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    // Now, we also want to tell user they are adding attributes with respect to which column.\r\n    let recommendationText = \"\";\r\n    if (this.props.keyColIndex !== -1) {\r\n      let neighbourArray = this.props.tableHeader[this.props.keyColIndex];\r\n      recommendationText =\r\n        this.props.keyColIndex !== 0\r\n          ? createNeighbourText(neighbourArray)\r\n          : \"First Column\";\r\n    }\r\n    let returnEle = (\r\n      <div className=\"container\">\r\n        <p>Attribute recommendations:</p>\r\n        <p>\r\n          Current Search Column: <b>{recommendationText}</b>\r\n        </p>\r\n        {recommendEle}\r\n      </div>\r\n    );\r\n    return returnEle;\r\n  }\r\n\r\n  // This function creates the HTML element for populateSameNeighbour\r\n  createSameNeighbour(actionInfo) {\r\n    let neighbourArrayText = createNeighbourText(actionInfo.neighbourArray);\r\n    let returnEle = (\r\n      <div className=\"container\">\r\n        <p>Some cells in this column contain multiple values.</p>\r\n        <p>Expand all other values that are also</p>\r\n        <p>\r\n          <b>{neighbourArrayText}</b> ?\r\n        </p>\r\n        <div className=\"row\">\r\n          <Button\r\n            className=\"col-md-4\"\r\n            onClick={(e) =>\r\n              this.props.sameNeighbourOneRow(\r\n                e,\r\n                actionInfo.colIndex,\r\n                actionInfo.neighbourArray\r\n              )\r\n            }\r\n          >\r\n            In One Row\r\n          </Button>\r\n          <Button\r\n            className=\"offset-md-1 col-md-4\"\r\n            onClick={(e) =>\r\n              this.props.sameNeighbourDiffRow(\r\n                e,\r\n                actionInfo.colIndex,\r\n                actionInfo.neighbourArray\r\n              )\r\n            }\r\n          >\r\n            In Separate Rows\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n    return returnEle;\r\n  }\r\n\r\n  // This function creates the starting recommendations, when actionInfo.task is showStartRecommend\r\n  createStartRecommend() {\r\n    console.log(this.props.curActionInfo);\r\n    let recommendEle = [];\r\n    let recommendArray = this.props.curActionInfo.recommendArray;\r\n    for (let i = 0; i < recommendArray.length; ++i) {\r\n      let neighbourArray = [\r\n        {\r\n          value: recommendArray[i].value,\r\n          type: recommendArray[i].type,\r\n        },\r\n      ];\r\n      let recommendText = recommendArray[i].label;\r\n      recommendEle.push(\r\n        <div>\r\n          <p>\r\n            <Button\r\n              onClick={(e) =>\r\n                this.props.populateStartRecommend(\r\n                  e,\r\n                  this.props.curActionInfo.colIndex,\r\n                  neighbourArray\r\n                )\r\n              }\r\n            >\r\n              {recommendText}\r\n            </Button>\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    // Now, we also want to tell user they are adding attributes with respect to which column.\r\n    let recommendationText = \"\";\r\n    if (this.props.keyColIndex !== -1) {\r\n      let neighbourArray = this.props.tableHeader[this.props.keyColIndex];\r\n      recommendationText =\r\n        this.props.keyColIndex !== 0\r\n          ? createNeighbourText(neighbourArray)\r\n          : \"First Column\";\r\n    }\r\n    let returnEle = (\r\n      <div className=\"container\">\r\n        <p>Attribute recommendations:</p>\r\n        <p>\r\n          Current Search Column: <b>{recommendationText}</b>\r\n        </p>\r\n        {recommendEle}\r\n      </div>\r\n    );\r\n    return returnEle;\r\n  }\r\n\r\n  // The following function creates the HTML element for table union, in the startSubject case.\r\n  createCustomizedUnion() {\r\n\r\n    // First element to create: the title (text) element\r\n    let textEle;\r\n    if (this.props.unionURL === \"\") {\r\n      textEle = \r\n        <div>\r\n          <p>\r\n            For customized table, please paste URL below to look for tables.\r\n          </p>\r\n        </div>\r\n    }\r\n    else {\r\n      textEle = \r\n        <div>\r\n          <p>\r\n            The following tables are from page:{\" \"}\r\n            <b>\r\n              {decodeURIComponent(this.props.unionURL.slice(30))}\r\n            </b>\r\n          </p>\r\n        </div>\r\n    }\r\n\r\n    // Second element to create: input element to support the URL pasting.\r\n    let formEle = \r\n      <div>\r\n        <div className=\"row text-center\">\r\n          <div className=\"col-md-9 offset-md-1\">\r\n            <input\r\n              placeholder=\"e.g., https://en.wikipedia.org/wiki/Canada\"\r\n              onPaste={(e) => this.props.handleUnionPaste(e)}\r\n              className=\" form-control\"\r\n            ></input>\r\n          </div>\r\n        </div>\r\n        <br />\r\n      </div>\r\n    \r\n    // Third element to create: TableCreation component\r\n    let tableListEle = \r\n      <div>\r\n        <TableSelection\r\n          originTableArray={this.props.unionTableArray}\r\n          tableOpenList={this.props.unionOpenList}\r\n          toggleTable={this.props.toggleUnionTable}\r\n          listType={\"union\"}\r\n          buttonFunction={this.props.showUnionAlign} \r\n        />\r\n      </div>\r\n\r\n    // Finally, we create the return element.\r\n    let returnEle = \r\n      <div>\r\n        {textEle}\r\n        {formEle}\r\n        {tableListEle}\r\n      </div>\r\n    return returnEle;\r\n  }\r\n\r\n  render() {\r\n    let actionEle; // contains either wrangling actions or unionable tables for the action panel\r\n    let wrapperEle; // wrapper element for actionEle. This is what we will render in the HTML.\r\n    let titleEle; // contains what we will display as the title for the action panel\r\n\r\n    // We first decide the content for the titleElement\r\n    if (\r\n      this.props.usecaseSelected === \"\"\r\n      // ||\r\n      // (this.props.usecaseSelected === \"startTable\" &&\r\n      //   this.props.selectedTableIndex === -1)\r\n    ) {\r\n      titleEle = (\r\n        <div className=\"row\">\r\n          <div className=\"col-md-8\">\r\n            <h4 className=\"logo-left-color\">\r\n              Insert Data\r\n              <span> </span>\r\n              {/* <span className=\"logo-right-color xsmall\">\r\n                Select your starting action\r\n              </span> */}\r\n            </h4>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      titleEle = (\r\n        <div className=\"row action-header\">\r\n          <div className=\"col-md-8\">\r\n            <h4 className=\"logo-left-color\">\r\n              Insert Data\r\n              <span> </span>\r\n              {/* <span className=\"logo-right-color xsmall\">\r\n                Select your next action\r\n              </span> */}\r\n            </h4>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // We now decide the content for the actionElement\r\n    // Case 1: URL has been pasted, but task has not been selected. User needs to select task.\r\n    if (this.props.usecaseSelected === \"\") {\r\n      wrapperEle = (\r\n        <TaskMenu\r\n          handleStartSubject={this.props.handleStartSubject}\r\n          urlPasted={this.props.urlPasted}\r\n          showTableSelection={this.props.showTableSelection}\r\n          toggleTableSelection={this.props.toggleTableSelection}\r\n          originTableArray={this.props.originTableArray}\r\n          tableOpenList={this.props.tableOpenList}\r\n          toggleTable={this.props.toggleTable}\r\n          selectedTableIndex={this.props.selectedTableIndex}\r\n          handleStartTable={this.props.handleStartTable}\r\n        />\r\n      );\r\n    }\r\n    // Case 2: Task has been selected. curActionInfo is not null, meaning we have to display some task in ActionPanel\r\n    else if (this.props.curActionInfo !== null) {\r\n      const actionInfo = this.props.curActionInfo;\r\n      // Case 2.1: Users have selected \"Create Table from subject\".\r\n      // We ask users to select a column header for the first column.\r\n      if (actionInfo.task === \"afterStartSubject\") {\r\n        actionEle = (\r\n          <FirstColSelection\r\n            firstColSelection={this.props.firstColSelection}\r\n            firstColChecked={this.props.firstColChecked}\r\n            firstColText={this.props.firstColText}\r\n            firstColFilled={this.props.firstColFilled}\r\n            toggleFirstNeighbour={this.props.toggleFirstNeighbour}\r\n            firstColTextChange={this.props.firstColTextChange}\r\n            tableHeader={this.props.tableHeader}\r\n            keyCheckedIndex={this.props.keyCheckedIndex}\r\n            populateKeyColumn={this.props.populateKeyColumn}\r\n            confirmAddFirstCol={this.props.confirmAddFirstCol}\r\n          />\r\n        );\r\n      }\r\n      // Case 2.2: Users have clicked on the down arrow for non-first columns.\r\n      // We ask users to select a column header for this column.\r\n      else if (actionInfo.task === \"showOtherColSelection\") {\r\n        actionEle = (\r\n          <OtherColSelection\r\n            otherColSelection={this.props.otherColSelection}\r\n            otherColChecked={this.props.otherColChecked}\r\n            otherColText={this.props.otherColText}\r\n            otherCheckedIndex={this.props.otherCheckedIndex}\r\n            toggleOtherNeighbour={this.props.toggleOtherNeighbour}\r\n            otherColTextChange={this.props.otherColTextChange}\r\n            populateOtherColumn={this.props.populateOtherColumn}\r\n            colIndex={actionInfo.colIndex}\r\n          />\r\n        );\r\n      }\r\n      // Case 2.2: Users have click on the PLUS icon on first column's header.\r\n      // We ask users if they want to add more entities to the first column.\r\n      else if (actionInfo.task === \"plusClicked\") {\r\n        // We want to do an error check here: if the first column is not the current search column, we disable adding more entities to it.\r\n        if (this.props.keyColIndex !== 0) {\r\n          actionEle = (\r\n            <div>\r\n              <p>\r\n                <b>\r\n                  Please set the first column as the search column before adding\r\n                  more entities to it.\r\n                </b>\r\n              </p>\r\n            </div>\r\n          );\r\n        } else {\r\n          actionEle = (\r\n            <div>\r\n              <p>Add more entities to the first column?</p>\r\n              <Button onClick={() => this.props.addToFirstCol()}>OK</Button>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n      // In this case, we tell users they can keep wrangling by selecting column header for empty columns\r\n      else if (actionInfo.task === \"afterPopulateColumn\") {\r\n        actionEle = (\r\n          <div>\r\n            <p>\r\n              <b>Fill an empty column</b> by clicking on its <b>edit icon</b>\r\n            </p>\r\n            <p>OR</p>\r\n            <p>\r\n              <b>Add a new column</b> by clicking on a column's <b>plus icon</b>\r\n            </p>\r\n          </div>\r\n        );\r\n      }\r\n      // In this case we give user a button to allow the population of first column\r\n      else if (actionInfo.task === \"populateKeyColumn\") {\r\n        let neighbourArrayText = \"\";\r\n        for (let i = 0; i < actionInfo.neighbourArray.length; ++i) {\r\n          if (i > 0) {\r\n            neighbourArrayText += \" & \";\r\n          }\r\n          neighbourArrayText += actionInfo.neighbourArray[i].label;\r\n        }\r\n        if (neighbourArrayText !== \"\") {\r\n          actionEle = (\r\n            <div>\r\n              <p>Fill this column with:</p>\r\n              <p>\r\n                <b>{neighbourArrayText}</b> ?\r\n              </p>\r\n              <Button\r\n                onClick={(e) =>\r\n                  this.props.populateKeyColumn(\r\n                    e,\r\n                    actionInfo.colIndex,\r\n                    actionInfo.neighbourArray\r\n                  )\r\n                }\r\n              >\r\n                OK\r\n              </Button>\r\n            </div>\r\n          );\r\n        } else {\r\n          actionEle = (\r\n            <div>\r\n              <p className=\"suggestion-text\">\r\n                Fill the <b>first column header</b> by choosing from its{\" \"}\r\n                <b>down arrow</b>\r\n              </p>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n      // In this case we give user a button to allow the population of a new column\r\n      else if (actionInfo.task === \"populateOtherColumn\") {\r\n        let neighbourArrayText = createNeighbourText(actionInfo.neighbourArray);\r\n        actionEle = (\r\n          <div>\r\n            <p>Fill this column with:</p>\r\n            <p>\r\n              <b>{neighbourArrayText}</b> ?\r\n            </p>\r\n            <Button\r\n              onClick={(e) =>\r\n                this.props.populateOtherColumn(\r\n                  e,\r\n                  actionInfo.colIndex,\r\n                  actionInfo.neighbourArray\r\n                )\r\n              }\r\n            >\r\n              OK\r\n            </Button>\r\n          </div>\r\n        );\r\n      }\r\n      // In this case we give user a button to allow the population of same neighbour\r\n      else if (actionInfo.task === \"populateSameNeighbour\") {\r\n        actionEle = this.createSameNeighbour(actionInfo);\r\n      }\r\n      // In this case we give users an array of recommended neighbours to add to the table\r\n      else if (actionInfo.task === \"populateRecommendation\") {\r\n        let recommendArray = this.createRecommendArray(\r\n          actionInfo.colIndex,\r\n          actionInfo.recommendArray\r\n        );\r\n        actionEle = <div>{recommendArray}</div>;\r\n      }\r\n      // In this case we have to include both populateSameNeighbour and populateRecommendation\r\n      else if (actionInfo.task === \"sameNeighbourAndRecommendation\") {\r\n        let sameNeighbourEle = this.createSameNeighbour(actionInfo);\r\n        let recommendEle = this.createRecommendArray(\r\n          actionInfo.colIndex,\r\n          actionInfo.recommendArray\r\n        );\r\n        actionEle = (\r\n          <div>\r\n            <Card className=\"action-panel-card\">{recommendEle}</Card>\r\n            <br />\r\n            <Card className=\"action-panel-card\">{sameNeighbourEle}</Card>\r\n          </div>\r\n        );\r\n      }\r\n      // In this case we give user four column filter methods: sort asc, sort des, filter, and dedup\r\n      else if (actionInfo.task === \"showFilterMethods\") {\r\n        let textEle = null;\r\n        if (actionInfo.colIndex === 0) {\r\n          textEle = (\r\n            <p>\r\n              <b>How would you like to process the first column?</b>\r\n            </p>\r\n          );\r\n        } else {\r\n          textEle = (\r\n            <p>\r\n              <b>\r\n                How would you like to process column{\" \"}\r\n                {createNeighbourText(\r\n                  this.props.tableHeader[actionInfo.colIndex]\r\n                )}{\" \"}\r\n                ?\r\n              </b>\r\n            </p>\r\n          );\r\n        }\r\n        // console.log(textEle);\r\n        actionEle = (\r\n          <div>\r\n            <div>{textEle}</div>\r\n            <div>\r\n              <Button\r\n                onClick={(e) =>\r\n                  this.props.contextSortColumn(\r\n                    e,\r\n                    actionInfo.colIndex,\r\n                    \"ascending\"\r\n                  )\r\n                }\r\n              >\r\n                Sort ascending\r\n              </Button>\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <Button\r\n                onClick={(e) =>\r\n                  this.props.contextSortColumn(\r\n                    e,\r\n                    actionInfo.colIndex,\r\n                    \"descending\"\r\n                  )\r\n                }\r\n              >\r\n                Sort descending\r\n              </Button>\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <Button\r\n                onClick={(e) => this.props.openFilter(e, actionInfo.colIndex)}\r\n              >\r\n                Filter this column\r\n              </Button>\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <Button\r\n                onClick={(e) =>\r\n                  this.props.contextDedupColumn(e, actionInfo.colIndex)\r\n                }\r\n              >\r\n                Dedup this column\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n      // In this case we display the origin of selected cell\r\n      else if (actionInfo.task === \"contextCellOrigin\") {\r\n        actionEle = (\r\n          <div>\r\n            <p>Origin of selected cell is:</p>\r\n            <div>{actionInfo.origin}</div>\r\n          </div>\r\n        );\r\n      }\r\n      // In this case we display the origin of selected cell\r\n      else if (actionInfo.task === \"originPreviewPage\") {\r\n        actionEle = (\r\n          // <div>\r\n          //   <div>\r\n          //     <p>Preview of <b>{niceRender(actionInfo.cellValue)}</b> is:</p>\r\n          //     <div>\r\n          //       {renderPreview(actionInfo.preview)}\r\n          //     </div>\r\n          //   </div>\r\n          //   <hr className=\"preview-origin-divider\"/>\r\n          //   <div>\r\n          //     <p>Origin of <b>{niceRender(actionInfo.cellValue)}</b> is:</p>\r\n          //     <div>{actionInfo.origin}</div>\r\n          //   </div>\r\n          // </div>\r\n          <PreviewOrigin\r\n            previewInfoArray={this.props.previewInfoArray}\r\n            previewInfoExpanded={this.props.previewInfoExpanded}\r\n            selectedCell={this.props.selectedCell}\r\n            togglePreviewElement={this.props.togglePreviewElement}\r\n          />\r\n        );\r\n      }\r\n      // In this case we display the starting recommendations\r\n      else if (actionInfo.task === \"showStartRecommend\") {\r\n        let recommendEle = this.createStartRecommend();\r\n        actionEle = <div>{recommendEle}</div>;\r\n      }\r\n      // In this case we have to include both populateSameNeighbour and populateStartRecommend\r\n      else if (actionInfo.task === \"sameNeighbourAndStartRecommend\") {\r\n        let sameNeighbourEle = this.createSameNeighbour(actionInfo);\r\n        let recommendEle = this.createStartRecommend();\r\n        actionEle = (\r\n          <div>\r\n            <Card className=\"action-panel-card\">{recommendEle}</Card>\r\n            <br />\r\n            <Card className=\"action-panel-card\">{sameNeighbourEle}</Card>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    // This is an empty else clause\r\n    else {\r\n    }\r\n\r\n    // Now we have to determine whether we are rendering one tab or two tabs.\r\n    // One tab for startSubject. Two tabs for startTable.\r\n    // console.log(this.props.usecaseSelected);\r\n\r\n    // Modified after JOIN has been added in:\r\n    // In the startSubject case, we will have two tab: wrangling actions, and table actions.\r\n    // Wrangling Actions: same as before.\r\n    // Table Actions: Union will be empty, JOIN will use the pasted URL from the beginning.\r\n\r\n    if (this.props.usecaseSelected === \"startSubject\") {\r\n      let curIndex = this.props.tabIndex;\r\n\r\n      // updated on 9/13: let's check with this.props.unionURL to decide what we want to show in the union table section\r\n\r\n\r\n\r\n      wrapperEle = (\r\n        <div className=\"height-inherit\">\r\n          <Tabs\r\n            selectedIndex={curIndex}\r\n            onSelect={(index) => this.props.handleTabSwitch(index)}\r\n          >\r\n            <TabList>\r\n              <Tab>From DBpedia</Tab>\r\n              <Tab>From Wiki Tables</Tab>\r\n            </TabList>\r\n            <div className=\"action-scrollable\">\r\n              <TabPanel>{actionEle}</TabPanel>\r\n              <TabPanel>\r\n                <div>\r\n                  <ul class=\"list-group list-css list-group-flush\">\r\n                    <hr className=\"m-0\"></hr>\r\n                    <li className=\"list-group-item\">\r\n                      <span\r\n                        onClick={(e) => this.props.toggleUnionJoin(e, \"union\")}\r\n                      >\r\n                        Union Tables from Wikipedia\r\n                      </span>\r\n\r\n                      <Collapse isOpen={this.props.showUnionTables}>\r\n                        <CardBody>\r\n                          <Card>\r\n                            {this.createCustomizedUnion()}\r\n                          </Card>\r\n                        </CardBody>\r\n                      </Collapse>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                      <span\r\n                        onClick={(e) => this.props.toggleUnionJoin(e, \"join\")}\r\n                      >\r\n                        Join Tables from Wikipedia\r\n                      </span>\r\n\r\n                      <Collapse isOpen={this.props.showJoinTables}>\r\n                        <CardBody>\r\n                          <Card>\r\n                            <p>\r\n                              The following tables are from page:{\" \"}\r\n                              <b>\r\n                                {decodeURIComponent(\r\n                                  this.props.urlPasted.slice(30)\r\n                                )}\r\n                              </b>\r\n                            </p>\r\n                            <TableSelection\r\n                              originTableArray={this.props.originTableArray}\r\n                              tableOpenList={this.props.tableOpenList}\r\n                              toggleTable={this.props.toggleTable}\r\n                              buttonFunction={this.props.handleJoinTable}\r\n                              listType={\"join\"}\r\n                            />\r\n                          </Card>\r\n                        </CardBody>\r\n                      </Collapse>\r\n                    </li>\r\n                    <hr className=\"m-0\"></hr>\r\n                  </ul>\r\n                </div>\r\n              </TabPanel>\r\n            </div>\r\n          </Tabs>\r\n        </div>\r\n      );\r\n    } \r\n    else if (this.props.usecaseSelected === \"startTable\") {\r\n      // If we have not selected a table, we show both tabs, as we are fully ready.\r\n      if (this.props.selectedTableIndex !== -1) {\r\n        let curIndex = this.props.tabIndex;\r\n        wrapperEle = (\r\n          <div className=\"height-inherit\">\r\n            <Tabs\r\n              selectedIndex={curIndex}\r\n              onSelect={(index) => this.props.handleTabSwitch(index)}\r\n              className=\"height-inherit\"\r\n            >\r\n              <TabList>\r\n                <Tab>From DBpedia</Tab>\r\n                <Tab>From Wiki Tables</Tab>\r\n              </TabList>\r\n              <div className=\"action-scrollable\">\r\n                <TabPanel>{actionEle}</TabPanel>\r\n                <TabPanel>\r\n                  <div>\r\n                    <ul class=\"list-group list-css list-group-flush\">\r\n                      <hr className=\"m-0\"></hr>\r\n                      <li className=\"list-group-item\">\r\n                        <span\r\n                          onClick={(e) =>\r\n                            this.props.toggleUnionJoin(e, \"union\")\r\n                          }\r\n                        >\r\n                          Union Tables from Wikipedia\r\n                        </span>\r\n\r\n                        <Collapse isOpen={this.props.showUnionTables}>\r\n                          <CardBody>\r\n                            <Card>\r\n                              Expand relations below to look at other pages with\r\n                              similar tables:\r\n                              <br />\r\n                              {this.createPropertyArray()}\r\n                            </Card>\r\n                          </CardBody>\r\n                        </Collapse>\r\n                      </li>\r\n                      <li className=\"list-group-item\">\r\n                        <span\r\n                          onClick={(e) => this.props.toggleUnionJoin(e, \"join\")}\r\n                        >\r\n                          Join Tables from Wikipedia\r\n                        </span>\r\n\r\n                        <Collapse isOpen={this.props.showJoinTables}>\r\n                          <CardBody>\r\n                            <Card>\r\n                              <p>\r\n                                The following tables are from page:{\" \"}\r\n                                <b>\r\n                                  {decodeURIComponent(\r\n                                    this.props.urlPasted.slice(30)\r\n                                  )}\r\n                                </b>\r\n                              </p>\r\n                              <TableSelection\r\n                                originTableArray={this.props.originTableArray}\r\n                                tableOpenList={this.props.tableOpenList}\r\n                                toggleTable={this.props.toggleTable}\r\n                                buttonFunction={this.props.handleJoinTable}\r\n                                listType={\"join\"}\r\n                              />\r\n                            </Card>\r\n                          </CardBody>\r\n                        </Collapse>\r\n                      </li>\r\n                      <hr className=\"m-0\"></hr>\r\n                    </ul>\r\n                  </div>\r\n                </TabPanel>\r\n              </div>\r\n            </Tabs>\r\n          </div>\r\n        );\r\n      }\r\n      // Else, we have not selected a table yet. In this case, wrapperEle should be equal to actionEle\r\n      else {\r\n        wrapperEle = actionEle;\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"height-inherit\">\r\n        <div>{titleEle}</div>\r\n        <div className=\"height-inherit\">{wrapperEle}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ActionPanel;\r\n\r\n// // The following helper function creates HTML elements from previewInfoArray,\r\n// // an array of key-val pairs containing the info for a cell's preview.\r\n\r\n// // It also makes use of niceRender, so that preview looks clean.\r\n\r\n// function renderPreview(previewInfoArray) {\r\n//   // console.log(previewInfoArray);\r\n//   let infoEle = [];\r\n//   for (let i = 0; i < previewInfoArray.length; ++i) {\r\n//     let keyLiteral = previewInfoArray[i].key;\r\n//     // We get the first element from value Array\r\n//     let valLiteral = niceRender(previewInfoArray[i].value[0]);\r\n//     // Since we have already included thte first element, we start the index from 1\r\n//     for (let j = 1; j < previewInfoArray[i].value.length; ++j) {\r\n//       valLiteral = valLiteral + \"; \"+niceRender(previewInfoArray[i].value[j]);\r\n//     }\r\n//     infoEle.push(\r\n//       <p><b>{keyLiteral}</b>{\":\"}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{valLiteral}</p>\r\n//     )\r\n//   }\r\n//   return infoEle;\r\n// }\r\n\r\n// // This function renders this.props.tableData[i][j].data in a nicer way.\r\n// // It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\n// function niceRender(str) {\r\n//   return str.replace(/_\\(.*?\\)/g, \"\")\r\n//             .replace(/_/g, \" \");\r\n// }\r\n\r\n// This function creates neighbourArrayText from neighbourArray\r\n\r\nfunction createNeighbourText(neighbourArray) {\r\n  let neighbourArrayText = \"\";\r\n  for (let i = 0; i < neighbourArray.length; ++i) {\r\n    if (i > 0) {\r\n      neighbourArrayText += \" OR \";\r\n    }\r\n    let curNeighbourText =\r\n      neighbourArray[i].type === \"object\"\r\n        ? \"is \" + neighbourArray[i].value + \" of\"\r\n        : neighbourArray[i].value;\r\n    neighbourArrayText += curNeighbourText;\r\n  }\r\n  return neighbourArrayText;\r\n}\r\n\r\n// This function renders this.props.tableData[i][j].data in a nicer way.\r\n// It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\nfunction niceRender(str) {\r\n  return str.replace(/_\\(.*?\\)/g, \"\").replace(/_/g, \" \");\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass PagePanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    let pageEle = null;\r\n    let wikiPageClass = \"small-padding wiki-page-hidden\";\r\n    let buttonClass = \"btn btn-sm btn-info toggle-button\";\r\n    if (this.props.iframeURL !== \"\") {\r\n      let buttonhideShow = (\r\n        <button\r\n          className={buttonClass}\r\n          onClick={() => this.props.toggleWikiPage()}\r\n        >\r\n          <i class=\"fa fa-chevron-up\" aria-hidden=\"true\"></i>\r\n          Show\r\n        </button>\r\n      );\r\n      if (!this.props.pageHidden) {\r\n        wikiPageClass = \"small-padding wiki-page\";\r\n        buttonhideShow = (\r\n          <div>\r\n            <hr className=\"m-1\"></hr>\r\n            <button\r\n              className={buttonClass}\r\n              onClick={() => this.props.toggleWikiPage()}\r\n            >\r\n              <i class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i>\r\n              Hide\r\n            </button>\r\n          </div>\r\n        );\r\n      }\r\n      pageEle = (\r\n        <div className=\"page-panel text-right\">\r\n          {buttonhideShow}\r\n          <div className={wikiPageClass}>\r\n            <iframe\r\n              id=\"iframe\"\r\n              title=\"URLPage\"\r\n              src={this.props.iframeURL}\r\n              className=\"iframe-cls\"\r\n            ></iframe>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return <div>{pageEle}</div>;\r\n  }\r\n}\r\n\r\nexport default PagePanel;\r\n","// import { Route, Switch, Link } from \"react-router-dom\";\r\nimport React, { Component } from \"react\";\r\nimport { combinations } from \"mathjs\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport SettingModal from \"../components/SettingModal\";\r\nimport FilterModal from \"../components/FilterModal\";\r\nimport JoinModal from \"../components/JoinModal\";\r\nimport UnionModal from \"../components/UnionModal\";\r\nimport LandingPage from \"../components/LandingPage\";\r\nimport TablePanel from \"../components/TablePanel\";\r\nimport ActionPanel from \"../components/ActionPanel\";\r\nimport PagePanel from \"../components/PagePanel\";\r\nimport _ from \"lodash\";\r\n\r\nconst maxNeighbourCount = 10;\r\nconst maxFetchCount = 30;\r\nconst initialColNum = 4;\r\nconst initialRowNum = 45;\r\n\r\nclass MainBody extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let tableData = [];\r\n    let tableHeader = [];\r\n    let optionsMap = [];\r\n    for (let i = 0; i < initialRowNum; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < initialColNum; ++j) {\r\n        // Initially, cell has no data or origin\r\n        // data field is a string\r\n        // origin field is an array of strings\r\n        tempRow.push({ data: \"\", origin: [] });\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n    for (let j = 0; j < initialColNum; ++j) {\r\n      let emptyOptions = [];\r\n      optionsMap.push(emptyOptions);\r\n      tableHeader.push([]);\r\n    }\r\n    this.state = {\r\n      // states below are general states used throughout the app\r\n      urlPasted: \"\",  \r\n      tablePasted: \"\",\r\n      usecaseSelected: \"\",\r\n      pageHidden: false,\r\n      iframeURL: \"\",\r\n      curActionInfo: null, // object storing the current action that should be displayed in ActionPanel. Initially null.\r\n      lastAction: \"\",      // string storing the last action that has modified the result table in the table panel\r\n      prevState: \"\",       // objects storing the information needed to undo the last step. Information stored depends on lastAction\r\n      showSetting: false,    // boolean storing whether setting modal is shown or not. Default to false.\r\n      showTableSelection: false,    // boolean storing whether the list of tables from page is shown. Default to false.\r\n      tabIndex: 1,         // integer storing the index of the tab currently displaying. Default to 1.\r\n      showUnionTables: false,  // boolean storing whether all the unionable pages and tables is shown. Default to false.\r\n      showJoinTables: false,   // boolean storing whether the page storing joinable tables is shown. Default to false.\r\n\r\n      // states below are useful for startSubject\r\n      keyColIndex: 0,   // number storing the index of the search column. initially the key column is the first column\r\n      // 1D array of objects with four properties storing the table headers. This array is used to create the column headers in table panel\r\n      // 1) label:  string storing the label of an option (ex: spouse)\r\n      // 2) value:  string storing the value of an option (ex: spouse)\r\n      // 3) type:   string that's either \"subject\" or \"object\". Storing whether the current option is ?s or ?o with respect to key column. Can be empty.\r\n      // 4) range:  string storing the rdfs:range of the current option.\r\n      tableHeader: tableHeader,\r\n      tableData: tableData, // 2D array of objects storing the table data (not including the table headers).\r\n      optionsMap: optionsMap, // 2D array storing the options map\r\n      keyColNeighbours: [], // 1D array storing the neighbours of the key column\r\n      // An object with two attributes: subject and object\r\n      // Subject and Object are both 1D arrays \r\n      // - Length tableData.length\r\n      // - Each element is an object with multiple attributes. Ex: {birthdate:[1998-01-01], almaMater:[a, b, c]}\r\n      firstDegNeighbours: [],\r\n\r\n      // states below are useful for first column header selection\r\n      firstColSelection: [],   // 1D array of objects storing information about the starting subject's neighbours\r\n      firstColChecked: [],     // 1D array of booleans storing whether a neighbour of the starting subject is selected or not\r\n      firstColFilled: false,   // boolean indicating whether the first column has been filled. \r\n      firstColText: \"\",        // string storing the type-ahead text that users have typed in for first column's selection. Initially empty.\r\n                               // Will be set to true and remain that way after calling populateKeyColumn, or handleStartTable\r\n      keyCheckedIndex: -1,     // index storing the most recent index that has just been toggled for the first column. Initially -1.\r\n      firstColHeaderInfo: [],  // 2D array of objects storing information needed to create the first column's header. (since both AND and OR need to be considered)\r\n\r\n      // states below are useful for other column header selection\r\n      otherColSelection: [],    // 1D array of objects storing information about the search column's neighbours\r\n      otherColChecked: [],      // 1D array of booleans storing whether a neighbour of the search column is selected or not\r\n      otherCheckedIndex: -1,    // index storing the most recent index that has just been toggled for a non-first column. Initially -1.\r\n      otherColText: \"\",         // string storing the type-ahead text that users have typed in for other column's selection. Initially empty.\r\n\r\n      // states below are useful for startTable\r\n      originTableArray: [], // 1D array storing all tables found on pasted URL\r\n      tableOpenList: [], // 1D array storing whether each table in originTableArray has been toggled open or not\r\n      selectedTableIndex: -1, // index of table selected by user. If it's -1, take user to table selection. Else, show the table in Table Panel.\r\n      selectedClassAnnotation: [], // semantic class annotation for each column of selected table\r\n      // 2D arary of objects with three properties, which store the table data from explore table task. Similar to tableData above. \r\n      // Three properties: data, origin, rowSpan, colSpan.\r\n      tableDataExplore: [], \r\n      // array of objects with four properties storing the status/content for each property neighbour\r\n      // 1) predicate: string storing the predicate (ex. dbp:league)\r\n      // 2) object: string storing the object (ex. dbo:NBA)\r\n      // 3) isOpen: boolean storing whether the current property neighbour is toggled on or not\r\n      // 4) siblingArary: array of objects with two properties storing the staus/content for each sibling URL\r\n      //    4.1) isOpen:      boolean storing whether the current sibling is toggled on or not\r\n      //    4.2) tableArray:  array of objects storing the status/content for each \"same\" table on the sibling URL\r\n      //         4.2.1) isOepn:        boolean storing whether the current table is toggled on or not\r\n      //         4.2.2) unionScore:    number storing teh union score of the current table (how \"similar\" it is to the original table)\r\n      //         4.2.3) colMapping:    array of numbers storing the column mapping between the current table and the selected table\r\n      //         4.2.4) data:          HTML of a table\r\n      //         4.2.5) title:         array of strings storing the column headers of the current table\r\n      propertyNeighbours: [],\r\n      semanticEnabled: \"disabled\", // boolean value indicating whether semantic mapping is enabled or not. Default to true\r\n      unionCutOff: 1, // number representing the union percentage a table must have to be considered unionable (>=)\r\n\r\n      // states below are for column filter\r\n      showFilter: false,        // boolean storing whether we want to show column filter or not. Initially false.\r\n      checkAll: true,           // boolean that when toggled to true, all dataAndChecked will be set to true, \r\n                                // and when false, all dataAndChecked will be set to false.\r\n      curFilterIndex: -1,       // number storing the index of the column on which we apply the filter. Initially -1 (no filter.)\r\n      dataAndChecked: [],       // array of [data, checked] pairs storing which data are in the filter column, and whether we should keep them.\r\n    \r\n      // states below are for table join\r\n      showJoinModal: false,    // boolean storing whether the join option modal is show or not. Default to false.\r\n      joinTableIndex: -1,      // number storing the index of the table we want to join from originTableArray.\r\n      joinTableData: [],       // 2D array storing the data of the table we want to join from originTableArray. Initially empty.\r\n      originColOptions: [],    // 1D array storing the selection options for the original table.\r\n      joinColOptions: [],      // 1D array storing the selection options for the newly selected table.\r\n      originJoinIndex: -1,     // number storing the index of the column of the original table that we are joining.\r\n      joinJoinIndex: -1,       // number storing the index of the column of the newly selected table that we are joining.\r\n\r\n      // states below are for column preview\r\n      previewColIndex: -1,     // number storing the index of the column that we want to show preview for. \r\n                               // When -1, we do not want to show any preview. This state needs to be passed to TablePanel\r\n                               // It should only be set to non -1 when we have toggled some selections on, but haven't confirmed on selections yet. \r\n      \r\n      // states below are useful for cell preview and origin\r\n      selectedCell: null,      // data in the format of tableData[i][j] (has both data and origin attribute). \r\n                               // (origin element can be determined from this)\r\n      previewInfoArray: [],    // array storing the information used to create the preview element. \r\n                               // It contains categories, subject, object first degree neighbours.\r\n      previewInfoExpanded: [], // array of booleans storing whether each element from previewInfoArray is expanded or not.\r\n                               // This can only be set to true for previewInfoArray elements that have value length longer than 1.\r\n\r\n      // states below are for customized table union\r\n      unionURL: \"\",            // user-pasted URL, so that they can union table with customized table. If \"\", nothing has ever been pasted yet.\r\n      unionTableArray: [],     // 1D array storing all tables found on union URL.\r\n      unionOpenList: [],       // 1D array of bools storing whether each table in unionTableArray has been toggled open or not.\r\n      showUnionModal: false,   // boolean storing whether the union modal should be shown or not.\r\n    };\r\n\r\n    // functions below are useful during start up\r\n    this.handleURLPaste = this.handleURLPaste.bind(this);\r\n    this.handleStartSubject = this.handleStartSubject.bind(this);\r\n    this.handleStartTable = this.handleStartTable.bind(this);\r\n\r\n    // functions below are useful for startSubject\r\n    this.cellChange = this.cellChange.bind(this);\r\n    this.selectColHeader = this.selectColHeader.bind(this);\r\n    this.getKeyOptions = this.getKeyOptions.bind(this);\r\n    this.getOtherOptions = this.getOtherOptions.bind(this);\r\n    this.getNeighbourPromise = this.getNeighbourPromise.bind(this);\r\n    this.populateKeyColumn = this.populateKeyColumn.bind(this);\r\n    this.getOtherColPromise = this.getOtherColPromise.bind(this);\r\n    // this.getOtherColPromiseTwo = this.getOtherColPromiseTwo.bind(this);\r\n    this.populateOtherColumn = this.populateOtherColumn.bind(this);\r\n    this.addAllNeighbour = this.addAllNeighbour.bind(this);\r\n    this.getTableStates = this.getTableStates.bind(this);\r\n    this.sameNeighbourDiffRow = this.sameNeighbourDiffRow.bind(this);\r\n    this.sameNeighbourOneRow = this.sameNeighbourOneRow.bind(this);\r\n\r\n    // functions below are for column processing\r\n    this.contextAddColumn = this.contextAddColumn.bind(this);\r\n    this.contextDeleteColumn = this.contextDeleteColumn.bind(this);\r\n    this.contextSetColumn = this.contextSetColumn.bind(this);\r\n    this.originPreviewPage = this.originPreviewPage.bind(this);\r\n    this.contextSortColumn = this.contextSortColumn.bind(this);\r\n    this.contextDedupColumn = this.contextDedupColumn.bind(this);\r\n    this.showFilterMethods = this.showFilterMethods.bind(this);\r\n\r\n    // functions below are useful for startTable\r\n    this.toggleTable = this.toggleTable.bind(this);\r\n    this.togglePropertyNeighbours = this.togglePropertyNeighbours.bind(this);\r\n    this.toggleSibling = this.toggleSibling.bind(this);\r\n    this.toggleOtherTable = this.toggleOtherTable.bind(this);\r\n    this.unionTable = this.unionTable.bind(this);\r\n    this.unionPage = this.unionPage.bind(this);\r\n    this.unionProperty = this.unionProperty.bind(this);\r\n    this.toggleSemantic = this.toggleSemantic.bind(this);\r\n    this.unionCutOffChange = this.unionCutOffChange.bind(this);\r\n\r\n    // functions below are generally usefull\r\n    this.copyTable = this.copyTable.bind(this);\r\n    this.toggleWikiPage = this.toggleWikiPage.bind(this);\r\n    this.undoPreviousStep = this.undoPreviousStep.bind(this);\r\n    this.handleTabSwitch = this.handleTabSwitch.bind(this);\r\n    this.openModal = this.openModal.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n    this.toggleTableSelection = this.toggleTableSelection.bind(this);\r\n    this.toggleUnionJoin = this.toggleUnionJoin.bind(this);\r\n\r\n    // functions below are for column filter\r\n    this.openFilter = this.openFilter.bind(this);\r\n    this.cancelFilter = this.cancelFilter.bind(this);\r\n    this.toggleChecked = this.toggleChecked.bind(this);\r\n    this.toggleAll = this.toggleAll.bind(this);\r\n    this.applyFilter = this.applyFilter.bind(this);\r\n\r\n    // functions below are for join feature\r\n    this.handleJoinTable = this.handleJoinTable.bind(this);\r\n    this.cancelJoin = this.cancelJoin.bind(this);\r\n    this.selectJoinColumn = this.selectJoinColumn.bind(this);\r\n    this.runJoin = this.runJoin.bind(this);\r\n\r\n    // functions below are for first column selection\r\n    this.toggleFirstNeighbour = this.toggleFirstNeighbour.bind(this);\r\n    this.handlePlusClick = this.handlePlusClick.bind(this);\r\n    this.addToFirstCol = this.addToFirstCol.bind(this);\r\n    this.confirmAddFirstCol = this.confirmAddFirstCol.bind(this);\r\n    this.firstColTextChange = this.firstColTextChange.bind(this);\r\n\r\n    // functions below are for other column selection\r\n    this.toggleOtherNeighbour = this.toggleOtherNeighbour.bind(this);\r\n    this.otherColTextChange = this.otherColTextChange.bind(this);\r\n\r\n    // functions below are for cell preview and origin\r\n    this.togglePreviewElement = this.togglePreviewElement.bind(this);\r\n\r\n    // functions below are for recommendations\r\n    this.populateRecommendation = this.populateRecommendation.bind(this);\r\n    this.createStartRecommend = this.createStartRecommend.bind(this);\r\n    this.populateStartRecommend = this.populateStartRecommend.bind(this);\r\n\r\n    // functions below are for table union in startSubject case\r\n    this.handleUnionPaste = this.handleUnionPaste.bind(this);\r\n    this.toggleUnionTable = this.toggleUnionTable.bind(this);\r\n    this.showUnionAlign = this.showUnionAlign.bind(this);\r\n    this.cancelUnionAlign = this.cancelUnionAlign.bind(this);\r\n    this.hardcodeUnion = this.hardcodeUnion.bind(this);\r\n  }\r\n\r\n  // As soon as the URL has been pasted, we want to fetch all tables from the pasted URL.\r\n  // We then update the originTableArray, which stores all the tables found on the pasted URL\r\n  // We also initialize tableOpenList to all false\r\n  handleURLPaste(urlPasted) {\r\n    document.body.classList.add('waiting');\r\n\r\n    // We first check if user has pasted a valid wikipedia page.\r\n\r\n    if (!urlPasted.includes(\"https://en.wikipedia.org/wiki/\")) {\r\n      document.body.classList.remove('waiting');\r\n      alert(\"Please paste a valid Wikipedia link.\");\r\n    }\r\n\r\n    // If yes, we fetch the tables from the pasted Wikipedia page\r\n    else {\r\n      let promiseArray = [];\r\n      promiseArray.push(fetchText(urlPasted));\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        // We first parse the pasted URL and store the list of tables from the pasted URL\r\n        let htmlText = values[0];\r\n        let doc = new DOMParser().parseFromString(htmlText, \"text/html\");\r\n        let wikiTableArray = doc.getElementsByClassName(\"wikitable\");\r\n        let originTableArray = [];\r\n        for (let i = 0; i < wikiTableArray.length; ++i) {\r\n          // console.log(wikiTableArray[i].rows);\r\n          if (wikiTableArray[i].tagName === \"TABLE\" && wikiTableArray[i].rows !== undefined) {\r\n            originTableArray.push(wikiTableArray[i]);\r\n          }\r\n        }\r\n        let tableOpenList = [];\r\n        for (let i = 0; i < originTableArray.length; ++i) {\r\n          tableOpenList.push(false);\r\n        }\r\n\r\n        // Adding support for undo:\r\n        document.body.classList.remove('waiting');\r\n\r\n        let lastAction = \"handleURLPaste\";\r\n        let prevState = \r\n          {\r\n            \"urlPasted\":\"\",\r\n            \"iframeURL\":\"\",\r\n            \"originTableArray\":[],\r\n            \"tableOpenList\":[],\r\n          };\r\n\r\n        this.setState({\r\n          originTableArray: originTableArray,\r\n          tableOpenList: tableOpenList,\r\n          urlPasted: urlPasted,\r\n          iframeURL: urlPasted,\r\n          lastAction: lastAction,\r\n          prevState: prevState,\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // This function copies the table content to clipboard\r\n\r\n  copyTable() {\r\n    const textArea = document.createElement(\"textarea\"); // this line allows the use of select() function\r\n    let copiedText = \"\";\r\n\r\n    // This case handles the copy table for start subject\r\n    if (this.state.usecaseSelected === \"startSubject\" || this.state.usecaseSelected === \"startTable\") {\r\n      // We first push on the text for column headers (using the labels)\r\n      let tableHeader = this.state.tableHeader;\r\n      for (let i = 0; i < tableHeader.length; ++i) {\r\n        // console.log(tableHeader[i]);\r\n        let curText = \"\";\r\n        // This first condition deals with first column's header text\r\n        if (i === 0) {\r\n          // First subcase: starting table\r\n          if (this.state.usecaseSelected === \"startTable\") {\r\n            curText = \"OriginURL\";\r\n          }\r\n          // Second subcase: starting entity\r\n          else {\r\n            for (let j = 0; j < tableHeader[i].length; ++j) {\r\n              if (j > 0) {\r\n                curText += \" AND \"; \r\n              }\r\n              curText += niceRender(tableHeader[i][j].oValue);\r\n            }\r\n          }\r\n        }\r\n        // This condition deals with other column's header text\r\n        else {\r\n          for (let j = 0; j < tableHeader[i].length; ++j) {\r\n            if (j > 0) {\r\n              curText += \" OR \";\r\n            }\r\n            let textToAdd = tableHeader[i][j].type === \"object\" ? \"is \" + tableHeader[i][j].value + \" of\" : tableHeader[i][j].value;\r\n            curText += textToAdd;\r\n          }\r\n        }\r\n        copiedText = copiedText + curText + \"\\t\";\r\n      }\r\n      copiedText += \"\\n\";\r\n      // Now we need to fetch the rows that are not column headers\r\n      let tableData = this.state.tableData;\r\n      const rowNum = tableData.length;\r\n      const colNum = tableData[0].length;\r\n      for (let i = 0; i < rowNum; ++i) {\r\n        for (let j = 0; j < colNum; ++j) {\r\n          let curText = niceRender(tableData[i][j].data);\r\n          if (curText !== undefined) {\r\n            copiedText = copiedText + curText + \"\\t\";\r\n          }\r\n        }\r\n        copiedText += \"\\n\";\r\n      }\r\n    }\r\n    textArea.value = copiedText;\r\n    document.body.appendChild(textArea);\r\n    textArea.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(textArea);\r\n    alert(\"Table content has been exported!\");\r\n  }\r\n\r\n  // This function handles the toggling of the WikiPage at bottom\r\n\r\n  toggleWikiPage() {\r\n    let pageHidden = this.state.pageHidden;\r\n    this.setState({\r\n      pageHidden: !pageHidden,\r\n    });\r\n  }\r\n\r\n  // This function handles the selection of the starting task \"startSubject\"\r\n\r\n  handleStartSubject(e, taskSelected) {\r\n\r\n    if (taskSelected === \"startSubject\") {\r\n      \r\n      // Change the cursor since we are making a fetch request\r\n      document.body.classList.add('waiting');\r\n\r\n      // Since the starting task is \"startSubject\", we set the URL to be the first cell in the table\r\n      const subject = decodeURIComponent(this.state.urlPasted.slice(30)); \r\n      let tableData = _.cloneDeep(this.state.tableData);\r\n      tableData[0][0].data = subject;\r\n\r\n      // Let's run some queries here to fetch some first degree properties \r\n\r\n      // The query we will run is simply as follows\r\n      // select ?p ?o\r\n      // where {\r\n      // dbr:Barack_Obama ?p ?o.\r\n      // }\r\n\r\n      // Note: we are not taking account of the object neighbours. Subject neighbours only.\r\n\r\n      let prefixURL = \r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n      let suffixURL = \r\n        \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n      let queryBody = \r\n        \"select+%3Fp+%3Fo%0D%0Awhere+%7B%0D%0Adbr%3A\" + \r\n        regexReplace(subject) +\r\n        \"+%3Fp+%3Fo.%0D%0A%7D&\";\r\n      let queryURL = prefixURL + queryBody + suffixURL;\r\n      \r\n      let promiseArray = [fetchJSON(queryURL)]\r\n      \r\n      allPromiseReady(promiseArray).then((values) => {\r\n\r\n        // We set up the firstColSelection and firstColChecked states here\r\n        let firstColSelection = updateFirstColSelection(values[0].results.bindings);\r\n        let firstColChecked = [];\r\n        // Initially, firstColChecked is all false\r\n        for (let i = 0; i < firstColSelection.length; ++i) {\r\n          firstColChecked.push(false);\r\n        }\r\n        // console.log(firstColSelection);\r\n        // console.log(firstColChecked);\r\n\r\n        // We create the InfoObject needed for Action Panel\r\n        let tempObj = {\r\n          \"task\":\"afterStartSubject\",\r\n        };\r\n\r\n        // Adding support for undo:\r\n        let lastAction = \"handleStartSubject\";\r\n        let prevState = \r\n          {\r\n            \"usecaseSelected\":this.state.usecaseSelected,\r\n            \"tableData\":this.state.tableData,\r\n            \"tabIndex\":this.state.tabIndex,\r\n            \"curActionInfo\":this.state.curActionInfo,\r\n            \"firstColSelection\":this.state.firstColSelection,\r\n            \"firstColChecked\":this.state.firstColChecked,\r\n          };\r\n        \r\n        // Check the cursor back because we are done with the function\r\n        document.body.classList.remove('waiting');\r\n\r\n        this.setState({\r\n          usecaseSelected: taskSelected,\r\n          tableData: tableData,\r\n          firstColSelection: firstColSelection,\r\n          firstColChecked: firstColChecked,\r\n          curActionInfo: tempObj,\r\n          tabIndex: 0,\r\n          firstColText: \"\", // updated on August 26th\r\n          lastAction: lastAction,\r\n          prevState: prevState,\r\n        });\r\n      })\r\n    } \r\n  }\r\n\r\n  // This function handles the toggling of the starting subject's neighbours\r\n  // Also, we store this toggledIndex, so that we can display the suggestion text at the right location.\r\n  // Obviously, we need to update this.state.firstColChecked array.\r\n\r\n  toggleFirstNeighbour(e, index) {\r\n    // console.log(\"Toggled index is \"+index);\r\n    \r\n    // We first create a copy of firstColChecked\r\n    let firstColChecked = this.state.firstColChecked.slice();\r\n\r\n    // Now we deal with keyCheckedIndex\r\n    let keyCheckedIndex = index;\r\n  \r\n    // We handle the toggling here\r\n    firstColChecked[index] = !firstColChecked[index];\r\n\r\n    // Lastly, we make the state changes\r\n    this.setState({\r\n      firstColChecked:firstColChecked,\r\n      keyCheckedIndex:keyCheckedIndex,\r\n      firstColText: \"\",\r\n    })\r\n  }\r\n\r\n  // This function handles users typing into the type aheader for first column's neighbour selections\r\n  firstColTextChange(e) {\r\n    e.preventDefault();\r\n    let firstColText = e.target.value;\r\n    this.setState({\r\n      firstColText: firstColText,\r\n    })\r\n  }\r\n\r\n  // This function handles the toggling of a non-first column's attribute selection\r\n  // Note: since the preview feature is being addded, this function needs to handle preview as well.\r\n  // It will handle the preview similarly to how it handles populateOtherColumn, \r\n  // Except it sets previewData attribute, instead of data attribute.\r\n  toggleOtherNeighbour(e, neighbourIndex, colIndex) {\r\n    // We first get all the variables we needed\r\n    let previewColIndex;\r\n    let tableData = _.cloneDeep(this.state.tableData); \r\n    let otherColChecked = _.cloneDeep(this.state.otherColChecked);\r\n\r\n    // We first deal with the toggling of otherCheckedIndex and otherColChecked\r\n    let otherCheckedIndex = neighbourIndex;\r\n    otherColChecked[neighbourIndex] = !otherColChecked[neighbourIndex];\r\n\r\n    // We then deal with column preview.\r\n\r\n    // First step is to create a selectedNeighbours array for preview, similar to OtherColSelection.\r\n    // We will create the selectedNeighbours array from otherColSelection and otherColChecked\r\n    let selectedNeighbours = [];\r\n    for (let i = 0; i < otherColChecked.length; ++i) {\r\n      if (otherColChecked[i] === true) {\r\n        selectedNeighbours.push(this.state.otherColSelection[i]);\r\n      }\r\n    }\r\n    // console.log(selectedNeighbours);\r\n    // console.log(colIndex);\r\n    \r\n    // If selectedNeighbours is non-empty, we need to set previewColIndex to colIndex, and set tableData's previewData attribute\r\n    if (selectedNeighbours.length > 0) {\r\n      // We first set tableData, based on selectedNeighbours and colIndex. The following part will be similar to populateOtherColumn.\r\n      for (let i = 0; i < tableData.length; ++i) {\r\n        // curColumnArray is the previewData array, for each entry in search column, for all neighbours in selectedNeighbours\r\n        let curColumnArray = [];\r\n        // We loop through selectedNeighbours\r\n        for (let j = 0; j < selectedNeighbours.length; ++j) {\r\n          let curNeighbour = selectedNeighbours[j];\r\n          let firstDegNeighbours = \r\n            curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n          let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n          if (curNeighbourData !== undefined) {\r\n            curColumnArray = curColumnArray.concat(curNeighbourData);\r\n          }\r\n        }\r\n        // If curColumnArray is empty, that means this entry in search column do not have any of the attributes from selectedNeighbours\r\n        // We want to set previewData to N/A\r\n        if (curColumnArray.length === 0) {\r\n          tableData[i][colIndex].previewData = \"N/A\";\r\n        }\r\n        // Else, we have found at least one value. We want to set previewData to curColumnArray[0]\r\n        else {\r\n          tableData[i][colIndex].previewData = curColumnArray[0];\r\n        }\r\n      }\r\n\r\n      // Now that we are done with setting tableData, we set previewColIndex.\r\n      previewColIndex = colIndex;\r\n    }\r\n    // In this case, selectedNeighbours is empty, we want to set previewColIndex back to -1.\r\n    else {\r\n      previewColIndex = -1;\r\n    }\r\n\r\n    // Support for undo:\r\n    let lastAction = \"toggleOtherNeighbour\";\r\n    let prevState = \r\n    {\r\n      otherColChecked: this.state.otherColChecked,\r\n      otherColCheckedIndex: this.state.otherCheckedIndex,\r\n      tableData: this.state.tableData,\r\n      previewColIndex: this.state.previewColIndex,\r\n    }\r\n\r\n    this.setState({\r\n      otherColChecked: otherColChecked,\r\n      otherCheckedIndex: otherCheckedIndex,\r\n      tableData: tableData,\r\n      previewColIndex: previewColIndex,\r\n      otherColText: \"\",\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    })\r\n  }\r\n\r\n  // This function handles user typing into the type-ahead for other column's neighbour selection\r\n\r\n  otherColTextChange(e) {\r\n    e.preventDefault();\r\n    let otherColText = e.target.value;\r\n    this.setState({\r\n      otherColText: otherColText,\r\n    })\r\n  }\r\n\r\n\r\n  // This function is a simple function that creates an object and passes to Action Panel\r\n  handlePlusClick() {\r\n    this.setState({\r\n      curActionInfo:{\"task\":\"plusClicked\"},\r\n      previewColIndex: -1, // we also want to set preview column index to -1 (clear previews)\r\n      tabIndex: 0,\r\n    })\r\n  }\r\n\r\n  // This function handles when users want to add more entities to the first column\r\n  addToFirstCol() {\r\n    // We need to make the Action Panel display FirstColSelection component again.\r\n    // Before doing so, we need to first clear out this.state.firstColChecked, and this.state.keyCheckedIndex\r\n    // So that we do not have information carried over from the previous first column selection.\r\n\r\n    // First we update firstColChecked\r\n    let firstColCheckedUpdated = [];\r\n    for (let i = 0; i < this.state.firstColChecked.length; ++i) {\r\n      firstColCheckedUpdated.push(false);\r\n    }\r\n\r\n    // Then we reset keyCheckedIndex\r\n    let keyCheckedIndexUpdated = -1;\r\n\r\n    // We now set up tempObj for Action Panel\r\n    let tempObj = {\r\n      \"task\":\"afterStartSubject\",\r\n    };\r\n\r\n    // Finallym we set the states.\r\n    this.setState({\r\n      firstColChecked:firstColCheckedUpdated,\r\n      keyCheckedIndex:keyCheckedIndexUpdated,\r\n      curActionInfo:tempObj,\r\n      firstColText: \"\", // updated on August 26th\r\n    })\r\n  }\r\n\r\n  // This function handles manually changing cell in a table.\r\n  // Other than manipulating the data, it does one check: \r\n  // If this.state.tableHeader[j] is empty ([]), we set tableHeader[j] as [{\"value\":\"Notes\", \"type\":\"Subject\"}]\r\n  cellChange(e, i, j) {\r\n    e.preventDefault();\r\n    let tableData = this.state.tableData.slice();\r\n    tableData[i][j].data = e.target.value;\r\n\r\n    // Below is added on August 25th:\r\n    let tableHeader = _.cloneDeep(this.state.tableHeader);\r\n    if (tableHeader[j].length === 0) {\r\n      tableHeader[j] = [\r\n        {\r\n          \"value\":\"Notes\",\r\n          \"label\":\"Notes\",\r\n          \"type\":\"subject\",\r\n        }\r\n      ]\r\n    }\r\n    this.setState({\r\n      tableData: tableData,\r\n      tableHeader: tableHeader,\r\n    });\r\n  }\r\n\r\n  // This function updates the options for selections when we click on selection for a key column\r\n  // based on cells already filled in this column\r\n\r\n  getKeyOptions(e, colIndex) {\r\n    if (colIndex === this.state.keyColIndex) {\r\n      \r\n      // We first get all the non-empty values from the key column\r\n      let allSubject = [];\r\n      for (let i = 0; i < this.state.tableData.length; ++i) {\r\n        if (this.state.tableData[i][colIndex].data === \"\") {\r\n          break;\r\n        } else {\r\n          allSubject.push(regexReplace(this.state.tableData[i][colIndex].data));\r\n        }\r\n      }\r\n\r\n      // In here we fetch the options for first column's selection\r\n      // It uses the common dct:subject of all cells entered in the key column\r\n\r\n      // Modification: let's also find the common rdf:type dbo:xxx of cells filled.\r\n\r\n      let prefixURL =\r\n        \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n      let queryBody = \"SELECT+%3Fsomevar%0D%0AWHERE+%7B\";\r\n      for (let i = 0; i < allSubject.length; ++i) {\r\n        queryBody +=\r\n          \"%0D%0A++++++++dbr%3A\" + allSubject[i] + \"+%28dct%3Asubject%7Crdf%3Atype%29+%3Fsomevar.\";\r\n      }\r\n      let suffixURL =\r\n        \"%0D%0A%7D%0D%0A&format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n      let queryURL = prefixURL + queryBody + suffixURL;\r\n      let promiseArray = [];\r\n      promiseArray.push(fetchJSON(queryURL));\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        let myJson = values[0];\r\n        let keyColOptions = [];\r\n        // We loop through the result bindings. \r\n        // If it's from dct:subject, or rdf:type dbo:xxxx, we push it onto keyColOptions\r\n        for (let i = 0; i < myJson.results.bindings.length; ++i) {\r\n          let curValue = myJson.results.bindings[i].somevar.value;\r\n          // This clause deals with dct:subject\r\n          if (curValue.includes(\"dbpedia.org/resource/Category:\")) {\r\n            let tempObj = {};\r\n            let neighbour = curValue.slice(37);\r\n            tempObj[\"label\"] = neighbour;\r\n            tempObj[\"value\"] = neighbour;\r\n            tempObj[\"dataset\"] = \"dct\";\r\n            keyColOptions.push(tempObj);\r\n          }\r\n          // This clause deals with rdf:type dbo:xxxx\r\n          else if (curValue.includes(\"dbpedia.org/ontology/\") && !curValue.includes(\"Wikidata\")) {\r\n            let tempObj = {};\r\n            let neighbour = curValue.slice(28);\r\n            tempObj[\"label\"] = neighbour;\r\n            tempObj[\"value\"] = neighbour;\r\n            tempObj[\"dataset\"] = \"rdf\";\r\n            keyColOptions.push(tempObj);\r\n          }\r\n        }\r\n        // Take a look at keyColOptions\r\n        // console.log(keyColOptions);\r\n        // We create a copy of the optionsMap.\r\n        // Then change the entry in the optionsMap corresponding to the key column to what we have just fetched: keyColOptions.\r\n        let optionsMap = this.state.optionsMap.slice();\r\n        optionsMap[this.state.keyColIndex] = keyColOptions;\r\n        this.setState({\r\n          optionsMap: optionsMap,\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // This function updates the options for selections when we want to open selection for non-key column\r\n  // based on cells already filled in this column, and the cells in the key column\r\n  // aka: Michelle Obama is Barack Obama' wife\r\n\r\n  // It needs to update Action Panel to display the correct content.\r\n\r\n  // If this column is empty or completely filled, it will just pass keyColNeighbours to Action Panel.\r\n\r\n  getOtherOptions(e, colIndex) {\r\n\r\n    // console.log(\"Column index clicked is \"+colIndex);\r\n\r\n    // The first thing we need to do is to determine the content for otherColSelection\r\n    let otherColSelection = [];\r\n\r\n    // We check if this column is all-empty, or all filled\r\n    let colEmpty = true;\r\n    let colFilled = true;\r\n    let nonEmptyInfo = [];\r\n    for (let i = 0; i < this.state.tableData.length; ++i) {\r\n      // If some data is not \"\", that means this column is not empty\r\n      if (this.state.tableData[i][colIndex].data !== \"\") {\r\n        colEmpty = false;\r\n        nonEmptyInfo.push([i, this.state.tableData[i][colIndex].data]);\r\n      }\r\n      // If some data is \"\", that means this column is not filled\r\n      else {\r\n        colFilled = false;\r\n      }\r\n    }\r\n\r\n    // Case 1:\r\n    // If this column is non-empty, and not completely filled, we want to deal with special otherColSelection\r\n    if (colEmpty === false && colFilled === false) {\r\n      document.body.classList.add('waiting');\r\n      let prefixURL =\r\n        \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n      let suffixURL =\r\n        \"%0D%0A%7D%0D%0A%0D%0A&format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n      let queryBody = \"SELECT+%3Fsomevar%0D%0AWHERE+%7B\";\r\n      // Bugfix added on August 17th: instead of using every entry from nonEmptyInfo to determine the relation, we will use the first one\r\n      // for (let i = 0; i < nonEmptyInfo.length; ++i) {\r\n      for (let i = 0; i < 1; ++i) {\r\n        let curKeySubject = regexReplace(\r\n          this.state.tableData[nonEmptyInfo[i][0]][this.state.keyColIndex].data\r\n        );\r\n        let curEnteredSubject = regexReplace(nonEmptyInfo[i][1]);\r\n        queryBody +=\r\n          \"%0D%0A++++++++dbr%3A\" +\r\n          curKeySubject +\r\n          \"+%3Fsomevar+dbr%3A\" +\r\n          curEnteredSubject +\r\n          \".\";\r\n      }\r\n      let queryURL = prefixURL + queryBody + suffixURL;\r\n      let promiseArray = [];\r\n      promiseArray.push(fetchJSON(queryURL));\r\n      allPromiseReady(promiseArray).then((values) => {\r\n      let myJson = values[0];\r\n      // we create a temporary variable to hold results from myJson.results.bindings\r\n      let tempSelection = [];\r\n      for (let i = 0; i < myJson.results.bindings.length; ++i) {\r\n        let tempObj = {};\r\n        let neighbour = myJson.results.bindings[i].somevar.value.slice(28);\r\n        tempObj[\"label\"] = neighbour;\r\n        tempObj[\"value\"] = neighbour;\r\n        tempObj[\"type\"] = \"subject\"; // for now we only allow the subject search\r\n        tempSelection.push(tempObj);\r\n      }\r\n      // We push onto otherColSelection the right elements from keyColNeighbours, based on tempSelection\r\n      // console.log(this.state.keyColNeighbours);\r\n      // console.log(tempSelection);\r\n      for (let i = 0; i < tempSelection.length; ++i) {\r\n        for (let j = 0; j < this.state.keyColNeighbours.length; ++j) {\r\n          if (tempSelection[i].value === this.state.keyColNeighbours[j].value \r\n              && tempSelection[i].type === this.state.keyColNeighbours[j].type) {\r\n            otherColSelection.push(this.state.keyColNeighbours[j]);\r\n            break; \r\n          }\r\n        }\r\n      }\r\n      // Now, we do not want to have an empty otherColSelection.\r\n      // Thus, if it is, we just want to set it as this.state.keyColNeighbours\r\n      if (otherColSelection.length === 0) {\r\n        otherColSelection = this.state.keyColNeighbours;\r\n      }\r\n      // Take a look at otherColSelection\r\n      // console.log(otherColSelection);\r\n\r\n      // Now we have figured out the content for otherColSelection, we move on otherColChecked and otherCheckedIndex.\r\n      // Every time we are running this function, we need to reset otherColChecked and otherCheckedIndex\r\n\r\n      let otherColChecked = [];\r\n      for (let i = 0; i < otherColSelection.length; ++i) {\r\n        otherColChecked.push(false);\r\n      }\r\n      let otherCheckedIndex = -1;\r\n\r\n      let tempObj = \r\n        {\r\n          \"task\":\"showOtherColSelection\",\r\n          \"colIndex\":colIndex,\r\n        }\r\n\r\n      document.body.classList.remove('waiting');\r\n      this.setState({\r\n        otherColSelection:otherColSelection,\r\n        otherColChecked:otherColChecked,\r\n        otherColText: \"\",  // Modified on August 26th: every time we click on this edit icon, we want to reset otherColText\r\n        otherCheckedIndex:otherCheckedIndex,\r\n        curActionInfo:tempObj,\r\n        previewColIndex: -1,\r\n      })\r\n      })\r\n    }\r\n\r\n    // Case 2:\r\n    // If this column is empty or completely filled, we just set otherColSelection to be keyColNeighbours\r\n    else {\r\n      otherColSelection = this.state.keyColNeighbours;\r\n      // Take a look at otherColSelection\r\n      // console.log(otherColSelection);\r\n\r\n      // Now we have figured out the content for otherColSelection, we move on otherColChecked and otherCheckedIndex.\r\n      // Every time we are running this function, we need to reset otherColChecked and otherCheckedIndex\r\n\r\n      // Maybe some modifications need to be done here when colFilled === true\r\n      let otherColChecked = [];\r\n      for (let i = 0; i < otherColSelection.length; ++i) {\r\n        otherColChecked.push(false);\r\n      }\r\n      let otherCheckedIndex = -1;\r\n\r\n      let tempObj = \r\n        {\r\n          \"task\":\"showOtherColSelection\",\r\n          \"colIndex\":colIndex,\r\n        }\r\n\r\n      window.scrollTo(0, 0);\r\n      this.setState({\r\n        otherColSelection:otherColSelection,\r\n        otherColChecked:otherColChecked,\r\n        otherColText: \"\",  // Modified on August 26th: every time we click on this edit icon, we want to reset otherColText\r\n        otherCheckedIndex:otherCheckedIndex,\r\n        curActionInfo:tempObj,\r\n        previewColIndex: -1,\r\n      })\r\n    }\r\n  }\r\n\r\n  // This function handles the the selection of a column header.\r\n  // Note: we want to deal with the selection of key column header vs non key column header differently\r\n\r\n  selectColHeader(e, colIndex) {\r\n\r\n    let tableHeader = this.state.tableHeader.slice();\r\n\r\n    if (e !== null) {\r\n\r\n      // We first get the selectedOptions\r\n      let selectedOptions = _.cloneDeep(e);\r\n      // console.log(selectedOptions);\r\n      tableHeader[colIndex] = selectedOptions;\r\n\r\n      // This part deals with the selection of a key column header\r\n      if (colIndex === this.state.keyColIndex) {\r\n        let tempObj = {};\r\n        tempObj[\"task\"] = \"populateKeyColumn\";\r\n        tempObj[\"colIndex\"] = colIndex;\r\n        tempObj[\"neighbourArray\"] = [];\r\n        // Since neighbourArray is an array, let's push on selectedOptions one by one\r\n        for (let i = 0; i < selectedOptions.length; ++i) {\r\n          tempObj.neighbourArray.push(selectedOptions[i]);\r\n        }\r\n        // console.log(tempObj);\r\n        this.setState({\r\n          tableHeader: tableHeader,\r\n          curActionInfo: tempObj,\r\n        })\r\n      }\r\n\r\n      // This part deals with the selection of a non key column header\r\n      else {\r\n        // We want to change the label of non-key column headers with respect to the label of key column\r\n        // First step: set up the label text for the key column\r\n        let keyColLabel = \"\";\r\n        for (let i = 0; i < tableHeader[this.state.keyColIndex].length; ++i) {\r\n          let labelToAdd = i > 0 ? \"&\" + tableHeader[this.state.keyColIndex][i].label : tableHeader[this.state.keyColIndex][i].label;\r\n          keyColLabel+=labelToAdd;\r\n        }\r\n        // Then, since tableHeader[colIndex] is an array, we update all element's label from the array\r\n        for (let i = 0; i < selectedOptions.length; ++i) {\r\n          let ownLabel = tableHeader[colIndex][i].type === \"subject\" ? tableHeader[colIndex][i].value : \"is \" + tableHeader[colIndex][i].value + \" of\";\r\n          tableHeader[colIndex][i].label = ownLabel + \"--\" + keyColLabel;\r\n        }\r\n        // console.log(tableHeader);\r\n\r\n        // Now, we want to ask in ActionPanel whether user wants to populate the column based on the chosen column names\r\n        let tempObj = {};\r\n        tempObj[\"task\"] = \"populateOtherColumn\";\r\n        tempObj[\"colIndex\"] = colIndex;\r\n        tempObj[\"neighbourArray\"] = [];\r\n        // Since neighbourArray is an array, let's push on selectedOptions one by one\r\n        for (let i = 0; i < selectedOptions.length; ++i) {\r\n          tempObj.neighbourArray.push(selectedOptions[i]);\r\n        }\r\n        // Because we are allowing multi-selects now, type and range are no long two single strings.\r\n        // Rather, their values can be figured out from neighbourArray\r\n        // console.log(tempObj);\r\n        this.setState({\r\n          tableHeader: tableHeader,\r\n          curActionInfo: tempObj,\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // // console.log(\"Check table header here\");\r\n    // // console.log(this.state.tableHeader);\r\n    // //  We first create a copy of the existing table headers\r\n    // let tableHeader = this.state.tableHeader.slice();\r\n\r\n    // // This part deals with the selection of key column header\r\n    // if (colIndex === this.state.keyColIndex) {\r\n    //   // We create a copy of the selected option\r\n    //   if (e !== null) {\r\n    //     let selectedOptions = e.slice();\r\n    //     // console.log(selectedOptions);\r\n    //     tableHeader[colIndex] = selectedOptions;\r\n    //     let tempObj = {};\r\n    //     tempObj[\"task\"] = \"populateKeyColumn\";\r\n    //     tempObj[\"colIndex\"] = colIndex;\r\n    //     tempObj[\"neighbourArray\"] = [];\r\n    //     // Modification here: instead of simplying passing the value, we want to pass the selectedOptions as a whole\r\n    //     // Because we need its \"dataset\" attribute\r\n    //     for (let i = 0; i < selectedOptions.length; ++i) {\r\n    //       tempObj.neighbourArray.push(selectedOptions[i]);\r\n    //     }\r\n    //     // console.log(tempObj);\r\n    //     this.setState({\r\n    //       tableHeader: tableHeader,\r\n    //       curActionInfo: tempObj,\r\n    //     });\r\n    //   }\r\n    // }\r\n    // // This part deals with the selection of non key column header\r\n    // else {\r\n    //   // The first few lines fix some pass by reference problems\r\n    //   let evalue = e.value;\r\n    //   let elabel = e.label;\r\n    //   // let ecount = e.count;\r\n    //   tableHeader[colIndex] = { value: evalue, label: elabel };\r\n    //   // We want to change the label of non-key column headers with respect to the label of key column\r\n    //   // We first create the label text for the key column\r\n    //   let keyColLabel = \"\";\r\n    //   if (this.state.keyColIndex === 0) {\r\n    //     for (let i = 0; i < tableHeader[this.state.keyColIndex].length; ++i) {\r\n    //       if (i > 0) {\r\n    //         keyColLabel += \"&\";\r\n    //       }\r\n    //       keyColLabel += tableHeader[this.state.keyColIndex][i].label;\r\n    //     }\r\n    //   } else {\r\n    //     keyColLabel = tableHeader[this.state.keyColIndex].label;\r\n    //   }\r\n    //   // Bugfix for Go Table Creation: if at this stage, keyColLable is still \"\", that means we came from the tabel union task first.\r\n    //   // In this case, tableHeader[keyColIndex] is an object, not an array. \r\n    //   // So we just set keyColLabel as tableHeader[this.state.keyColIndex].label\r\n    //   if (keyColLabel === \"\") {\r\n    //     keyColLabel = tableHeader[this.state.keyColIndex].label;\r\n    //   }\r\n    //   // We then append the current column's label to it\r\n    //   // console.log(keyColLabel);\r\n    //   tableHeader[colIndex].label =\r\n    //     tableHeader[colIndex].label + \"--\" + keyColLabel;\r\n    //   // After we have selected the column header, not only do we want to fill in the name of the column, we also want to\r\n    //   // ask in ActionPanel whether user wants to populate the column based on the chosen column name\r\n    //   let tempObj = {};\r\n    //   tempObj[\"task\"] = \"populateOtherColumn\";\r\n    //   tempObj[\"colIndex\"] = colIndex;\r\n    //   tempObj[\"neighbour\"] = e.value;\r\n    //   tempObj[\"type\"] = e.type;\r\n\r\n    //   // If type is subject, let's check if this neighbour also has a \"range\" (rdfs:range)\r\n    //   if (e.type === \"subject\" && e.range !== undefined) {\r\n    //     tempObj[\"range\"] = e.range;\r\n    //   }\r\n    //   // console.log(tempObj);\r\n\r\n    //   this.setState({\r\n    //     tableHeader: tableHeader,\r\n    //     curActionInfo: tempObj,\r\n    //   });\r\n    // }\r\n  }\r\n\r\n  // This function is a helper function for populateKeyColumn. It is similar to getOtherColPromise.\r\n  // It makes an array of queries to find the union of neighbours for the first column (key column).\r\n\r\n  // Some modification needs to be made to the queries\r\n  // So that ?o in the first query and ?s in the second query have to be included as well.\r\n\r\n  // It takes in three parameters\r\n  // 1) tableData: tableData (with updated values in the first column)\r\n  // 2) type: either \"subject\" or \"object\"\r\n  // 3) colIndex:  integer representing which column's neighbours we are fetching\r\n\r\n  getNeighbourPromise(tableData, type, colIndex) {\r\n    // console.log(tableData);\r\n    // console.log(type);\r\n\r\n    // Query we make if type is subject\r\n\r\n    // select ?p ?o ?range ?subPropertyOf\r\n    // where {\r\n    // dbr:Barack_Obama ?p ?o.\r\n    // OPTIONAL {?p rdfs:range ?range}.\r\n    // OPTIONAL {?p rdfs:subPropertyOf ?subPropertyOf}.\r\n    // }\r\n\r\n    // Query we make if type is object\r\n\r\n    // select ?s ?p ?range ?subPropertyOf\r\n    // where {\r\n    // ?s ?p dbr:Barack_Obama.\r\n    // OPTIONAL {?p rdfs:range ?range}.\r\n    // OPTIONAL {?p rdfs:subPropertyOf ?subPropertyOf}.\r\n    // }\r\n\r\n    // BUGFIX August 17th: The query below may need to be used for performance issues\r\n\r\n    // select ?s ?p ?range ?subPropertyOf\r\n    // where {\r\n    // ?s ?p dbr:Barack_Obama.\r\n    // OPTIONAL {?p rdfs:range ?range}.\r\n    // OPTIONAL {?p rdfs:subPropertyOf ?subPropertyOf}.\r\n    // {\r\n    // select ?p (count(?s) as ?count) \r\n    // where {\r\n    // ?s ?p dbr:Barack_Obama\r\n    // }\r\n    // group by ?p\r\n    // having (count(?s) <= maxFetchCount)\r\n    // }\r\n    // }\r\n\r\n    let promiseArray = [];\r\n    let prefixURL =\r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURL =\r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      let cellValue = tableData[i][colIndex].data === \"N/A\" ? \"NONEXISTINGSTRING\" : regexReplace(tableData[i][colIndex].data);\r\n      // console.log(cellValue);\r\n      let queryBody;\r\n      if (type === \"subject\") {\r\n        queryBody =\r\n          \"select+%3Fp+%3Fo+%3Frange+%3FsubPropertyOf%0D%0Awhere+%7B%0D%0Adbr%3A\" +\r\n          cellValue +\r\n          \"+%3Fp+%3Fo.%0D%0AOPTIONAL+%7B%3Fp+rdfs%3Arange+%3Frange%7D.%0D%0AOPTIONAL+%7B%3Fp+rdfs%3AsubPropertyOf+%3FsubPropertyOf%7D.%0D%0A%7D&\";\r\n      }\r\n      else {\r\n        // queryBody = \r\n        //   \"select+%3Fs+%3Fp+%3Frange+%3FsubPropertyOf%0D%0Awhere+%7B%0D%0A%3Fs+%3Fp+dbr%3A\" +\r\n        //   cellValue +\r\n        //   \".%0D%0AOPTIONAL+%7B%3Fp+rdfs%3Arange+%3Frange%7D.%0D%0AOPTIONAL+%7B%3Fp+rdfs%3AsubPropertyOf+%3FsubPropertyOf%7D.%0D%0A%7D&\";\r\n\r\n        // Above code is the query before bugfix on August 17th. Below is the fixed version of the code\r\n        queryBody = \r\n          \"select+%3Fs+%3Fp+%3Frange+%3FsubPropertyOf%0D%0Awhere+%7B%0D%0A%3Fs+%3Fp+dbr%3A\" + \r\n          cellValue + \r\n          \".%0D%0AOPTIONAL+%7B%3Fp+rdfs%3Arange+%3Frange%7D.%0D%0AOPTIONAL+%7B%3Fp+rdfs%3AsubPropertyOf+%3FsubPropertyOf%7D.%0D%0A%7B%0D%0Aselect+%3Fp+%28count%28%3Fs%29+as+%3Fcount%29+%0D%0Awhere+%7B%0D%0A%3Fs+%3Fp+dbr%3A\" +\r\n          cellValue + \r\n          \"%0D%0A%7D%0D%0Agroup+by+%3Fp%0D%0Ahaving+%28count%28%3Fs%29+%3C%3D+\" + \r\n          maxFetchCount +\r\n          \"%29%0D%0A%7D%0D%0A%7D%0D%0A&\";\r\n      }\r\n      let queryURL = prefixURL + queryBody + suffixURL;\r\n      let curPromise = fetchJSON(queryURL);\r\n      promiseArray.push(curPromise);\r\n    }\r\n    return promiseArray;\r\n  }\r\n\r\n  // This function populates the key column\r\n  // It also fetches the neighbours of the key column (based on the first cell in the table)\r\n  // as well as setting the origins of cells in the key column\r\n\r\n  // Note: we need to do some modification here. Instead of having a fixed number of entries in the key column,\r\n  // Let's make it more flexible. (but also pose a limit, so we don't get way too many entries)\r\n\r\n  populateKeyColumn(e, colIndex, neighbourArray) {\r\n    // Let's first take a look at parameters passed in\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n\r\n    // Let's create a helper function to generate the query text.\r\n    let queryURL = keyQueryGen(neighbourArray)\r\n    // console.log(queryURL);\r\n\r\n    // If queryURL is error, we have encountered some previously unseen datatypes. In this case we just print an error.\r\n    if (queryURL === \"ERROR\") {\r\n      alert(\"Unsupported datatype in selected neighbours. Please select some other neighbours.\")\r\n    }\r\n\r\n    // Else we run the body of the funnction\r\n\r\n    else {\r\n      document.body.classList.add('waiting');\r\n\r\n      let promiseArray = [fetchJSON(queryURL)];\r\n\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        // let's first work with the first promise result: fill in table data with the entities we have fetched\r\n  \r\n        // console.log(values[0].results.bindings);\r\n\r\n        // We set the tableHeader[0] here, from a deep copy of tableHeader\r\n        // tableHeader[0] should be set as neighbourArray\r\n        let tableHeader = _.cloneDeep(this.state.tableHeader);\r\n        tableHeader[0] = neighbourArray;\r\n\r\n        // Addition: we want to display the first column's header correctly. Let's add support for that\r\n        let firstColHeaderInfo = [];\r\n        firstColHeaderInfo.push(neighbourArray);\r\n  \r\n        // This part sets the data for each cell\r\n        let tableData = _.cloneDeep(this.state.tableData);\r\n  \r\n        if (this.state.tableHeader[0].length === 0) {\r\n          tableData = setFirstColumnData(\r\n            values[0].results.bindings,\r\n            tableData,\r\n            tableHeader,\r\n            colIndex\r\n          )\r\n        }\r\n  \r\n        // console.log(tableData);\r\n  \r\n        // We need to make modification here: find neighbours of a column, instead of neighbours of a cell\r\n        // To do this, we need to use this tableData to ask more queries (number of queires is equal to tableData.length)\r\n        let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", colIndex);\r\n        let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", colIndex);\r\n        allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n        allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n          // console.log(valuesOne);\r\n          // console.log(valuesTwo);\r\n\r\n          // Modified on Sept 13th: whenever updateNeighbourInfo is called, updateUnionSelection should also be called\r\n          // updateUnionSelection should basically be a looped version for updateFirstColSelection\r\n          let selectionInfo = updateUnionSelection(valuesOne);\r\n          // console.log(selectionInfo);\r\n\r\n          // We call updateNeighbourInfo here because we are changing the rows\r\n          let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n          let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n          let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n          // Lastly, we set up the information for the action panel\r\n          let tempObj = {};\r\n          tempObj[\"task\"] = \"showStartRecommend\";\r\n          tempObj[\"colIndex\"] = colIndex;\r\n          tempObj[\"recommendArray\"] = this.createStartRecommend(keyColNeighbours);\r\n  \r\n          // Support for undo: \r\n          // Let's save the previous state in an object\r\n          let lastAction = \"populateKeyColumn\";\r\n          let prevState = \r\n            {\r\n              \"keyColIndex\":this.state.keyColIndex,\r\n              \"keyColNeighbours\":this.state.keyColNeighbours,\r\n              \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n              \"curActionInfo\":this.state.curActionInfo,\r\n              \"tableData\":this.state.tableData,\r\n              \"tableHeader\":this.state.tableHeader,\r\n              \"firstColFilled\":this.state.firstColFilled,\r\n              \"firstColHeaderInfo\":this.state.firstColHeaderInfo,\r\n              \"firstColSelection\":this.state.firstColSelection, // updated on Sept 13th\r\n              \"firstColChecked\":this.state.firstColChecked, // updated on Sept 13th\r\n            };\r\n\r\n          document.body.classList.remove('waiting');\r\n  \r\n          this.setState({\r\n            keyColIndex: colIndex,\r\n            keyColNeighbours: keyColNeighbours,\r\n            firstDegNeighbours: firstDegNeighbours,\r\n            curActionInfo: tempObj, // Changed on Aug 20th\r\n            tableData: tableData,\r\n            tableHeader: tableHeader,\r\n            firstColFilled: true,\r\n            firstColHeaderInfo: firstColHeaderInfo,\r\n            firstColText: \"\", // updated on August 26th\r\n            lastAction: lastAction,\r\n            prevState: prevState,\r\n            firstColSelection: selectionInfo.firstColSelection,\r\n            firstColChecked: selectionInfo.firstColChecked,\r\n          });\r\n        })\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  // This function adds more entities to the first column.\r\n  // It should be similar to populateKeyColumn, with some differences\r\n\r\n  confirmAddFirstCol(e, neighbourArray) {\r\n    // console.log(neighbourArray);\r\n    let queryURL = keyQueryGen(neighbourArray);\r\n\r\n    // Let's first make sure that the neighbourArray do not contain attributes of unknown datatypes.\r\n    if (queryURL === \"ERROR\") {\r\n      alert(\"Unsupported datatype in selected neighbours. Please select some other neighbours.\");\r\n    }\r\n\r\n    else {\r\n      document.body.classList.add(\"waiting\");\r\n\r\n      let promiseArray = [fetchJSON(queryURL)];\r\n\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        // console.log(values[0].results.bindings);\r\n        // Now we append the new query results to tableData\r\n        let numNewRows = Math.min(values[0].results.bindings.length, initialRowNum);\r\n        let tableData = [];\r\n        // We first push on numNewRows number of rows, while setting up data and origin\r\n        for (let i = 0; i < numNewRows; ++i) {\r\n          let tempRow = [];\r\n          for (let j = 0; j < this.state.tableHeader.length; ++j) {\r\n            if (j === 0) {\r\n              tempRow.push({\r\n                data: values[0].results.bindings[i].somevar.value.slice(28),\r\n                origin: [values[0].results.bindings[i].somevar.value.slice(28)]\r\n              })\r\n            }\r\n            else {\r\n              tempRow.push({ data: \"\", origin: []});\r\n            }\r\n          }\r\n          tableData.push(tempRow);\r\n        }\r\n        // We concat this.state.tableData and tableData together, and dedup by first column's data\r\n        tableData = _.cloneDeep(this.state.tableData).concat(tableData);\r\n        tableData = _.uniqBy(tableData, function(x) {return x[0].data;});\r\n        // console.log(tableData);\r\n\r\n        // Now, we move on to update firstDegNeighbours and keyColNeighbours\r\n        let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", 0);\r\n        let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", 0);\r\n        allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n        allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n          let selectionInfo = updateUnionSelection(valuesOne); // Sept 13 update\r\n  \r\n          // We call updateNeighbourInfo here because we are changing the rows\r\n          let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n          let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n          let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n          document.body.classList.remove('waiting');\r\n\r\n          let firstColHeaderInfo = _.cloneDeep(this.state.firstColHeaderInfo);\r\n          firstColHeaderInfo.push(neighbourArray);\r\n\r\n          // Support for undo\r\n          let lastAction = \"confirmAddFirstCol\";\r\n          let prevState = \r\n            {\r\n              \"tableData\": this.state.tableData,\r\n              \"keyColNeighbours\": this.state.keyColNeighbours,\r\n              \"firstDegNeighbours\": this.state.firstDegNeighbours,\r\n              \"firstColHeaderInfo\": this.state.firstColHeaderInfo,\r\n              \"previewColIndex\": this.state.previewColIndex,\r\n              \"firstColSelection\": this.state.firstColSelection, // updated on 9/13\r\n              \"firstColChecked\": this.state.firstColChecked, // updated on 9/13\r\n            }\r\n  \r\n          this.setState({\r\n            tableData: tableData,\r\n            keyColNeighbours: keyColNeighbours,\r\n            firstDegNeighbours: firstDegNeighbours,\r\n            firstColHeaderInfo: firstColHeaderInfo,\r\n            curActionInfo: {\"task\":\"afterPopulateColumn\"},\r\n            previewColIndex: -1,\r\n            firstColText: \"\", // updated on August 26th\r\n            firstColSelection: selectionInfo.firstColSelection,\r\n            firstColChecked: selectionInfo.firstColChecked,\r\n            lastAction: lastAction,\r\n            prevState: prevState,\r\n          });\r\n        })\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // // TEST FUNCTION----------------------------------------------------\r\n\r\n  // getOtherColPromiseTwo(neighbour, type) {\r\n  //   let promiseArray = [];\r\n  //   // The following is the query we will make\r\n\r\n  //   // SELECT ?key ?val\r\n  //   // WHERE{\r\n  //   //       ?key (dbo:spouse|dbp:spouse) ?val.\r\n  //   //       VALUES ?key {dbr:Barack_Obama dbr:Ronald_Reagan dbr:Donald_Trump }\r\n  //   // }\r\n\r\n\r\n  //   let prefixURL = \r\n  //     \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n  //   let suffixURL = \r\n  //     \"%7D%0D%0A%7D%0D%0A&format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=300000&debug=on&run=+Run+Query+\";\r\n  //   let queryBody;\r\n  //   // This clause handles the case of \"Obama -> property -> object\"\r\n  //   if (type === \"subject\") {\r\n  //     queryBody = \r\n  //       \"SELECT+%3Fkey+%3Fval%0D%0AWHERE%7B%0D%0A++++++%3Fkey+%28dbo%3A\" +\r\n  //       regexReplace(neighbour) +\r\n  //       \"%7Cdbp%3A\" +\r\n  //       regexReplace(neighbour) +\r\n  //       \"%29+%3Fval.%0D%0A++++++VALUES+%3Fkey+%7B\";\r\n  //   } \r\n  //   // This clause handles the case of \"subject -> property -> Obama\"\r\n  //   else {\r\n  //     queryBody = \r\n  //       \"SELECT+%3Fkey+%3Fval%0D%0AWHERE%7B%0D%0A++++++%3Fval+%28dbo%3A\" +\r\n  //       regexReplace(neighbour) +\r\n  //       \"%7Cdbp%3A\" +\r\n  //       regexReplace(neighbour) +\r\n  //       \"%29+%3Fkey.%0D%0A++++++VALUES+%3Fkey+%7B\";\r\n  //   }\r\n  //   for (let i = 0; i < this.state.tableData.length; ++i) {\r\n  //     let cellValue = regexReplace(\r\n  //       this.state.tableData[i][this.state.keyColIndex].data\r\n  //     );\r\n  //     // N/A's will block the search, let's replace it with some string that does not block the search\r\n  //     if (cellValue === \"N/A\") {\r\n  //       cellValue = \"NONEXISTINGSTRING\";\r\n  //     }\r\n  //     let curQueryText = \"dbr%3A\"+cellValue+\"+\";\r\n  //     queryBody+=curQueryText;\r\n  //   }\r\n  //   let queryURL = prefixURL + queryBody + suffixURL;\r\n  //   // console.log(queryURL);\r\n  //   promiseArray.push(fetchJSON(queryURL));\r\n  //   return promiseArray;\r\n  // }\r\n\r\n  // The following function serves as a helper function for \"populateOtherColumn\" and \"populateSameNeighbour\"\r\n  // It makes an array of queries, which may affect the performance of our system. Let's change it now.\r\n\r\n  getOtherColPromise(neighbour, type) {\r\n    let promiseArray = [];\r\n    let prefixURL =\r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURL =\r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    for (let i = 0; i < this.state.tableData.length; ++i) {\r\n      let cellValue = regexReplace(\r\n        this.state.tableData[i][this.state.keyColIndex].data\r\n      );\r\n      // N/A's will block the search, let's replace it with some string that does not block the search\r\n      if (cellValue === \"N/A\") {\r\n        cellValue = \"NONEXISTINGSTRING\";\r\n      }\r\n      let queryBody;\r\n      if (type === \"subject\") {\r\n        queryBody =\r\n          \"SELECT+%3Fsomevar%0D%0AWHERE+%7B%0D%0A++++++++dbr%3A\" +\r\n          cellValue +\r\n          \"+%28dbo%3A\" +\r\n          regexReplace(neighbour) +\r\n          \"%7Cdbp%3A\" +\r\n          regexReplace(neighbour) +\r\n          \"%29+%3Fsomevar.%0D%0A%7D%0D%0A%0D%0A&\";\r\n      } else {\r\n        queryBody =\r\n          \"SELECT+%3Fsomevar+%0D%0AWHERE+%7B%0D%0A++++++++%3Fsomevar+%28dbo%3A\" +\r\n          regexReplace(neighbour) +\r\n          \"%7Cdbp%3A\" +\r\n          regexReplace(neighbour) +\r\n          \"%29+dbr%3A\" +\r\n          cellValue +\r\n          \"%0D%0A%7D%0D%0A&\";\r\n      }\r\n      let queryURL = prefixURL + queryBody + suffixURL;\r\n      let curPromise = fetchJSON(queryURL);\r\n      promiseArray.push(curPromise);\r\n    }\r\n    return promiseArray;\r\n  }\r\n\r\n  // document.body.classList.add('waiting');\r\n\r\n  // console.log(neighbourIndex);\r\n\r\n  // Support for \"populateSameRange\":\r\n\r\n  // When the range is not equal to undefined, we want to ask user if they want to populate all other attributes from this range\r\n  // console.log(range);\r\n\r\n  // we need to make a number of queries in the form of: dbr:somekeycolumnentry dbp:neighbour|dbo:neighbour somevar\r\n  // let promiseArrayTwo = this.getOtherColPromiseTwo(neighbour, type); // this is for testing\r\n  // let promiseArray = this.getOtherColPromise(neighbour, type);\r\n\r\n  // allPromiseReady(promiseArray).then((values) => {\r\n  // // allPromiseReady(promiseArrayTwo).then((testValues) => {\r\n\r\n  // //   // Let's compare the different values we get from getOtherColPromise and getOtherColPromiseTwo\r\n  // //   console.log(values);\r\n  // //   console.log(testValues);\r\n\r\n  // //   // Now we need to process the testValues\r\n\r\n  // //   let pairArray = [];\r\n\r\n  // //   // First we removed the prefixes from resultArray\r\n  // //   for (let i=0; i<testValues[0].results.bindings.length; ++i) {\r\n  // //     pairArray.push(\r\n  // //       {\r\n  // //         \"key\":removePrefix(testValues[0].results.bindings[i].key.value),\r\n  // //         \"value\":removePrefix(testValues[0].results.bindings[i].val.value)\r\n  // //       }\r\n  // //     )\r\n  // //   }\r\n  // //   console.log(pairArray);\r\n\r\n  // //   // Then we create a keyArray\r\n  // //   let keyArray = [];\r\n\r\n  // //   for (let i=0; i<this.state.tableData.length; ++i) {\r\n  // //     keyArray.push(this.state.tableData[i][this.state.keyColIndex].data);\r\n  // //   }\r\n  // //   console.log(keyArray);\r\n  populateOtherColumn(e, colIndex, neighbourArray) {\r\n\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    // We use a boolean to keep track of if any cell contains multiple values\r\n    let hasMultiple = false;\r\n\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // curColumnArray is the dataArray for each entry in search column, for all neighbours in neighbourArray.\r\n      let curColumnArray = [];\r\n      // We loop through the neighbourArray\r\n      for (let j = 0; j < neighbourArray.length; ++j) {\r\n        // For each neighbour in neighbourArray, we check to see if entries in search column have values for this neighbour\r\n        let curNeighbour = neighbourArray[j];\r\n        let firstDegNeighbours = \r\n          curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n        // console.log(firstDegNeighbours);\r\n        let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n        // console.log(\"Current neighbour data is \"+curNeighbourData);\r\n        // If yes, we want to concat those values with curColumnArray\r\n        if (curNeighbourData !== undefined) {\r\n          curColumnArray = curColumnArray.concat(curNeighbourData);\r\n        }\r\n      }\r\n      // If curColumnArray is empty, that means this entry in searchColumn do not have any of the attributes from neighbourArray\r\n      if (curColumnArray.length === 0) {\r\n        tableData[i][colIndex].data = \"N/A\";\r\n      }\r\n      // Otherwise, we have found at least one value.\r\n      else {\r\n        // we first set the data for the cell using curColumnArray[0]\r\n        tableData[i][colIndex].data = curColumnArray[0];\r\n        // we then set origin for the cell. Need to use neighbourArray to get the correct text for the origin\r\n        let originToAdd = createNeighbourText(neighbourArray) + \":\" + curColumnArray[0];\r\n        let keyOrigin = tableData[i][this.state.keyColIndex].origin.slice();\r\n        keyOrigin.push(originToAdd);\r\n        tableData[i][colIndex].origin = keyOrigin;\r\n        // console.log(keyOrigin)\r\n\r\n        // Now, if curColumnArray has length longer than one, we want to set hasMultiple to true\r\n        // We also create an extra attribute for the current tableData cell, called dataArray, whose max length is maxNeighbourCount.\r\n        if (curColumnArray.length > 1) {\r\n          hasMultiple = true;\r\n          let lastIndex = Math.min(curColumnArray.length, maxNeighbourCount);\r\n          tableData[i][colIndex].dataArray = curColumnArray.slice(1, lastIndex);\r\n        } \r\n      }\r\n    }\r\n    // Now, we are done with updating tableData.\r\n    // We want to update tableHeader as well.\r\n    let tableHeader = _.cloneDeep(this.state.tableHeader);\r\n    tableHeader[colIndex] = neighbourArray;\r\n\r\n    // We start setting up the content for the Action Panel.\r\n\r\n    let recommendArray = createRecommendArray(neighbourArray, this.state.keyColNeighbours);\r\n    // console.log(recommendArray);\r\n\r\n    // tempObj stores the information passed to ActionPanel\r\n    let tempObj = {};\r\n\r\n    // Case 1: hasMultiple is true, and there are recommendations\r\n    if (hasMultiple === true && recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"sameNeighbourAndRecommendation\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n      tempObj[\"recommendArray\"] = recommendArray;\r\n    }\r\n    // Case 2: only hasMultiple is true\r\n    else if (hasMultiple === true) {\r\n      tempObj[\"task\"] = \"populateSameNeighbour\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n    }\r\n    // Case 3: only hasRecommendation is true\r\n    else if (recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"populateRecommendation\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"recommendArray\"] = recommendArray; \r\n    }\r\n    // Case 4: neither hasMultiple or hasRecommendation is true. In which case we just tell users that they can fill more columns.\r\n    else {\r\n      tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    }\r\n\r\n    // Support for undo: \r\n    // Let's save the previous state in an object\r\n    let lastAction = \"populateOtherColumn\";\r\n    let prevState = \r\n      {\r\n        \"curActionInfo\":this.state.curActionInfo,\r\n        \"tableData\":this.state.tableData,\r\n        \"tableHeader\":this.state.tableHeader,\r\n        \"previewColIndex\":this.state.previewColIndex,\r\n        \"otherColText\": this.state.otherColText,\r\n      };\r\n\r\n    this.setState({\r\n      curActionInfo: tempObj,\r\n      tableData: tableData,\r\n      tableHeader: tableHeader,\r\n      previewColIndex: -1,\r\n      otherColText: \"\",\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    });\r\n\r\n\r\n    // let tableData = _.cloneDeep(this.state.tableData);\r\n    // let firstDegNeighbours = type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n    // let longestDataArray = [];\r\n    // for (let i = 0; i < tableData.length; ++i) {\r\n    //   let dataArray = firstDegNeighbours[i][neighbour];\r\n    //   // console.log(dataArray);\r\n    //   // If dataArray is empty, this current entry in search column does not have this neighbour at all.\r\n    //   if (dataArray === undefined) {\r\n    //     tableData[i][colIndex].data = \"N/A\";\r\n    //   } \r\n    //   // Otherwise, we have found at least one value. Let's use dataArray[0]\r\n    //   else {\r\n    //     // we first set data for the cell\r\n    //     tableData[i][colIndex].data = dataArray[0];\r\n    //     // we then set origin for the cell. The origin depends on whether type is \"subject\" or \"object\"\r\n    //     let originToAdd = type === \"subject\" ? neighbour + \":\" + dataArray[0] : \"is \" + neighbour + \" of:\" + dataArray[0];\r\n    //     let keyOrigin = tableData[i][this.state.keyColIndex].origin.slice();\r\n    //     keyOrigin.push(originToAdd);\r\n    //     tableData[i][colIndex].origin = keyOrigin;\r\n    //     // If dataArray's length is longer than longestDataArray's length, we want to update it\r\n    //     if (dataArray.length > longestDataArray.length) {\r\n    //       longestDataArray = dataArray;\r\n    //     }\r\n    //   }\r\n    // }\r\n    // // console.log(longestDataArray);\r\n    // let maxCount = Math.min(longestDataArray.length, maxNeighbourCount);\r\n    // let remainNeighbourCount = maxCount - 1;\r\n\r\n    // console.log(remainNeighbourCount);\r\n    \r\n    // // Now we set up the content for ActionPanel\r\n    // let tempObj = {};\r\n\r\n    // // In this case, we give users option to populate duplicate neighbours\r\n    // if (remainNeighbourCount > 0) {\r\n    //   tempObj[\"task\"] = \"populateSameNeighbour\";\r\n    //   tempObj[\"colIndex\"] = colIndex;\r\n    //   tempObj[\"neighbour\"] = neighbour;\r\n    //   tempObj[\"type\"] = type;\r\n    //   tempObj[\"numCols\"] = remainNeighbourCount;\r\n    //   if (range !== undefined) {\r\n    //     tempObj[\"range\"] = range;\r\n    //   }\r\n    // }\r\n    // // In this case, users are not populating column with duplicate names, but it has a range.\r\n    // // We may need to ask user if they want to populate other columns from the same range\r\n    // else if (range !== undefined) {\r\n    //   let siblingNeighbour = [];\r\n    //   // console.log(\"Range is \"+range);\r\n    //   // console.log(this.state.keyColNeighbours);\r\n    //   for (let i = 0; i < this.state.keyColNeighbours.length; ++i) {\r\n    //     if (\r\n    //       this.state.keyColNeighbours[i].range === range &&\r\n    //       this.state.keyColNeighbours[i].value !== neighbour\r\n    //     ) {\r\n    //       siblingNeighbour.push(this.state.keyColNeighbours[i]);\r\n    //     }\r\n    //   }\r\n    //   // If we have found columns from the same range (other than the current neighbour),\r\n    //   console.log(siblingNeighbour);\r\n    //   // If sibling neighbour is non-empty, we give user the option to populate other columns from the same range.\r\n    //   if (siblingNeighbour.length > 0) {\r\n    //     // Let's do some string processing to improve UI clarity\r\n    //     let rangeLiteral = \"\";\r\n    //     if (range.includes(\"http://dbpedia.org/ontology/\")) {\r\n    //       rangeLiteral = range.slice(28);\r\n    //     } else if (range.includes(\"http://www.w3.org/2001/XMLSchema#\")) {\r\n    //       rangeLiteral = range.slice(33);\r\n    //     } else {\r\n    //       rangeLiteral = range;\r\n    //     }\r\n    //     tempObj[\"task\"] = \"populateSameRange\";\r\n    //     tempObj[\"colIndex\"] = colIndex;\r\n    //     tempObj[\"range\"] = rangeLiteral;\r\n    //     // console.log(siblingNeighbour);\r\n    //     tempObj[\"siblingNeighbour\"] = siblingNeighbour;\r\n    //   }\r\n    //   // Else, if we have NOT found anything from the same range, we tell user that they can populate more columns\r\n    //   else {\r\n    //     tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    //   }\r\n    // }\r\n    // // In this case, we tell users that they can populate more columns\r\n    // else {\r\n    //   tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    // }\r\n    // // Support for undo: \r\n    // // Let's save the previous state in an object\r\n    // let lastAction = \"populateOtherColumn\";\r\n    // let prevState = \r\n    //   {\r\n    //     \"curActionInfo\":this.state.curActionInfo,\r\n    //     \"tableData\":this.state.tableData,\r\n    //   };\r\n\r\n    // this.setState({\r\n    //   curActionInfo: tempObj,\r\n    //   tableData: tableData,\r\n    //   lastAction: lastAction,\r\n    //   prevState: prevState,\r\n    // });\r\n  }\r\n\r\n  // This function is a helper function that takes in 9 parameters:\r\n  // Note: this function does not make any fetch requests, thus does NOT involve promises.\r\n\r\n  // 1) colIndex:          index of the column that we just filled (ex. 1, if we just filled in column 1)\r\n  // 2) neighbourArray:    an array of neighbour objects (two important attributes: value, type)\r\n  // 3) numCols:           number of columns that we need to fill with the duplicated neighbour. (ex. 2, if we have filled in one almaMater, but there are three in total)\r\n  \r\n  // 4) keyColIndex:                 original key column index\r\n  // 5) tableHeader:                 original tableHeader\r\n  // 6) tableData:                   original tableData\r\n  // 7) optionsMap:                  original optionsMap\r\n  // 8) selectedClassAnnotation:     original selectedClassAnnotation\r\n\r\n  // 9) fillRecommendation:              When true, decrement requiredLength in code by 1.\r\n\r\n  // and returns an object with 5 values:\r\n  // 1) tableHeader:                tableHeader after modification\r\n  // 2) tableData:                  tableData after modification\r\n  // 3) optionsMap:                 optionsMap after modification\r\n  // 4) selectedClassAnnotation:    selectedClassAnnotation after modification\r\n  // 5) keyColIndex:                keyColIndex after modification\r\n\r\n  addAllNeighbour(\r\n    colIndex,\r\n    neighbourArray,\r\n    numCols,\r\n    keyColIndex,\r\n    tableHeader,\r\n    tableData,\r\n    optionsMap,\r\n    selectedClassAnnotation,\r\n    fillRecommendation\r\n  ) {\r\n    // Let's first check if all the variables are as expected\r\n\r\n    // console.log(\"Column index is: \"+colIndex);\r\n    // console.log(\"NeighbourArray is: \");\r\n    // console.log(neighbourArray);\r\n    // console.log(\"Number of columns to fill is: \"+numCols);\r\n    // console.log(\"Key column index \"+keyColIndex);\r\n    // console.log(\"Table header is: \");\r\n    // console.log(tableHeader);\r\n    // console.log(\"Table Data is: \");\r\n    // console.log(tableData);\r\n    // console.log(\"Options map is: \");\r\n    // console.log(optionsMap);\r\n    // console.log(\"selected class annotation is \");\r\n    // console.log(selectedClassAnnotation);\r\n    // console.log(\"End of attributes check\\n\\n\\n\\n\");\r\n\r\n    // First thing should be to insert \"numCols\" number of empty columns right after column with index \"colIndex\"\r\n    const rowNum = tableData.length;\r\n    const colNum = tableData[0].length;\r\n\r\n    // Let's check if we need to modify keyColIndex:\r\n    // if colIndex < keyColIndex, we need to increase keyColIndex by numCols\r\n    let keyColIndexUpdated = keyColIndex;\r\n    if (colIndex < keyColIndex) {\r\n      keyColIndexUpdated+=numCols;\r\n    }\r\n    // console.log(\"Updated key column index is \"+keyColIndexUpdated);\r\n\r\n    // We first take care of table data's (empty) additions\r\n    let tableDataUpdated = [];\r\n    for (let i = 0; i < rowNum; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < colIndex + 1; ++j) {\r\n        tempRow.push(tableData[i][j]);\r\n      }\r\n      // we add in numCols number of empty columns\r\n      for (let j = 0; j < numCols; ++j) {\r\n        tempRow.push({ data: \"\", origin: [] });\r\n      }\r\n      for (let k = colIndex + 1; k < colNum; ++k) {\r\n        tempRow.push(tableData[i][k]);\r\n      }\r\n      tableDataUpdated.push(tempRow);\r\n    }\r\n    // console.log(\"Updated table data is \");\r\n    // console.log(tableDataUpdated);\r\n\r\n    // we now take care of table header's addition.\r\n    let tableHeaderUpdated = [];\r\n    for (let j = 0; j < colIndex + 1; ++j) {\r\n      tableHeaderUpdated.push(tableHeader[j]);\r\n    }\r\n    // Now we decide what the newly pushed tableHeader should look like\r\n    let newTableHeader;\r\n    // If we are not populating new suggestions, we simply use tableHeader[colIndex]\r\n    if (fillRecommendation === false) {\r\n      newTableHeader = tableHeader[colIndex];\r\n    }\r\n    // else, it is an length one array of object. Object has 2 properties: value and label\r\n    else {\r\n      // We need to figure out what this label is\r\n      let keyColLabel = \"\";\r\n      for (let i = 0; i < tableHeader[keyColIndex].length; ++i) {\r\n        let labelToAdd = i > 0 ? \"&\" + tableHeader[keyColIndex][i].label : tableHeader[keyColIndex][i].label;\r\n        keyColLabel+=labelToAdd;\r\n      }\r\n      let ownLabel = neighbourArray[0].type === \"subject\" ? neighbourArray[0].value : \"is \" + neighbourArray[0].value + \" of\";\r\n      newTableHeader = [\r\n        {\r\n          \"value\" : neighbourArray[0].value,\r\n          \"label\" : ownLabel + \"--\" + keyColLabel,\r\n          \"type\"  : neighbourArray[0].type,\r\n        }\r\n      ]\r\n    }\r\n    for (let j = 0; j < numCols; ++j) {\r\n      tableHeaderUpdated.push(newTableHeader);\r\n    }\r\n    for (let k = colIndex + 1; k < colNum; ++k) {\r\n      tableHeaderUpdated.push(tableHeader[k]);\r\n    }\r\n    // console.log(\"Updated table header is \");\r\n    // console.log(tableHeaderUpdated);\r\n\r\n    // We now take care of selectedClassAnnotation. For now, we just add some empty arrays to it\r\n    let selectedClassAnnotationUpdated = [];\r\n    for (let j = 0; j < colIndex; ++j) {\r\n      selectedClassAnnotationUpdated.push(selectedClassAnnotation[j]);\r\n    }\r\n    for (let j = 0; j < numCols; ++j) {\r\n      selectedClassAnnotationUpdated.push([]);\r\n    }\r\n    for (let k = colIndex; k < colNum-1; ++k) {\r\n      selectedClassAnnotationUpdated.push(selectedClassAnnotation[k]);\r\n    }\r\n    // console.log(\"Updated class annotation is \");\r\n    // console.log(selectedClassAnnotationUpdated);\r\n\r\n    // we now take care of optionMap's addition. We just need to add some empty arrays to it\r\n    let optionsMapUpdated = [];\r\n    for (let j = 0; j < colIndex + 1; ++j) {\r\n      optionsMapUpdated.push(optionsMap[j]);\r\n    }\r\n    for (let j = 0; j < numCols; ++j) {\r\n      optionsMapUpdated.push([]);\r\n    }\r\n    for (let k = colIndex + 1; k < colNum; ++k) {\r\n      optionsMapUpdated.push(optionsMap[k]);\r\n    }\r\n    // console.log(\"Updated options map is \");\r\n    // console.log(optionsMapUpdated);\r\n\r\n    // Finally, we fill in the actual data for tableData. We need to take care of both data and origin\r\n\r\n    // Outer loop loops over all rows in the table\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // curColumnArray corresponds to the dataArray for each entry from the search column\r\n      let curColumnArray = [];\r\n      // we loop through the neighbourArray\r\n      for (let j = 0; j < neighbourArray.length; ++j) {\r\n        // For each neighbour in neighbourArray, we check to see if entries in search column have values for this neighbour\r\n        let curNeighbour = neighbourArray[j];\r\n        let firstDegNeighbours =\r\n          curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n        let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n        // If yes, we want to concat those values with curColumnArray\r\n        if (curNeighbourData !== undefined) {\r\n          curColumnArray = curColumnArray.concat(curNeighbourData);\r\n        }\r\n      }\r\n      // console.log(curColumnArray);\r\n      for (let curCol = colIndex + 1; curCol < colIndex + 1 + numCols; ++curCol) {\r\n        // Starting value for requiredLength is 2\r\n        let requiredLength = fillRecommendation === true ? curCol - colIndex : curCol - colIndex + 1;\r\n        // If curColumnArray's length does not meet the required length, we simply set data to N/A\r\n        if (curColumnArray.length < requiredLength) {\r\n          tableDataUpdated[i][curCol].data = \"N/A\";\r\n        }\r\n        else {\r\n          // We first set the data of the cell\r\n          let value = curColumnArray[requiredLength - 1];\r\n          tableDataUpdated[i][curCol].data = value;\r\n          // We then set the origin of the cell\r\n          let originToAdd = createNeighbourText(neighbourArray) + \":\" + value;\r\n          let keyOrigin = tableDataUpdated[i][keyColIndexUpdated].origin.slice();\r\n          keyOrigin.push(originToAdd);\r\n          tableDataUpdated[i][curCol].origin = keyOrigin;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      tableHeader: tableHeaderUpdated,\r\n      tableData: tableDataUpdated,\r\n      optionsMap: optionsMapUpdated,\r\n      selectedClassAnnotation: selectedClassAnnotationUpdated,\r\n      keyColIndex: keyColIndexUpdated,\r\n    };\r\n  }\r\n\r\n  // This function populates all neighbour with the same names in different rows, if that neighbour has multiple occurences.\r\n  // It should modify both tableData and firstDegNeighbours, but not keyColNeighbours.\r\n  // This is because we are not removing, or adding anything new, to the search column.\r\n\r\n  sameNeighbourDiffRow(e,colIndex,neighbourArray) {\r\n\r\n    // First we take a look at the parameters passed in\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n    // console.log(this.state.tableData);\r\n\r\n    let tableDataUpdated = [];\r\n    let subjectNeighbours = [];\r\n    let objectNeighbours = [];\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    let firstDegNeighbours = _.cloneDeep(this.state.firstDegNeighbours);\r\n\r\n    // The first loop deals with tableData's additions \r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // We first create a deep copy of the current row\r\n      let curRow = _.cloneDeep(tableData[i]);\r\n      // If the current cell in the selected column does NOT have dataArray attribute, we push it onto tableData as it is\r\n      if (curRow[colIndex].dataArray === undefined) {\r\n        tableDataUpdated.push(curRow);\r\n      }\r\n      // Else, we have to push on dataArray.length number of new rows onto tableData.\r\n      // We need to take care of the new cell's data, origin, and dataArray\r\n      else {\r\n        // First, we still need to push on curRow\r\n        tableDataUpdated.push(curRow);\r\n        // Then, we deal with rows that are not in the original table\r\n        for (let j = 0; j < curRow[colIndex].dataArray.length; ++j) {\r\n          let rowToAdd = _.cloneDeep(curRow);\r\n          // We set data\r\n          rowToAdd[colIndex].data = curRow[colIndex].dataArray[j];\r\n          // we then set origin for the cell. Need to use neighbourArray to get the correct text for the origin\r\n          let originToAdd = createNeighbourText(neighbourArray) + \":\" + curRow[colIndex].dataArray[j];\r\n          let keyOrigin = tableData[i][this.state.keyColIndex].origin.slice();\r\n          keyOrigin.push(originToAdd);\r\n          rowToAdd[colIndex].origin = keyOrigin;\r\n          // Lastly, we remove the dataArray attribute from rowToAdd\r\n          delete rowToAdd[colIndex].dataArray;\r\n          tableDataUpdated.push(rowToAdd);\r\n        }\r\n      }\r\n    }\r\n\r\n    // The second loop deals with firstDegNeighbours's additions\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // We first create a deep copy of the current row\r\n      let curRow = _.cloneDeep(tableData[i]);\r\n      // If the current cell in the selected column does NOT have dataArray attribute\r\n      // We push onto subjectNeighbours and objectNeighbours once\r\n      if (curRow[colIndex].dataArray === undefined) {\r\n        subjectNeighbours.push(firstDegNeighbours[\"subject\"][i]);\r\n        objectNeighbours.push(firstDegNeighbours[\"object\"][i]);\r\n      }\r\n      // Else, we have to push onto subject/objectNeighbours 1 + dataArray.length times.\r\n      else {\r\n        for (let j = 0; j < 1 + curRow[colIndex].dataArray.length; ++j) {\r\n          subjectNeighbours.push(firstDegNeighbours[\"subject\"][i]);\r\n          objectNeighbours.push(firstDegNeighbours[\"object\"][i]);\r\n        }\r\n      }\r\n    }\r\n    let firstDegNeighboursUpdated = \r\n      {\r\n        \"subject\":subjectNeighbours,\r\n        \"object\":objectNeighbours,\r\n      }\r\n    // We take a look at updated tableData and firstDegNeighbours\r\n    // console.log(tableDataUpdated);\r\n    // console.log(firstDegNeighboursUpdated);\r\n\r\n    // Now we set up the obj for Action Panel\r\n    // We check if the curActionInfo's task is sameNeighbourAndRecommendation or populateSameNeighbour\r\n    let tempObj = {};\r\n    let curActionInfo = _.cloneDeep(this.state.curActionInfo);\r\n\r\n    // If it is sameNeighbourAndRecommendation, we will turn it to populateRecommendation\r\n    if (curActionInfo.task === \"sameNeighbourAndRecommendation\") {\r\n      tempObj[\"task\"] = \"populateRecommendation\";\r\n      tempObj[\"colIndex\"] = curActionInfo.colIndex;\r\n      tempObj[\"recommendArray\"] = curActionInfo.recommendArray; \r\n    }\r\n    // Else, if it is sameNeighbourAndStartRecommend, we will turn it to showStartRecommend\r\n    else if (curActionInfo.task === \"sameNeighbourAndStartRecommend\") {\r\n      tempObj[\"task\"] = \"showStartRecommend\";\r\n      tempObj[\"colIndex\"] = curActionInfo.colIndex;\r\n      tempObj[\"recommendArray\"] = curActionInfo.recommendArray; \r\n    }\r\n    // Else, we turn the current action into afterPopulateColumn\r\n    else {\r\n      tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    }\r\n\r\n    // Support for undo: \r\n    // Let's save the previous state in an object\r\n    let lastAction = \"sameNeighbourDiffRow\";\r\n    let prevState = \r\n      {\r\n        \"curActionInfo\":this.state.curActionInfo,\r\n        \"tableData\":this.state.tableData,\r\n        \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n      };\r\n\r\n    this.setState({\r\n      curActionInfo: tempObj,\r\n      tableData: tableDataUpdated,\r\n      firstDegNeighbours: firstDegNeighboursUpdated,\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    })\r\n  }\r\n\r\n  // This function populates all neighbour with the same names in the same columns, if that neighbour has multiple occurences.\r\n\r\n  sameNeighbourOneRow(e, colIndex, neighbourArray) {\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n    // console.log(numCols);\r\n\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n\r\n    // Outer loop loops over all rows in the table\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // curColumnArray corresponds to the dataArray for each entry from the search column\r\n      let curColumnArray = [];\r\n      // we loop through the neighbourArray\r\n      for (let j = 0; j < neighbourArray.length; ++j) {\r\n        // For each neighbour in neighbourArray, we check to see if entries in search column have values for this neighbour\r\n        let curNeighbour = neighbourArray[j];\r\n        // console.log(curNeighbour.value);\r\n        let firstDegNeighbours =\r\n          curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n        let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n        // console.log(firstDegNeighbours);\r\n        // If yes, we want to concat those values with curColumnArray\r\n        if (curNeighbourData !== undefined) {\r\n          // console.log(curNeighbourData);\r\n          curColumnArray = curColumnArray.concat(curNeighbourData);\r\n        }\r\n      }\r\n      // console.log(curColumnArray);\r\n      // If curColumnArray is empty, that means this entry in searchColumn do not have any of the attributes from neighbourArray\r\n      if (curColumnArray.length === 0) {\r\n        tableData[i][colIndex].data = \"N/A\";\r\n      }\r\n      // Otherwise, we have found at least one value. And we want to set up the data and origin. \r\n      else {\r\n        // we first set the data for the cell using all values from curColumnArray (this is different from populateOtherColumn)\r\n        let curData = \"\";\r\n        for (let k = 0; k < curColumnArray.length; ++k) {\r\n          let dataToAdd = k > 0 ? \";\" + curColumnArray[k] : curColumnArray[k];\r\n          curData+=dataToAdd;\r\n          // console.log(\"Data to add is \"+dataToAdd);\r\n          // console.log(\"Current data is \"+curData);\r\n        }\r\n        tableData[i][colIndex].data = curData;\r\n        // we then set the origin for the cell\r\n        let originToAdd = createNeighbourText(neighbourArray) + \":\" + curData;\r\n        let keyOrigin = tableData[i][this.state.keyColIndex].origin.slice();\r\n        keyOrigin.push(originToAdd);\r\n        tableData[i][colIndex].origin = keyOrigin;\r\n      }\r\n    }\r\n\r\n    // Now we set up the obj for Action Panel\r\n    // We check if the curActionInfo's task is sameNeighbourAndRecommendation or populateSameNeighbour\r\n    let tempObj = {};\r\n    let curActionInfo = _.cloneDeep(this.state.curActionInfo);\r\n\r\n    // If it is sameNeighbourAndRecommendation, we will turn it to populateRecommendation\r\n    if (curActionInfo.task === \"sameNeighbourAndRecommendation\") {\r\n      tempObj[\"task\"] = \"populateRecommendation\";\r\n      tempObj[\"colIndex\"] = curActionInfo.colIndex;\r\n      tempObj[\"recommendArray\"] = curActionInfo.recommendArray; \r\n    }\r\n    // Else, if it is sameNeighbourAndStartRecommend, we will turn it to showStartRecommend\r\n    else if (curActionInfo.task === \"sameNeighbourAndStartRecommend\") {\r\n      tempObj[\"task\"] = \"showStartRecommend\";\r\n      tempObj[\"colIndex\"] = curActionInfo.colIndex;\r\n      tempObj[\"recommendArray\"] = curActionInfo.recommendArray; \r\n    }\r\n    // Else, we turn the current action into afterPopulateColumn\r\n    else {\r\n      tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    }\r\n\r\n    // Support for undo: \r\n    let lastAction = \"sameNeighbourOneRow\";\r\n    let prevState = \r\n      {\r\n        \"curActionInfo\":this.state.curActionInfo,\r\n        \"tableData\":this.state.tableData,\r\n      };\r\n\r\n    this.setState({\r\n      curActionInfo: tempObj,\r\n      tableData: tableData,\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    });\r\n  }\r\n\r\n  // The following function populates one recommendation neighbour\r\n  populateRecommendation(e, colIndex, neighbourArray) {\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n\r\n    // First thing we need to do should be the same as contextAddColumn\r\n    const rowNum = this.state.tableData.length;\r\n    const colNum = this.state.tableData[0].length;\r\n\r\n    // we first take care of table data's addition\r\n    let tableData = [];\r\n    for (let i = 0; i < rowNum; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < colIndex + 1; ++j) {\r\n        tempRow.push(this.state.tableData[i][j]);\r\n      }\r\n      // we add in one column of empty data\r\n      tempRow.push({ data: \"\", origin: [] });\r\n      for (let k = colIndex + 1; k < colNum; ++k) {\r\n        tempRow.push(this.state.tableData[i][k]);\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n    // console.log(tableData);\r\n\r\n    // we now take care of tabler header, and selectedClassAnnotation's addition\r\n    let tableHeader = [];\r\n    for (let j = 0; j < colIndex + 1; ++j) {\r\n      tableHeader.push(this.state.tableHeader[j]);\r\n    }\r\n    tableHeader.push([]);\r\n    for (let k = colIndex + 1; k < colNum; ++k) {\r\n      tableHeader.push(this.state.tableHeader[k]);\r\n    }\r\n    // console.log(tableHeader);\r\n\r\n    // we now take care of selectedClassAnnotation\r\n    let selectedClassAnnotation = [];\r\n    for (let j = 0; j < colIndex; ++j) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[j]);\r\n    }\r\n    selectedClassAnnotation.push([]);\r\n    for (let k = colIndex; k < colNum-1; ++k) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[k]);\r\n    }\r\n    // console.log(selectedClassAnnotation);\r\n\r\n    // If colIndex is less than keyColIndex, we need to increase keyColIndex by 1\r\n    let keyColIndex = this.state.keyColIndex;\r\n    if (colIndex < keyColIndex) {\r\n      ++keyColIndex;\r\n    }\r\n    // console.log(keyColIndex);\r\n\r\n    // Now, the part that's the same as contextAddColumn is over.\r\n    // The part below will be largely the same as populateOtherColumn.\r\n\r\n    // An important things for us to do how is to increment colIndex\r\n    ++colIndex;\r\n\r\n    // We use a boolean to keep track of if any cell contains multiple values\r\n    let hasMultiple = false;\r\n\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // curColumnArray is the dataArray for each entry in search column, for all neighbours in neighbourArray.\r\n      let curColumnArray = [];\r\n      // We loop through the neighbourArray\r\n      for (let j = 0; j < neighbourArray.length; ++j) {\r\n        // For each neighbour in neighbourArray, we check to see if entries in search column have values for this neighbour\r\n        let curNeighbour = neighbourArray[j];\r\n        let firstDegNeighbours = \r\n          curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n        // console.log(firstDegNeighbours);\r\n        let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n        // console.log(\"Current neighbour data is \"+curNeighbourData);\r\n        // If yes, we want to concat those values with curColumnArray\r\n        if (curNeighbourData !== undefined) {\r\n          curColumnArray = curColumnArray.concat(curNeighbourData);\r\n        }\r\n      }\r\n      // If curColumnArray is empty, that means this entry in searchColumn do not have any of the attributes from neighbourArray\r\n      if (curColumnArray.length === 0) {\r\n        tableData[i][colIndex].data = \"N/A\";\r\n      }\r\n      // Otherwise, we have found at least one value.\r\n      else {\r\n        // we first set the data for the cell using curColumnArray[0]\r\n        tableData[i][colIndex].data = curColumnArray[0];\r\n        // we then set origin for the cell. Need to use neighbourArray to get the correct text for the origin\r\n        let originToAdd = createNeighbourText(neighbourArray) + \":\" + curColumnArray[0];\r\n        let keyOrigin = tableData[i][keyColIndex].origin.slice();\r\n        keyOrigin.push(originToAdd);\r\n        tableData[i][colIndex].origin = keyOrigin;\r\n        // console.log(keyOrigin)\r\n\r\n        // Now, if curColumnArray has length longer than one, we want to set hasMultiple to true\r\n        // We also create an extra attribute for the current tableData cell, called dataArray, whose max length is maxNeighbourCount.\r\n        if (curColumnArray.length > 1) {\r\n          hasMultiple = true;\r\n          let lastIndex = Math.min(curColumnArray.length, maxNeighbourCount);\r\n          tableData[i][colIndex].dataArray = curColumnArray.slice(1, lastIndex);\r\n        } \r\n      }\r\n    }\r\n    // Now, we are done with updating tableData.\r\n    // We want to update tableHeader as well.\r\n    tableHeader[colIndex] = neighbourArray;\r\n\r\n    // In the third part of the code, We start setting up the content for the Action Panel.\r\n\r\n    // First thing we want to do is to update the recommendArray: \r\n    // We want to remove the recommendation just added from the recommendArray\r\n    let recommendArray = _.cloneDeep(this.state.curActionInfo.recommendArray)\r\n    let curRecommendation = neighbourArray[0];\r\n    let sliceIndex = -1;\r\n\r\n    // This for loop checks which index we want to remove\r\n    for (let i = 0; i < recommendArray.length; ++i) {\r\n      if (recommendArray[i].value === curRecommendation.value && recommendArray[i].type === curRecommendation.type) {\r\n        sliceIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // console.log(sliceIndex);\r\n    // console.log(curRecommendation);\r\n    // console.log(recommendArray);\r\n    \r\n    // This if condition removes the found element\r\n    if (sliceIndex !== -1) {\r\n      recommendArray.splice(sliceIndex, 1);\r\n    }\r\n\r\n    // tempObj stores the information passed to ActionPanel\r\n    let tempObj = {};\r\n    // console.log(this.state.curActionInfo);\r\n    if (hasMultiple === true && recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"sameNeighbourAndRecommendation\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n      tempObj[\"recommendArray\"] = recommendArray;\r\n    }\r\n    else if (hasMultiple === false && recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"populateRecommendation\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"recommendArray\"] = recommendArray;\r\n    }\r\n    else if (hasMultiple === true) {\r\n      tempObj[\"task\"] = \"populateSameNeighbour\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n    }\r\n    else {\r\n      tempObj[\"task\"] = \"afterPopulateColumn\"\r\n    }\r\n\r\n    // console.log(tableData);\r\n    // console.log(tableHeader);\r\n    // console.log(selectedClassAnnotation);\r\n    // console.log(keyColIndex);\r\n    // console.log(tempObj);\r\n\r\n    // Lastly, we add support for undo, and set the states\r\n    let lastAction = \"populateRecommendation\";\r\n    let prevState =\r\n      {\r\n        \"tableData\": this.state.tableData,\r\n        \"tableHeader\": this.state.tableHeader,\r\n        \"curActionInfo\": this.state.curActionInfo,\r\n        \"keyColIndex\": this.state.keyColIndex,\r\n        \"selectedClassAnnotation\": this.state.selectedClassAnnotation,\r\n        \"tabIndex\": this.state.tabIndex,\r\n        \"previewColIndex\": this.state.previewColIndex,\r\n      } \r\n\r\n    this.setState({\r\n      tableData: tableData,\r\n      tableHeader: tableHeader,\r\n      selectedClassAnnotation: selectedClassAnnotation,\r\n      keyColIndex: keyColIndex,\r\n      curActionInfo: tempObj,\r\n      tabIndex: 0,\r\n      previewColIndex: -1,\r\n      prevState: prevState,\r\n      lastAction: lastAction,\r\n    })\r\n  }\r\n\r\n  // This function\r\n\r\n  createStartRecommend(keyColNeighbours) {\r\n    let recommendArray = [];\r\n    let numRecommend = Math.min(5, keyColNeighbours.length);\r\n    for (let i = 0; i < numRecommend; ++i) {\r\n      recommendArray.push(keyColNeighbours[i]);\r\n    }\r\n    return recommendArray;\r\n  }\r\n\r\n  // This function below should mostly be similar to populateRecommendation, with some small differences. \r\n\r\n  populateStartRecommend(e, colIndex, neighbourArray) {\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n    // console.log(this.state.curActionInfo);\r\n\r\n    // First thing we need to do should be the same as contextAddColumn\r\n    const rowNum = this.state.tableData.length;\r\n    const colNum = this.state.tableData[0].length;\r\n\r\n    // we first take care of table data's addition\r\n    let tableData = [];\r\n    for (let i = 0; i < rowNum; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < colIndex + 1; ++j) {\r\n        tempRow.push(this.state.tableData[i][j]);\r\n      }\r\n      // we add in one column of empty data\r\n      tempRow.push({ data: \"\", origin: [] });\r\n      for (let k = colIndex + 1; k < colNum; ++k) {\r\n        tempRow.push(this.state.tableData[i][k]);\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n    // console.log(tableData);\r\n\r\n    // we now take care of tabler header, and selectedClassAnnotation's addition\r\n    let tableHeader = [];\r\n    for (let j = 0; j < colIndex + 1; ++j) {\r\n      tableHeader.push(this.state.tableHeader[j]);\r\n    }\r\n    tableHeader.push([]);\r\n    for (let k = colIndex + 1; k < colNum; ++k) {\r\n      tableHeader.push(this.state.tableHeader[k]);\r\n    }\r\n    // console.log(tableHeader);\r\n\r\n    // we now take care of selectedClassAnnotation\r\n    let selectedClassAnnotation = [];\r\n    for (let j = 0; j < colIndex; ++j) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[j]);\r\n    }\r\n    selectedClassAnnotation.push([]);\r\n    for (let k = colIndex; k < colNum-1; ++k) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[k]);\r\n    }\r\n    // console.log(selectedClassAnnotation);\r\n\r\n    // If colIndex is less than keyColIndex, we need to increase keyColIndex by 1\r\n    let keyColIndex = this.state.keyColIndex;\r\n    if (colIndex < keyColIndex) {\r\n      ++keyColIndex;\r\n    }\r\n    // console.log(keyColIndex);\r\n\r\n    // Now, the part that's the same as contextAddColumn is over.\r\n    // The part below will be largely the same as populateOtherColumn.\r\n\r\n    // An important things for us to do how is to increment colIndex\r\n    ++colIndex;\r\n\r\n    // We use a boolean to keep track of if any cell contains multiple values\r\n    let hasMultiple = false;\r\n\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // curColumnArray is the dataArray for each entry in search column, for all neighbours in neighbourArray.\r\n      let curColumnArray = [];\r\n      // We loop through the neighbourArray\r\n      for (let j = 0; j < neighbourArray.length; ++j) {\r\n        // For each neighbour in neighbourArray, we check to see if entries in search column have values for this neighbour\r\n        let curNeighbour = neighbourArray[j];\r\n        let firstDegNeighbours = \r\n          curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n        // console.log(firstDegNeighbours);\r\n        let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n        // console.log(\"Current neighbour data is \"+curNeighbourData);\r\n        // If yes, we want to concat those values with curColumnArray\r\n        if (curNeighbourData !== undefined) {\r\n          curColumnArray = curColumnArray.concat(curNeighbourData);\r\n        }\r\n      }\r\n      // If curColumnArray is empty, that means this entry in searchColumn do not have any of the attributes from neighbourArray\r\n      if (curColumnArray.length === 0) {\r\n        tableData[i][colIndex].data = \"N/A\";\r\n      }\r\n      // Otherwise, we have found at least one value.\r\n      else {\r\n        // we first set the data for the cell using curColumnArray[0]\r\n        tableData[i][colIndex].data = curColumnArray[0];\r\n        // we then set origin for the cell. Need to use neighbourArray to get the correct text for the origin\r\n        let originToAdd = createNeighbourText(neighbourArray) + \":\" + curColumnArray[0];\r\n        let keyOrigin = tableData[i][keyColIndex].origin.slice();\r\n        keyOrigin.push(originToAdd);\r\n        tableData[i][colIndex].origin = keyOrigin;\r\n        // console.log(keyOrigin)\r\n\r\n        // Now, if curColumnArray has length longer than one, we want to set hasMultiple to true\r\n        // We also create an extra attribute for the current tableData cell, called dataArray, whose max length is maxNeighbourCount.\r\n        if (curColumnArray.length > 1) {\r\n          hasMultiple = true;\r\n          let lastIndex = Math.min(curColumnArray.length, maxNeighbourCount);\r\n          tableData[i][colIndex].dataArray = curColumnArray.slice(1, lastIndex);\r\n        } \r\n      }\r\n    }\r\n    // Now, we are done with updating tableData.\r\n    // We want to update tableHeader as well.\r\n    tableHeader[colIndex] = neighbourArray;\r\n\r\n    // In the third part of the code, We start setting up the content for the Action Panel.\r\n\r\n    // First thing we want to do is to update the recommendArray: \r\n    // We want to remove the recommendation just added from the recommendArray\r\n    let recommendArray = _.cloneDeep(this.state.curActionInfo.recommendArray)\r\n    let curRecommendation = neighbourArray[0];\r\n    let sliceIndex = -1;\r\n\r\n    // This for loop checks which index we want to remove\r\n    for (let i = 0; i < recommendArray.length; ++i) {\r\n      if (recommendArray[i].value === curRecommendation.value && recommendArray[i].type === curRecommendation.type) {\r\n        sliceIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // console.log(sliceIndex);\r\n    // console.log(curRecommendation);\r\n    // console.log(recommendArray);\r\n    \r\n    // This if condition removes the found element\r\n    if (sliceIndex !== -1) {\r\n      recommendArray.splice(sliceIndex, 1);\r\n    }\r\n\r\n    // tempObj stores the information passed to ActionPanel\r\n    let tempObj = {};\r\n    // console.log(this.state.curActionInfo);\r\n    if (hasMultiple === true && recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"sameNeighbourAndStartRecommend\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n      tempObj[\"recommendArray\"] = recommendArray;\r\n    }\r\n    else if (hasMultiple === false && recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"showStartRecommend\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"recommendArray\"] = recommendArray;\r\n    }\r\n    else if (hasMultiple === true) {\r\n      tempObj[\"task\"] = \"populateSameNeighbour\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n    }\r\n    else {\r\n      tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    }\r\n\r\n    // console.log(tableData);\r\n    // console.log(tableHeader);\r\n    // console.log(selectedClassAnnotation);\r\n    // console.log(keyColIndex);\r\n    // console.log(tempObj);\r\n\r\n    // Lastly, we add support for undo, and set the states\r\n    let lastAction = \"populateStartRecommend\";\r\n    let prevState =\r\n      {\r\n        \"tableData\": this.state.tableData,\r\n        \"tableHeader\": this.state.tableHeader,\r\n        \"curActionInfo\": this.state.curActionInfo,\r\n        \"keyColIndex\": this.state.keyColIndex,\r\n        \"selectedClassAnnotation\": this.state.selectedClassAnnotation,\r\n        \"tabIndex\": this.state.tabIndex,\r\n        \"previewColIndex\": this.state.previewColIndex,\r\n      } \r\n\r\n    this.setState({\r\n      tableData: tableData,\r\n      tableHeader: tableHeader,\r\n      selectedClassAnnotation: selectedClassAnnotation,\r\n      keyColIndex: keyColIndex,\r\n      curActionInfo: tempObj,\r\n      tabIndex: 0,\r\n      previewColIndex: -1,\r\n      prevState: prevState,\r\n      lastAction: lastAction,\r\n    })\r\n  }\r\n\r\n  // The following function adds a new column to the table, to the right of the selected column.\r\n  // In here, let's also set tabIndex to 0.\r\n\r\n  contextAddColumn(e, colIndex) {\r\n    const rowNum = this.state.tableData.length;\r\n    const colNum = this.state.tableData[0].length;\r\n\r\n    // we first take care of table data's addition\r\n    let tableData = [];\r\n    for (let i = 0; i < rowNum; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < colIndex + 1; ++j) {\r\n        tempRow.push(this.state.tableData[i][j]);\r\n      }\r\n      // we add in one column of empty data\r\n      tempRow.push({ data: \"\", origin: [] });\r\n      for (let k = colIndex + 1; k < colNum; ++k) {\r\n        tempRow.push(this.state.tableData[i][k]);\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n\r\n    // we now take care of tabler header, and selectedClassAnnotation's addition\r\n    let tableHeader = [];\r\n    for (let j = 0; j < colIndex + 1; ++j) {\r\n      tableHeader.push(this.state.tableHeader[j]);\r\n    }\r\n    tableHeader.push([]);\r\n    for (let k = colIndex + 1; k < colNum; ++k) {\r\n      tableHeader.push(this.state.tableHeader[k]);\r\n    }\r\n\r\n    // we now take care of selectedClassAnnotation\r\n    let selectedClassAnnotation = [];\r\n    for (let j = 0; j < colIndex; ++j) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[j]);\r\n    }\r\n    selectedClassAnnotation.push([]);\r\n    for (let k = colIndex; k < colNum-1; ++k) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[k]);\r\n    }\r\n\r\n    // If colIndex is less than keyColIndex, we need to increase keyColIndex by 1\r\n    let keyColIndex = this.state.keyColIndex;\r\n    if (colIndex < keyColIndex) {\r\n      ++keyColIndex;\r\n    }\r\n\r\n    // console.log(this.state.selectedClassAnnotation);\r\n    // console.log(tableHeader);\r\n\r\n    // Support for undo: \r\n    let lastAction = \"contextAddColumn\";\r\n    let prevState = \r\n        {\r\n          \"tableData\": this.state.tableData,\r\n          \"tableHeader\": this.state.tableHeader,\r\n          \"curActionInfo\": this.state.curActionInfo,\r\n          \"keyColIndex\": this.state.keyColIndex,\r\n          \"selectedClassAnnotation\": this.state.selectedClassAnnotation,\r\n          \"tabIndex\": this.state.tabIndex,\r\n          \"previewColIndex\": this.state.previewColIndex,\r\n        };\r\n\r\n    this.setState({\r\n      tableData: tableData,\r\n      tableHeader: tableHeader,\r\n      curActionInfo: {\"task\":\"afterPopulateColumn\"},\r\n      keyColIndex: keyColIndex,\r\n      selectedClassAnnotation: selectedClassAnnotation,\r\n      tabIndex: 0, // we want to set the currently active tab to be wrangling actions\r\n      previewColIndex: -1, // we want to set the preview column index to -1\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    });\r\n  }\r\n  \r\n  // The following function handles the deletion of a selected column.\r\n  // This function should be largely similar to contextAddColumn\r\n\r\n  contextDeleteColumn(e, colIndex) {\r\n    // console.log(\"This is the column we are trying to delete \"+colIndex);\r\n\r\n    // We disable the deletion of the search column\r\n    if (colIndex === this.state.keyColIndex) {\r\n      alert(\"The current column is the search column.\\n\\nPlease set another search column before deleting the current column.\");\r\n    }\r\n\r\n    // We also disable the deletion of the first column\r\n    else if (colIndex === 0) {\r\n      alert(\"Deleting the first column causes unexpected behavior.\\n\\nPlease do not delete the first column.\");\r\n    }\r\n\r\n    // Else, we can proceed to deletion.\r\n    else {\r\n      // We handle tableData, tableHeader, optionsMap, and selectedClassAnnotation's deletion\r\n      let tableData = _.cloneDeep(this.state.tableData);\r\n      let tableHeader = this.state.tableHeader.slice();\r\n      let optionsMap = this.state.optionsMap.slice();\r\n      let selectedClassAnnotation = this.state.selectedClassAnnotation.slice();\r\n\r\n      // tableData\r\n      for (let i = 0; i < tableData.length; ++i) {\r\n        tableData[i].splice(colIndex, 1);\r\n      }\r\n      // tableHeader, optionsMap, and selectedClassAnnotation\r\n      tableHeader.splice(colIndex, 1);\r\n      optionsMap.splice(colIndex, 1);\r\n      if (colIndex > 0) {\r\n        selectedClassAnnotation.splice(colIndex-1, 1);\r\n      }\r\n      // If colIndex is less than keyColIndex, we need to decrease keyColIndex by 1, if keyColIndex > 0\r\n      let keyColIndex = this.state.keyColIndex;\r\n      if (colIndex < keyColIndex) {\r\n        --keyColIndex;\r\n      }\r\n\r\n      // When we are deleting a column, we do not necessarily want to go to tab 0.\r\n      // However, if we are in tab 1, we want to toggle off all property neighbours\r\n      let propertyNeighbours = _.cloneDeep(this.state.propertyNeighbours);\r\n      if (this.state.tabIndex === 1) {\r\n        for (let i = 0; i < propertyNeighbours.length; ++i) {\r\n          propertyNeighbours[i].isOpen = false;\r\n        }\r\n      }\r\n\r\n      // Support for undo: \r\n      let lastAction = \"contextDeleteColumn\";\r\n      let prevState = \r\n          {\r\n            \"tableData\": this.state.tableData,\r\n            \"tableHeader\": this.state.tableHeader,\r\n            \"selectedClassAnnotation\": this.state.selectedClassAnnotation,\r\n            \"keyColIndex\": this.state.keyColIndex,\r\n            \"previewColIndex\": this.state.previewColIndex,\r\n            \"propertyNeighbours\": this.state.propertyNeighbours,\r\n            \"curActionInfo\": this.state.curActionInfo,\r\n          };\r\n\r\n      this.setState({\r\n        tableData: tableData,\r\n        tableHeader: tableHeader,\r\n        selectedClassAnnotation: selectedClassAnnotation,\r\n        keyColIndex: keyColIndex,\r\n        previewColIndex: -1, // we want to set the preview column index to -1\r\n        propertyNeighbours: propertyNeighbours,\r\n        curActionInfo: {\"task\":\"afterPopulateColumn\"},\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      });\r\n    }\r\n  }\r\n\r\n  // The following function handles the sorting of a column from context menu.\r\n  // It is a prototype. Needs to be refined in the future.\r\n\r\n  contextSortColumn(e, colIndex, order) {\r\n    // console.log(\"The column we are sorting is \"+colIndex);\r\n    document.body.classList.add('waiting');\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n\r\n    // We first loop through this column to determine if it's a numeric column or a string column\r\n    let numericCol = true;\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // We only care about entries that are not N/A\r\n      if (tableData[i][colIndex].data !== \"N/A\") {\r\n        if (isNaN(Number(tableData[i][colIndex].data))) {\r\n          numericCol = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // In this case we are sorting a numerical column\r\n    if (numericCol) {\r\n      tableData.sort(function (a, b) {\r\n        let aValue = a[colIndex].data;\r\n        let bValue = b[colIndex].data;\r\n        // We want to put all N/A's at the bottom\r\n        if (aValue === \"N/A\") {\r\n          return 1;\r\n        }\r\n        else if (bValue === \"N/A\") {\r\n          return -1;\r\n        } \r\n        // Else, we sort by the given order.\r\n        else {\r\n          if (order === \"ascending\") {\r\n            return Number(aValue) - Number(bValue);\r\n          }\r\n          else {\r\n            return Number(bValue) - Number(aValue);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // In this case we are sorting a string-based column\r\n    else {\r\n      tableData.sort(function (a, b) {\r\n        let aValue = a[colIndex].data;\r\n        let bValue = b[colIndex].data;\r\n        // We want to put all N/A's at the bottom\r\n        if (aValue === \"N/A\") {\r\n          return 1;\r\n        }\r\n        else if (bValue === \"N/A\") {\r\n          return -1;\r\n        } \r\n        // Else, we sort by the given order.\r\n        else {\r\n          if (order === \"ascending\") {\r\n            return aValue < bValue ? -1 : 1;\r\n          }\r\n          else {\r\n            return aValue < bValue ? 1 : -1;\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // console.log(\"Table Data is: \");\r\n    // console.log(tableData);\r\n    // console.log(\"Search entry is \");\r\n    // console.log(searchEntry);\r\n\r\n    // console.log(\"Table Data is: \");\r\n    // console.log(tableData);\r\n    // console.log(\"Search entry is \");\r\n    // console.log(searchEntry);\r\n\r\n    // We need a bugfix here: since tableData is reordered, firstColSelection now do not have the correct data anymore.\r\n    // We have to update firstColSelection to include the correct data.\r\n    let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", this.state.keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", this.state.keyColIndex);\r\n    allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      document.body.classList.remove('waiting');\r\n\r\n      // Support for undo: \r\n      let lastAction = \"contextSortColumn\";\r\n      let prevState = \r\n          {\r\n            \"tableData\": this.state.tableData,\r\n            \"firstDegNeighbours\": this.state.firstDegNeighbours,\r\n            \"previewColIndex\": this.state.previewColIndex,\r\n          };\r\n\r\n      this.setState({\r\n        tableData: tableData,\r\n        firstDegNeighbours: firstDegNeighbours,\r\n        previewColIndex: -1,\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      });\r\n    })\r\n    })\r\n  }\r\n\r\n  // The following function dedups the selected column.\r\n  // Note: this function has to make modifications to both firstDegNeighbours and keyColNeighbours\r\n\r\n  contextDedupColumn(e, colIndex) {\r\n    document.body.classList.add('waiting');\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    // console.log(colIndex);\r\n    // console.log(tableData);\r\n\r\n    // We simply dedup this column by calling the uniqBy function from the lodash library\r\n    tableData = _.uniqBy(tableData, function(x) {return x[colIndex].data;});\r\n    // console.log(this.state.tableData);\r\n    // console.log(tableData);\r\n\r\n    // Now we deal with firstDegNeighbours and keyColNeighbours' updates\r\n    // Since we are changing the number of rows, we need to call updateNeighbourInfo\r\n    // Note: the colIndex we give to getNeighbourPromise should be this.state.keyColIndex\r\n    let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", this.state.keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", this.state.keyColIndex);\r\n    allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      document.body.classList.remove('waiting');\r\n\r\n      // Support for undo:\r\n      let lastAction = \"contextDedupColumn\";\r\n      let prevState = \r\n        {\r\n          \"tableData\": this.state.tableData,\r\n          \"keyColNeighbours\": this.state.keyColNeighbours,\r\n          \"firstDegNeighbours\": this.state.firstDegNeighbours,\r\n          \"tabIndex\": this.state.tabIndex,\r\n          \"previewColIndex\": this.state.previewColIndex,\r\n        }\r\n\r\n      this.setState({\r\n        tableData: tableData,\r\n        keyColNeighbours: keyColNeighbours,\r\n        firstDegNeighbours: firstDegNeighbours,\r\n        tabIndex: 0,\r\n        previewColIndex: -1,\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      })\r\n    })\r\n    })\r\n  }\r\n\r\n  // This function handles click event on the filter icon.\r\n  // We want to let the Action Panel display 4 different filtering methods:\r\n  // 1) Sort ascending\r\n  // 2) Sort descending\r\n  // 3) Filter\r\n  // 4) Dedup\r\n\r\n  showFilterMethods(e, colIndex) {\r\n    // console.log(\"Selected column is \"+colIndex);\r\n\r\n    // We just need to pass on the colIndex\r\n    let tempObj = {};\r\n    tempObj[\"task\"] = \"showFilterMethods\";\r\n    tempObj[\"colIndex\"] = colIndex;\r\n    \r\n    this.setState({\r\n      curActionInfo: tempObj,\r\n      tabIndex: 0, // we also want to set the currentlly active tab index to 0\r\n      previewColIndex: -1, // we also want to set preview column index to -1 (clear previews)\r\n    })\r\n  }\r\n\r\n  // The following functions sets the selected column to be the search column.\r\n\r\n  contextSetColumn(e, colIndex) {\r\n\r\n    // console.log(\"Col index of search cell is \"+colIndex);\r\n\r\n    // Let's do a preliminary check here to make sure that users do not set empty columns as search columns\r\n    let colEmpty = true;\r\n    for (let i = 0; i < this.state.tableData.length; ++i) {\r\n      if (this.state.tableData[i][colIndex].data !== \"\") {\r\n        colEmpty = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // We give users an alert if they try to set an empty columns as the search column\r\n    if (colEmpty === true) {\r\n      alert(\"This column is currently empty. Try set the data for this column before setting it as the search column.\");\r\n    }\r\n    else {\r\n      document.body.classList.add('waiting');\r\n\r\n      // Code here should largely be similar to what we have in populateKeyColumn\r\n\r\n      let tableData = _.cloneDeep(this.state.tableData);\r\n\r\n      // We need to find neighbours of a column.\r\n      // We need to use tableData to ask more queries (number of queries is equal to tableData.length)\r\n      let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", colIndex);\r\n      let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", colIndex);\r\n\r\n      allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n      allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n        // We call updateNeighbourInfo here because we are changing the rows\r\n        let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n        let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n        let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n        // Lastly, we set up the information for the action panel\r\n        let tempObj = {};\r\n        tempObj[\"task\"] = \"showStartRecommend\";\r\n        tempObj[\"colIndex\"] = colIndex;\r\n        tempObj[\"recommendArray\"] = this.createStartRecommend(keyColNeighbours);\r\n\r\n        document.body.classList.remove('waiting');\r\n\r\n        // Support for undo: \r\n        let lastAction = \"contextSetColumn\";\r\n        let prevState = \r\n            {\r\n              \"keyColIndex\": this.state.keyColIndex,\r\n              \"keyColNeighbours\": this.state.keyColNeighbours,\r\n              \"firstDegNeighbours\": this.state.firstDegNeighbours,\r\n              \"curActionInfo\": this.state.curActionInfo,\r\n              \"tabIndex\": this.state.tabIndex,\r\n              \"previewColIndex\": this.state.previewColIndex,\r\n            };\r\n\r\n        this.setState({\r\n          keyColIndex: colIndex,\r\n          keyColNeighbours: keyColNeighbours,\r\n          firstDegNeighbours: firstDegNeighbours,\r\n          curActionInfo: tempObj,\r\n          tabIndex: 0, // we want to set the currently active tab to be wrangling actions\r\n          previewColIndex: -1,\r\n          lastAction: lastAction,\r\n          prevState: prevState,\r\n        });\r\n      })\r\n      })\r\n    }\r\n  }\r\n\r\n  // // The following function displays the origin of a cell in the Action Panel.\r\n\r\n  // contextCellOrigin(e, rowIndex, colIndex) {\r\n  //   // To get the origin of a cell, we simply returns its \"origin field\"\r\n  //   // The trick is to set the origin field correctly in previous functions\r\n  //   // The place to do that should be in the two populating columns\r\n\r\n  //   let cellSelected = this.state.tableData[rowIndex][colIndex];\r\n\r\n  //   let originElement = [];\r\n  //   for (let i = 0; i < cellSelected.origin.length; ++i) {\r\n  //     originElement.push(<p>{niceRender(cellSelected.origin[i])}</p>);\r\n  //   }\r\n\r\n  //   // This origin literal correctly contains the cell Origin we want to display\r\n  //   // Now we just need to show it in the ActionPanel\r\n  //   let tempObj = {};\r\n  //   tempObj[\"task\"] = \"contextCellOrigin\";\r\n  //   tempObj[\"origin\"] = originElement;\r\n\r\n  //   // Support for undo: \r\n  //   let lastAction = \"contextCellOrigin\";\r\n  //   let prevState = \r\n  //       {\r\n  //         \"curActionInfo\": this.state.curActionInfo,\r\n  //         \"tabIndex\": this.state.tabIndex,\r\n  //       };\r\n    \r\n  //   this.setState({\r\n  //     curActionInfo: tempObj,\r\n  //     tabIndex: 0, // we want to set the currently active tab to be wrangling actions\r\n  //     lastAction: lastAction,\r\n  //     prevState: prevState,\r\n  //   });\r\n  // }\r\n\r\n  // This function has three functionalities: \r\n  // Show the selected cell's origin, show the selected cell's preview, and update the bottom iframe's URL\r\n\r\n  originPreviewPage(e, rowIndex, colIndex) {\r\n    document.body.classList.add('waiting');\r\n    // console.log(\"Row index is \"+rowIndex);\r\n    // console.log(\"Col index is \"+colIndex);\r\n\r\n    // This first part deals with preview\r\n\r\n    // Let's first run queries to fetch the dbp neighbours and dbo neighbours for the selected cell (withe some filtering)\r\n    // In here, we need both the ?p and ?o. This is different from before.\r\n\r\n    let promiseArray = [];\r\n\r\n    // Below is the first query we will make. In here we are using the tableCell as SUBJECT\r\n\r\n    // select ?p ?o\r\n    // where {\r\n    // dbr:Barack_Obama ?p ?o.\r\n    // }\r\n\r\n    let prefixURLOne = \r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURLOne = \r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    let queryBodyOne = \r\n      \"select+%3Fp+%3Fo%0D%0Awhere+%7B%0D%0Adbr%3A\" + \r\n      regexReplace(this.state.tableData[rowIndex][colIndex].data) +\r\n      \"+%3Fp+%3Fo.%0D%0A%7D&\";\r\n    let queryURLOne = prefixURLOne + queryBodyOne + suffixURLOne;\r\n    let otherColPromiseSubject = fetchJSON(queryURLOne);\r\n    promiseArray.push(otherColPromiseSubject);\r\n\r\n    // Below is the second query we will make. In here we are using the tableCell as OBJECT.\r\n\r\n    // select ?p ?o\r\n    // where {\r\n    // ?o ?p dbr:Barack_Obama.\r\n    // }\r\n\r\n    let prefixURLTwo = \r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURLTwo = \r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    let queryBodyTwo =\r\n      \"select+%3Fp+%3Fo%0D%0Awhere+%7B%0D%0A%3Fo+%3Fp+dbr%3A\" +\r\n      regexReplace(this.state.tableData[rowIndex][colIndex].data) +\r\n      \".%0D%0A%7D&\";\r\n    let queryURLTwo = prefixURLTwo + queryBodyTwo + suffixURLTwo;\r\n    let otherColPromiseObject = fetchJSON(queryURLTwo);\r\n    promiseArray.push(otherColPromiseObject);\r\n\r\n    allPromiseReady(promiseArray).then((values) => {\r\n      // console.log(values[0]);\r\n      // console.log(values[1]);\r\n      // let previewInfoArray = [];\r\n      let subjectInfoArray = \r\n        updatePreviewInfo(\r\n          values[0].results.bindings,\r\n          \"subject\"\r\n        );\r\n      let objectInfoArray = \r\n        updatePreviewInfo(\r\n          values[1].results.bindings,\r\n          \"object\"\r\n        );\r\n      // console.log(subjectInfoArray);\r\n      // console.log(objectInfoArray);\r\n\r\n      // // Modified on August 28th: when we double click a cell in the first column, and the first column is the current search column\r\n      // // We want to update firstColSelection and firstColChecked as well\r\n      // let firstColSelection = _.cloneDeep(this.state.firstColSelection);\r\n      // let firstColChecked = _.cloneDeep(this.state.firstColChecked);\r\n\r\n      // if (this.state.keyColIndex === 0 && colIndex === 0) {\r\n      //   // We first update firstColSelection\r\n      //   console.log(values[0].results.bindings);\r\n      //   firstColSelection = updateFirstColSelection(values[0].results.bindings);\r\n      //   // We then update firstColChecked\r\n      //   firstColChecked = [];\r\n      //   for (let i = 0; i < firstColSelection.length; ++i) {\r\n      //     firstColChecked.push(false);\r\n      //   }\r\n      // }\r\n      \r\n      // Here is where we make the modifications: instead of passing information to Action Panel, let's store them as states\r\n      let previewInfoArray = subjectInfoArray.concat(objectInfoArray);\r\n      let previewInfoExpanded = [];\r\n      for (let i = 0; i < previewInfoArray.length; ++i) {\r\n        previewInfoExpanded.push(false);\r\n      }\r\n      let selectedCell = _.cloneDeep(this.state.tableData[rowIndex][colIndex]);\r\n      let iframeURL = \"https://en.wikipedia.org/wiki/\" + this.state.tableData[rowIndex][colIndex].data;\r\n\r\n      let tempObj = {};\r\n      tempObj[\"task\"] = \"originPreviewPage\";\r\n\r\n      // Support for undo: \r\n      document.body.classList.remove('waiting');\r\n      let lastAction = \"originPreviewPage\";\r\n      let prevState = \r\n          {\r\n            \"curActionInfo\": this.state.curActionInfo,\r\n            \"tabIndex\": this.state.tabIndex,\r\n            \"pageHidden\": this.state.pageHidden,\r\n            \"iframeURL\": this.state.iframeURL,\r\n            \"previewInfoArray\": this.state.previewInfoArray,\r\n            \"previewInfoExpanded\": this.state.previewInfoExpanded,\r\n            \"selectedCell\": this.state.selectedCell,\r\n            \"previewColIndex\": this.state.previewColIndex,\r\n            // \"firstColSelection\": this.state.firstColSelection,\r\n            // \"firstColChecked\": this.state.firstColChecked,\r\n          };\r\n      \r\n      this.setState({\r\n        curActionInfo: tempObj,\r\n        tabIndex: 0, // we want to set the currently active tab to be wrangling actions\r\n        previewColIndex: -1,\r\n        pageHidden: false,\r\n        iframeURL: iframeURL,\r\n        previewInfoArray: previewInfoArray,\r\n        previewInfoExpanded: previewInfoExpanded,\r\n        selectedCell: selectedCell,\r\n        // firstColSelection: firstColSelection, // updated on 9/13\r\n        // firstColChecked: firstColChecked, // updated on 9/13\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      });\r\n    });\r\n  }\r\n\r\n  toggleTable(e, index) {\r\n    let tableOpenList = this.state.tableOpenList.slice();\r\n    tableOpenList[index] = !tableOpenList[index];\r\n    // When we toggle on one table, we want to close all other tables\r\n    for (let i = 0; i < tableOpenList.length; ++i) {\r\n      if (i !== index) {\r\n        tableOpenList[i] = false;\r\n      }\r\n    }\r\n    this.setState({\r\n      tableOpenList: tableOpenList,\r\n    });\r\n  }\r\n\r\n  // The following function is a helper function for handleStartTable.\r\n\r\n  // It takes in 2 parameters:\r\n  // 1) tableDataExplore\r\n  // 2) selectedClassAnnotation\r\n\r\n  // It returns a Promise of an object with 5 properties:\r\n  // 1) keyColIndex\r\n  // 2) tableHeader\r\n  // 3) tableData\r\n  // 4) keyColNeighbours\r\n  // 5) optionsMap.\r\n\r\n  // This object contains all the information we needed for the Excel-style table.\r\n\r\n  getTableStates(tableDataExplore, selectedClassAnnotation) {\r\n    // We need to take care of keyColIndex, tableHeader, tableData, optionsMap, and keyColNeighbours\r\n\r\n    // tableDataExplore contains all the information we need to set the five states listed above\r\n    // We just need to make use of the \"data\" and \"origin\" attributes. rowSpan and colSpan have no impact here.\r\n    // Also, since we are not modifying tableDataExplore, we do not need to make a copy of it.\r\n\r\n    // First, let's deal with keyColIndex. \r\n    // We will use the first column such that it's class annotation is not [] or [\"Number\"] or [\"originURL\"]\r\n    // If no such column exists, we default it to the first column\r\n\r\n    // console.log(selectedClassAnnotation);\r\n\r\n    let keyColIndex = -1;\r\n    for (let i=0;i<selectedClassAnnotation.length;++i) {\r\n      if (selectedClassAnnotation[i].length > 0 \r\n          && !(selectedClassAnnotation[i].length === 1 && selectedClassAnnotation[i][0] === \"Number\")\r\n          && !(selectedClassAnnotation[i].length === 1 && selectedClassAnnotation[i][0] === \"originURL\")\r\n        ) {\r\n        keyColIndex = i+1; \r\n        break;\r\n      }\r\n    }\r\n    if (keyColIndex === -1) {\r\n      keyColIndex = 0;\r\n    }\r\n    // console.log(\"Key Column Index is: \");\r\n    // console.log(keyColIndex);\r\n\r\n    // Now, let's deal with tableHeader. Note: these tableHeaders only have value and label, no range or type\r\n    // Also note that since table headers can be multi-selects, each tableHeader element is in the form of a length one array\r\n    let tableHeader = [];\r\n    for (let j=0;j<tableDataExplore[0].length;++j) {\r\n      tableHeader.push(\r\n        [\r\n          {\"value\":tableDataExplore[0][j].data\r\n          ,\"label\":tableDataExplore[0][j].data}\r\n        ]\r\n      )\r\n    }\r\n    // console.log(\"Table header is: \");\r\n    // console.log(tableHeader);\r\n\r\n    // Now, let's deal with tableData. Wee need to handle both data and origin.\r\n    let tableData = [];\r\n    // console.log(tableDataExplore);\r\n    // This starts the loop for rows\r\n    for (let i=1;i<tableDataExplore.length;++i) {\r\n      let tempRow = [];\r\n      // This starts the loop for columns\r\n      let minLength = Math.min(tableDataExplore[i].length, tableHeader.length);\r\n      for (let j=0;j<minLength;++j) {\r\n        // First set the data\r\n        let data = tableDataExplore[i][j].data;\r\n        // Then set the origin\r\n        let origin = [];\r\n        let originText = tableDataExplore[i][j].origin+\": \"+tableHeader[j][0].value+\": \"+tableDataExplore[i][j].data;\r\n        origin.push(originText);\r\n        tempRow.push({\"data\":data,\"origin\":origin});\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n    // console.log(\"Table data is: \");\r\n    // console.log(tableData);\r\n\r\n    // Now, let's deal with keyColNeighbours and optionsMap\r\n    // Note: the following part should be similar to what we have in contextSetColumn\r\n\r\n    let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", keyColIndex);\r\n    return allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    return allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n      \r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      return Promise.resolve(\r\n        {\r\n          \"keyColIndex\":keyColIndex,\r\n          \"tableHeader\":tableHeader,\r\n          \"tableData\":tableData,\r\n          \"keyColNeighbours\":keyColNeighbours,\r\n          \"firstDegNeighbours\":firstDegNeighbours,\r\n        }\r\n      )\r\n    })\r\n    })\r\n  }\r\n\r\n  // The following function handles the selection of table.\r\n\r\n  handleStartTable(e, tableIndex) {\r\n    document.body.classList.add('waiting');\r\n    \r\n    // We need to let table panel display the selected table\r\n    // And we need to update the Action Panel to display the first degree properties of the original page\r\n    // We do a fetch request here (Sixth Query). It gets the property neighbours of the original page that are links, as well as dct:subject\r\n    // Lastly, we need to set usecaseSelected to \"startSubject\"\r\n\r\n    // First query gets the property neighbours\r\n    let queryPromise = [];\r\n    let prefixURLOne =\r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURLOne =\r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    let queryBodyOne =\r\n      \"SELECT+%3Fp+%3Fo%0D%0AWHERE+%7B%0D%0A++++++dbr%3A\" +\r\n      urlReplace(decodeURIComponent(this.state.urlPasted.slice(30))) +\r\n      \"+%3Fp+%3Fo.%0D%0A++++++BIND%28STR%28%3Fp%29+AS+%3FpString+%29.%0D%0A++++++FILTER%28isIRI%28%3Fo%29+%26%26+regex%28%3FpString%2C%22property%22%2C%22i%22%29+%26%26+%28%21regex%28%3FpString%2C%22text%22%2C%22i%22%29%29%29.%0D%0A%7D%0D%0A&\";\r\n    let queryURLOne = prefixURLOne + queryBodyOne + suffixURLOne;\r\n    let queryOne = fetchJSON(queryURLOne);\r\n    queryPromise.push(queryOne);\r\n\r\n    // Second query gets the dct:subject neighbours\r\n    let prefixURLTwo =\r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURLTwo =\r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    let queryBodyTwo =\r\n      \"SELECT+%3Fo%0D%0AWHERE+%7B%0D%0A++++++dbr%3A\" +\r\n      urlReplace(decodeURIComponent(this.state.urlPasted.slice(30))) +\r\n      \"+dct%3Asubject+%3Fo%0D%0A%7D&\";\r\n    let queryURLTwo = prefixURLTwo + queryBodyTwo + suffixURLTwo;\r\n    let queryTwo = fetchJSON(queryURLTwo);\r\n    queryPromise.push(queryTwo);\r\n\r\n    // Third query here should get the class annotations\r\n    queryPromise.push(\r\n      findClassAnnotation(this.state.originTableArray[tableIndex])\r\n    );\r\n\r\n    // now we process the query results\r\n    allPromiseReady(queryPromise).then((queryResults) => {\r\n      // console.log(queryResults[0].results.bindings);\r\n      // console.log(queryResults[1].results.bindings);\r\n      // console.log(queryResults[2]);\r\n      let selectedClassAnnotation = queryResults[2];\r\n      console.log(selectedClassAnnotation);\r\n\r\n      // First we fetch the property neighbours\r\n      // Let's also do some prefetching at this stage: let's remove the propertyNeighbours with too many siblings (150)\r\n      // and remove the propertyNeighbours with only one child (aka the originally pasted page)\r\n\r\n      let propertyNeighboursPO = [];\r\n      let promiseArray = [];\r\n      let bindingArray = [];\r\n\r\n      // The part below deals with the property neighbours\r\n      bindingArray = queryResults[0].results.bindings;\r\n      for (let i = 0; i < bindingArray.length; ++i) {\r\n        let predicate = bindingArray[i].p.value.slice(28);\r\n        // console.log(\"Predicate is \"+predicate);\r\n        let object = bindingArray[i].o.value.slice(28);\r\n        // console.log(\"Object is \"+object);\r\n        // If object includes some weird literal values, we replace it with \"NONEXISTING\"\r\n        if (object.includes(\"/\")) {\r\n          object = \"NONEXISTING\";\r\n        }\r\n        let prefixURL =\r\n          \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n        let suffixURL =\r\n          \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n        let queryBody =\r\n          \"SELECT+%3Fs+%0D%0AWHERE+%7B%0D%0A%09%3Fs+dbp%3A\" +\r\n          regexReplace(predicate) +\r\n          \"+dbr%3A\" +\r\n          regexReplace(object) +\r\n          \"%0D%0A%7D%0D%0A&\";\r\n        let queryURL = prefixURL + queryBody + suffixURL;\r\n        let curPromise = fetchJSON(queryURL);\r\n        propertyNeighboursPO.push({ predicate: predicate, object: object });\r\n        promiseArray.push(curPromise);\r\n      }\r\n\r\n      // The part below deals with the dct:subject neighbours\r\n      bindingArray = queryResults[1].results.bindings;\r\n      for (let i = 0; i < bindingArray.length; ++i) {\r\n        let object = bindingArray[i].o.value.slice(37);\r\n        let prefixURL =\r\n          \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n        let suffixURL =\r\n          \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n        let queryBody =\r\n          \"SELECT+%3Fs%0D%0AWHERE+%7B%0D%0A++++++%3Fs+dct%3Asubject+dbc%3A\" +\r\n          regexReplace(object) +\r\n          \"%0D%0A%7D&\";\r\n        let queryURL = prefixURL + queryBody + suffixURL;\r\n        let curPromise = fetchJSON(queryURL);\r\n        propertyNeighboursPO.push({ predicate: \"subject\", object: object });\r\n        promiseArray.push(curPromise);\r\n      }\r\n\r\n      // The part below processes all the siblings and remove neighbours with too many or too few siblings\r\n\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        let propertyNeighbours = [];\r\n        let urlOrigin = decodeURIComponent(this.state.urlPasted.slice(30));\r\n        // console.log(urlOrigin);\r\n        for (let i = 0; i < values.length; ++i) {\r\n          let curSiblingArray = values[i].results.bindings;\r\n          // Note, this 150 below should also be adjustable by users\r\n          if (curSiblingArray.length > 1 && curSiblingArray.length < 150) {\r\n            let siblingArray = [];\r\n            for (let i = 0; i < curSiblingArray.length; ++i) {\r\n              let siblingName = curSiblingArray[i].s.value.slice(28);\r\n              siblingArray.push({\r\n                isOpen: false,\r\n                name: siblingName,\r\n                tableArray: [],\r\n              });\r\n            }\r\n            // console.log(siblingArray);\r\n            propertyNeighbours.push({\r\n              predicate: propertyNeighboursPO[i].predicate,\r\n              object: propertyNeighboursPO[i].object,\r\n              isOpen: false,\r\n              siblingArray: siblingArray,\r\n            });\r\n          }\r\n        }\r\n        // we do a rudimentary ranking here: sort the property neighbours by the length of siblingArray\r\n        propertyNeighbours.sort((a, b) =>\r\n          a.siblingArray.length < b.siblingArray.length ? 1 : -1\r\n        );\r\n        // Then we call the parse table helper function to update the tableDataExplore\r\n        let selectedTableHTML = this.state.originTableArray[tableIndex];\r\n        // setTableFromHTML is the function that prepares the data for tableDataExplore\r\n        let tableDataExplore = setTableFromHTML(selectedTableHTML, urlOrigin);\r\n\r\n        // Modeless Change: We need to call the helper function this.getTableStates.\r\n        // By processing the tableDataExplore to get the right states for the Excel-style table.\r\n\r\n        // To do this, we need to call this.getTableStates here. We just need to pass in tableDataExplore and selectedClassAnnotation \r\n        let statePromise = [this.getTableStates(tableDataExplore, selectedClassAnnotation)];\r\n        allPromiseReady(statePromise).then((values) => {\r\n          let stateInfo = values[0];\r\n          // console.log(stateInfo);\r\n\r\n          // Lastly, we set up the information for the action panel\r\n          let tempObj = {};\r\n          tempObj[\"task\"] = \"showStartRecommend\";\r\n          tempObj[\"colIndex\"] = stateInfo.keyColIndex;\r\n          tempObj[\"recommendArray\"] = this.createStartRecommend(stateInfo.keyColNeighbours);\r\n\r\n          document.body.classList.remove('waiting');\r\n          // Support for undo: \r\n          let lastAction = \"handleStartTable\";\r\n          let prevState = \r\n              {\r\n                \"firstColFilled\": this.state.firstColFilled,\r\n                \"selectedTableIndex\": this.state.selectedTableIndex,\r\n                \"propertyNeighbours\": this.state.propertyNeighbours,\r\n                \"curActionInfo\": this.state.curActionInfo,\r\n                \"selectedClassAnnotation\": this.state.selectedClassAnnotation,\r\n                \"keyColIndex\": this.state.keyColIndex,\r\n                \"keyColNeighbours\": this.state.keyColNeighbours,\r\n                \"firstDegNeighbours\": this.state.firstDegNeighbours,\r\n                \"tableData\": this.state.tableData,\r\n                \"tableHeader\": this.state.tableHeader,\r\n                \"usecaseSelected\": this.state.usecaseSelected,\r\n                \"tabIndex\": this.state.tabIndex,\r\n              };\r\n\r\n          this.setState({\r\n            firstColFilled: true,\r\n            selectedTableIndex: tableIndex,\r\n            propertyNeighbours: propertyNeighbours,\r\n            // curActionInfo: {\"task\":\"afterPopulateColumn\"},\r\n            curActionInfo: tempObj, // Changed on Aug 20th\r\n            selectedClassAnnotation: selectedClassAnnotation,\r\n            keyColIndex: stateInfo.keyColIndex,\r\n            keyColNeighbours: stateInfo.keyColNeighbours,\r\n            firstDegNeighbours: stateInfo.firstDegNeighbours,\r\n            tableData: stateInfo.tableData,\r\n            tableHeader: stateInfo.tableHeader,\r\n            usecaseSelected: \"startTable\",\r\n            tabIndex: 1,\r\n            lastAction: lastAction,\r\n            prevState: prevState,\r\n          });\r\n        })\r\n      });\r\n    });\r\n  }\r\n\r\n  togglePropertyNeighbours(e, index) {\r\n    document.body.classList.add('waiting');\r\n    \r\n    // First let's do the toggling task\r\n    let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n    propertyNeighbours[index].isOpen = !propertyNeighbours[index].isOpen;\r\n\r\n    // we want to loop through all siblings if we are toggling a propertyNeighbour on\r\n    if (propertyNeighbours[index].isOpen === true) {\r\n      let bindingArray = propertyNeighbours[index].siblingArray;\r\n      let siblingArray = [];\r\n      let siblingNameArray = []; // this array keeps track of the sibling names\r\n      let promiseArray = [];\r\n      for (let i = 0; i < bindingArray.length; ++i) {\r\n        let siblingName = bindingArray[i].name;\r\n        let siblingURL = \"https://en.wikipedia.org/wiki/\" + siblingName;\r\n        let curPromise = fetchText(siblingURL);\r\n        promiseArray.push(curPromise);\r\n        siblingNameArray.push(siblingName);\r\n      }\r\n\r\n      // Since we only want to display siblings with useful tables, we do some checking here\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        // tableArrayPromise stores an array of promises that resolve to tableArray\r\n        let tableArrayPromise = [];\r\n        for (let i = 0; i < values.length; ++i) {\r\n          let pageHTML = values[i];\r\n          // This is a helper function that fetches useful tables from pageHTML\r\n          // console.log(\"The class annotation for the selected table is: \");\r\n          // console.log(this.state.selectedClassAnnotation);\r\n          tableArrayPromise.push(\r\n            findTableFromHTML(\r\n              this.state.tableHeader,\r\n              pageHTML,\r\n              this.state.selectedClassAnnotation,\r\n              this.state.semanticEnabled,\r\n              this.state.unionCutOff,\r\n              siblingNameArray[i]\r\n            )\r\n          );\r\n          // we potentially want to do something different here if urlOrigin === siblingNameArray[i]\r\n          // We only want to keep siblings that do have useful tables\r\n          // if (tableArray.length !== 0) {\r\n          // siblingArray.push({\"isOpen\":false,\"name\":siblingNameArray[i],\"tableArray\":tableArray});\r\n          // }\r\n        }\r\n        allPromiseReady(tableArrayPromise).then((tableArrayValues) => {\r\n          for (let i = 0; i < tableArrayValues.length; ++i) {\r\n            siblingArray.push({\r\n              isOpen: false,\r\n              name: siblingNameArray[i],\r\n              tableArray: tableArrayValues[i],\r\n            });\r\n          }\r\n          // This following line sorts the siblingArray\r\n          siblingArray.sort(function (a, b) {\r\n            let aTableLength = a.tableArray.length;\r\n            let bTableLength = b.tableArray.length;\r\n            let aName = a.name;\r\n            let bName = b.name;\r\n            if (aTableLength === bTableLength) {\r\n              return aName < bName ? -1 : aName > bName ? 1 : 0;\r\n            } else {\r\n              return aTableLength > bTableLength ? -1 : 1;\r\n            }\r\n          });\r\n          propertyNeighbours[index].siblingArray = siblingArray;\r\n          document.body.classList.remove('waiting');\r\n          this.setState({\r\n            propertyNeighbours: propertyNeighbours,\r\n          });\r\n        });\r\n      });\r\n    } else {\r\n      document.body.classList.remove('waiting');\r\n      this.setState({\r\n        propertyNeighbours: propertyNeighbours,\r\n      });\r\n    }\r\n  }\r\n\r\n  // The following function handles the toggling of a sibling URL\r\n\r\n  toggleSibling(e, firstIndex, secondIndex) {\r\n    // Handle the toggling task\r\n    // console.log(\"Here we start the sibling toggle\");\r\n    // console.log(\"The current property neighbour is \");\r\n    // console.log(\r\n    //   \"The current property neighbour is \",\r\n    //   this.state.propertyNeighbours.slice()\r\n    // );\r\n    let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n    // console.log(propertyNeighbours);\r\n    let selectedSibling =\r\n      propertyNeighbours[firstIndex].siblingArray[secondIndex];\r\n\r\n    // Note that if this sibling's tableArray is empty, we probably do not want to toggle it.\r\n    if (selectedSibling.tableArray.length === 0) {\r\n      // console.log(\"Selected sibling has no tables: \" + selectedSibling.name);\r\n      let iframeURL = \"https://en.wikipedia.org/wiki/\" + selectedSibling.name;\r\n      this.setState({\r\n        pageHidden: false,\r\n        iframeURL: iframeURL,\r\n      });\r\n    } else {\r\n      // if the sibling's tableArray is not empty, we want to toggle it\r\n      selectedSibling.isOpen = !selectedSibling.isOpen;\r\n      // console.log(\"Let's take a look at the current property neighbour\");\r\n      // console.log(propertyNeighbours[firstIndex]);\r\n      // if (propertyNeighbours[firstIndex].isOpen === false) {\r\n      // propertyNeighbours[firstIndex].isOpen = true;\r\n      // console.log(\"In here we should have fixed the problem.\");\r\n      // console.log(propertyNeighbours);\r\n      // }\r\n      // We also want to change the iframe displayed at the bottom if we are toggling a sibling open\r\n      if (selectedSibling.isOpen === true) {\r\n        // console.log(\"If we get here, then sibling page should be opened\");\r\n        let iframeURL = \"https://en.wikipedia.org/wiki/\" + selectedSibling.name;\r\n        // console.log(propertyNeighbours[firstIndex].isOpen);\r\n        propertyNeighbours[firstIndex].isOpen = true;\r\n        // console.log(propertyNeighbours[firstIndex]);\r\n        // console.log(propertyNeighbours[firstIndex].isOpen);\r\n        // console.log(\"First index is: \" + firstIndex);\r\n        // console.log(\"In here we should have fixed the problem.\");\r\n        // console.log(\"This is the property neighbour we will pass in\");\r\n        // console.log(propertyNeighbours);\r\n        this.setState({\r\n          propertyNeighbours: propertyNeighbours,\r\n          iframeURL: iframeURL,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          propertyNeighbours: propertyNeighbours,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // The following function handles the toggling of other table (that's the same as the selected table)\r\n\r\n  toggleOtherTable(e, firstIndex, secondIndex, thirdIndex) {\r\n    // First handle the toggling task\r\n    let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n    const selectedTable =\r\n      propertyNeighbours[firstIndex].siblingArray[secondIndex].tableArray[\r\n        thirdIndex\r\n      ];\r\n    // console.log(selectedTable.data);\r\n    selectedTable.isOpen = !selectedTable.isOpen;\r\n    this.setState({\r\n      propertyNeighbours: propertyNeighbours,\r\n    });\r\n  }\r\n\r\n  // The following funcion unions the table that user has selected to the table in the TablePanel\r\n  // by changing tableDataExplore\r\n\r\n  unionTable(firstIndex, secondIndex, otherTableHTML, colMapping) {\r\n    document.body.classList.add('waiting');\r\n    // First we create a copy of the current tableData\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    // console.log(tableData);\r\n\r\n    // Then we get the clean data and set the origin for the other table.\r\n    // We do so by calling setTableFromHTML, and setUnionData.\r\n    let otherTableOrigin = this.state.propertyNeighbours[firstIndex].siblingArray[secondIndex].name;\r\n    let otherTableData = setTableFromHTML(otherTableHTML, otherTableOrigin);\r\n    otherTableData = setUnionData(otherTableData);\r\n    // console.log(otherTableData);\r\n\r\n    // console.log(colMapping);\r\n\r\n    // Note: we have to create a copy of colMapping, otherwise we are modifying the reference\r\n    let tempMapping = colMapping.slice();\r\n    tableData = tableConcat(\r\n      tableData,\r\n      otherTableData,\r\n      tempMapping\r\n    );\r\n\r\n    // console.log(tableData);\r\n\r\n    // Now, since we are changing the number of rows, we need to call updateNeighbourInfo\r\n    // Note: the colIndex we give to getNeighbourPromise should be this.state.keyColIndex\r\n    let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", this.state.keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", this.state.keyColIndex);\r\n    allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      document.body.classList.remove('waiting');\r\n      // Suppport for undo.\r\n      let lastAction = \"unionTable\";\r\n      let prevState = \r\n          {\r\n            \"tableData\":this.state.tableData,\r\n            \"keyColNeighbours\":this.state.keyColNeighbours,\r\n            \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n            \"previewColIndex\": this.state.previewColIndex,\r\n          };\r\n      \r\n      this.setState({\r\n        tableData: tableData,\r\n        keyColNeighbours: keyColNeighbours,\r\n        firstDegNeighbours: firstDegNeighbours,\r\n        previewColIndex: -1,\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      })\r\n    })\r\n    })\r\n  }\r\n\r\n  // The following function unions all similar tables found under a sibling page with the selected table\r\n  unionPage(firstIndex, secondIndex) {\r\n    document.body.classList.add('waiting');\r\n    // First we create a copy of the current tableDataExplore\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    // We get the tableArray and name of the current sibling page\r\n    let tableArray = \r\n      this.state.propertyNeighbours[firstIndex].siblingArray[secondIndex].tableArray;\r\n    let otherTableOrigin = \r\n      this.state.propertyNeighbours[firstIndex].siblingArray[secondIndex].name;\r\n\r\n    for (let i = 0; i < tableArray.length; ++i) {\r\n      // We get the clean data for the current \"other table\"\r\n      let otherTableData = setTableFromHTML(\r\n        tableArray[i].data,\r\n        otherTableOrigin\r\n      );\r\n      // We fetch the header row now\r\n      let headerRow = otherTableData[0];\r\n      otherTableData = setUnionData(otherTableData);\r\n      // console.log(headerRow);\r\n      // console.log(this.state.tableHeader);\r\n\r\n      // Let's do some checking here: we do not want to union the same table with itself\r\n      let sameTable = false;\r\n      if (otherTableOrigin === decodeURIComponent(this.state.urlPasted.slice(30)) && headerRow.length === tableData[0].length) {\r\n        let diffColFound = false;\r\n        for (let m=0; m<headerRow.length; ++m) {\r\n          if (headerRow[m].data !== this.state.tableHeader[m].value) {\r\n            diffColFound = true;\r\n            break;\r\n          }\r\n        }\r\n        if (diffColFound === false) {\r\n          sameTable = true;\r\n        }\r\n      }\r\n      // We create a copy of the colMapping of the current \"other table\"\r\n      let tempMapping = tableArray[i].colMapping.slice();\r\n\r\n      // if sameTable is false, we can safely union the data\r\n      if (sameTable === false) {\r\n        tableData = tableConcat(\r\n          tableData,\r\n          otherTableData,\r\n          tempMapping\r\n        );\r\n      }\r\n    }\r\n    // Now, since we are changing the number of rows, we need to call updateNeighbourInfo\r\n    // Note: the colIndex we give to getNeighbourPromise should be this.state.keyColIndex\r\n    let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", this.state.keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", this.state.keyColIndex);\r\n    allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      document.body.classList.remove('waiting');\r\n      // Suppport for undo.\r\n      let lastAction = \"unionPage\";\r\n      let prevState = \r\n          {\r\n            \"tableData\":this.state.tableData,\r\n            \"keyColNeighbours\":this.state.keyColNeighbours,\r\n            \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n            \"previewColIndex\": this.state.previewColIndex,\r\n          };\r\n      \r\n      this.setState({\r\n        tableData: tableData,\r\n        keyColNeighbours: keyColNeighbours,\r\n        firstDegNeighbours: firstDegNeighbours,\r\n        previewColIndex: -1,\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      })\r\n    })\r\n    })\r\n  }\r\n\r\n  // The following function unions all similar tables found under a property(parent) neighbour with the selected table\r\n  // This is the highest level of union.\r\n\r\n  unionProperty(firstIndex) {\r\n    // First we create a copy of the current tableDataExplore\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n\r\n    // we get the siblingArray of the current property neighbour\r\n    let siblingArray = this.state.propertyNeighbours[firstIndex].siblingArray;\r\n\r\n    for (let i = 0; i < siblingArray.length; ++i) {\r\n      // We get the tableArray and name of the current sibling page\r\n      let tableArray = siblingArray[i].tableArray;\r\n      let otherTableOrigin = siblingArray[i].name;\r\n      // console.log(otherTableOrigin);\r\n      // If the current sibling has no tables that are unionable, we break out of the loop.\r\n      // Because siblingArray is sorted by the length of their tableArray\r\n      if (tableArray.length === 0) {\r\n        break;\r\n      }\r\n      // Else, we want to union all unionable tables from the current sibling page\r\n      else {\r\n        for (let j = 0; j < tableArray.length; ++j) {\r\n          // We get the clean data for the current \"other table\"\r\n          let otherTableData = setTableFromHTML(\r\n            tableArray[j].data,\r\n            otherTableOrigin\r\n          );\r\n          // We fetch the column header row\r\n          let headerRow = otherTableData[0];\r\n          otherTableData = setUnionData(otherTableData);\r\n          // Let's do some checking here: we do not want to union the same table with itself\r\n          let sameTable = false;\r\n          if (otherTableOrigin === decodeURIComponent(this.state.urlPasted.slice(30)) && headerRow.length === tableData[0].length) {\r\n            let diffColFound = false;\r\n            for (let m=0; m<headerRow.length; ++m) {\r\n              if (headerRow[m].data !== this.state.tableHeader[m].value) {\r\n                diffColFound = true;\r\n                break;\r\n              }\r\n            }\r\n            if (diffColFound === false) {\r\n              sameTable = true;\r\n            }\r\n          }\r\n          // We create a copy of the colMapping of the current \"oother table\"\r\n          let tempMapping = tableArray[j].colMapping.slice();\r\n\r\n          // if sameTable is false, we can safely union the data\r\n          if (sameTable === false) {\r\n            tableData = tableConcat(\r\n              tableData,\r\n              otherTableData,\r\n              tempMapping\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Support for undo: \r\n    let lastAction = \"unionProperty\";\r\n    let prevState = \r\n        {\r\n          \"tableData\":this.state.tableData,\r\n        };\r\n\r\n    this.setState({\r\n      tableData: tableData,\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    });\r\n  }\r\n\r\n  // This function handles the change of \"semanticEnabled\" setting\r\n\r\n  toggleSemantic(e) {\r\n    // we want to toggle off all the property neighbours in the action panel\r\n    // because changing semanticEnabled changes our search criteria\r\n    let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n    for (let i = 0; i < propertyNeighbours.length; ++i) {\r\n      propertyNeighbours[i].isOpen = false;\r\n    }\r\n\r\n    this.setState({\r\n      semanticEnabled: e.target.value,\r\n      propertyNeighbours: propertyNeighbours,\r\n    });\r\n  }\r\n\r\n  // This function handles the change of the unionCutoff percentage\r\n\r\n  unionCutOffChange(e) {\r\n    // we want to toggle off all the property neighbours in the action panel\r\n    // because changing union cutoff changes our search criteria\r\n    let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n    for (let i = 0; i < propertyNeighbours.length; ++i) {\r\n      propertyNeighbours[i].isOpen = false;\r\n    }\r\n    this.setState({\r\n      unionCutOff: e.target.value,\r\n      propertyNeighbours: propertyNeighbours,\r\n    });\r\n  }\r\n\r\n  // This function handles opening the filter for a particular column\r\n\r\n  openFilter(e, colIndex) {\r\n    // In this function, we want to set showFilter to true, and update dataAndChecked based on colIndex\r\n\r\n    let dataArray = [];\r\n    for (let i = 0; i < this.state.tableData.length; ++i) {\r\n      dataArray.push(this.state.tableData[i][colIndex].data);\r\n    }\r\n    dataArray = [...new Set(dataArray)];\r\n    // Let's sort this dataArray a bit: we put N/A at the beginning of the array\r\n    dataArray.sort(\r\n      function(a,b) { \r\n        return a === \"N/A\" ? -1 : b === \"N/A\" ? 1 : 0; \r\n      }\r\n    );\r\n\r\n    let dataAndChecked = [];\r\n    for (let i=0;i<dataArray.length;++i) {\r\n      dataAndChecked.push(\r\n        {\r\n          \"data\":dataArray[i],\r\n          \"checked\":true\r\n        }\r\n      )\r\n    }\r\n    // console.log(dataAndChecked);\r\n\r\n    this.setState({\r\n      dataAndChecked: dataAndChecked,\r\n      showFilter: true,\r\n      checkAll: true,   // we want to set checkAll to true whenever we open the filter modal\r\n      curFilterIndex: colIndex,\r\n    })\r\n  }\r\n\r\n  // This function handles cancelling the filter (so we close it).\r\n\r\n  cancelFilter(e) {\r\n    this.setState({\r\n      dataAndChecked: [],\r\n      showFilter: false,\r\n      curFilterIndex: -1,\r\n    })\r\n  }\r\n  \r\n\r\n  // This function handles toggling the data checkboxes in filter modal.\r\n\r\n  toggleChecked(e, checkIndex) {\r\n    let dataAndChecked = this.state.dataAndChecked;\r\n    dataAndChecked[checkIndex].checked = !dataAndChecked[checkIndex].checked;\r\n    this.setState({\r\n      dataAndChecked:dataAndChecked,\r\n    })\r\n  }\r\n\r\n  // This function handles toggling the Check/Uncheck all checkbox in filter modal.\r\n\r\n  toggleAll(e) {\r\n    let checkAll = this.state.checkAll;\r\n    let dataAndChecked = this.state.dataAndChecked;\r\n    checkAll = !checkAll;\r\n    // Now we loop through dataAndChecked to set all the checked attribute\r\n    for (let i = 0; i < dataAndChecked.length; ++i) {\r\n      dataAndChecked[i].checked = checkAll;\r\n    }\r\n    this.setState({\r\n      checkAll: checkAll,\r\n      dataAndChecked: dataAndChecked,\r\n    })\r\n  }\r\n\r\n  // This function handles applying the filter to tableData, based on dataAndChecked\r\n\r\n  applyFilter(e) {\r\n    // console.log(this.state.dataAndChecked);\r\n    // console.log(this.state.curFilterIndex);\r\n\r\n    // The following part are added for debugging purposes\r\n    let allFalse = true;\r\n    for (let i = 0; i < this.state.dataAndChecked.length; ++i) {\r\n      if (this.state.dataAndChecked[i].checked === true) {\r\n        allFalse = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // We do not want users to toggle every value off\r\n    if (allFalse === true) {\r\n      alert(\"Please do not remove every value from the table!\");\r\n    }\r\n\r\n    // This else clause contains the original function body\r\n    else {\r\n      let valuesToKeep = [];\r\n      for (let i=0;i<this.state.dataAndChecked.length;++i) {\r\n        if (this.state.dataAndChecked[i].checked === true) {\r\n          valuesToKeep.push(this.state.dataAndChecked[i].data);\r\n        }\r\n      }\r\n      let tableData = _.cloneDeep(this.state.tableData);\r\n      for (let i=0;i<tableData.length;++i) {\r\n        if (!valuesToKeep.includes(tableData[i][this.state.curFilterIndex].data)) {\r\n          tableData.splice(i,1);\r\n          --i;\r\n        }\r\n      }\r\n\r\n      // Now, since we are changing the number of rows, we need to call updateNeighbourInfo\r\n      // Note: the colIndex we give to getNeighbourPromise should be this.state.keyColIndex\r\n      let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", this.state.keyColIndex);\r\n      let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", this.state.keyColIndex);\r\n      allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n      allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n        // We call updateNeighbourInfo here because we are changing the rows\r\n        let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n        let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n        let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n        // Suppport for undo.\r\n        let lastAction = \"applyFilter\";\r\n        let prevState = \r\n            {\r\n              \"tableData\":this.state.tableData,\r\n              \"curActionInfo\":this.state.curActionInfo,\r\n              \"keyColNeighbours\":this.state.keyColNeighbours,\r\n              \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n              \"previewColIndex\": this.state.previewColIndex,\r\n            };\r\n        \r\n        this.setState({\r\n          dataAndChecked: [],\r\n          showFilter: false,\r\n          curFilterIndex: -1,\r\n          tableData: tableData,\r\n          keyColNeighbours: keyColNeighbours,\r\n          firstDegNeighbours: firstDegNeighbours,\r\n          previewColIndex: -1,\r\n          lastAction: lastAction,\r\n          prevState: prevState,\r\n        })\r\n      })\r\n      })\r\n    }\r\n  }\r\n\r\n  // This function hanles switching tabs\r\n\r\n  handleTabSwitch(index) {\r\n    // If we are switching to \"Union Table\" tab from \"Wrangling Actions\" tab, we want to toggle off all the property neighbours.\r\n    // Since we might have potentially changed the table in table panel, thus changed the search criteria as well\r\n    if (index === 1) {\r\n      let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n      for (let i = 0; i < propertyNeighbours.length; ++i) {\r\n        propertyNeighbours[i].isOpen = false;\r\n      }\r\n      this.setState({\r\n        propertyNeighbours: propertyNeighbours,\r\n        tabIndex: index,\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        tabIndex: index,\r\n      })\r\n    }\r\n  }\r\n\r\n  // This function undos the previous change that user has made to the result table in table panel\r\n\r\n  undoPreviousStep() {\r\n    // We first get which action we need to undo\r\n    let lastAction = this.state.lastAction;\r\n    // Then we fetch the previous state\r\n    let prevState = this.state.prevState;\r\n    // console.log(lastAction);\r\n    // console.log(prevState);\r\n\r\n    // Note, since we are allowing one step undo only, we set lastAction to \"\" everytime we run this function\r\n\r\n    // Case 1: Undo the ULR Paste. \r\n    // In this case we need to restore urlPasted, iframeURL, originTableArray, and tableOpenList\r\n    if (lastAction === \"handleURLPaste\") {\r\n      this.setState({\r\n        urlPasted: prevState.urlPasted,\r\n        iframeURL: prevState.iframeURL,\r\n        originTableArray: prevState.originTableArray,\r\n        tableOpenList: prevState.tableOpenList,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 2: Undo the selection of the task: startSubject.\r\n    // In this case we need to restore usecaseSelected, tableData, firstColSelection, firstColChecked, tabIndex, and curActionInfo\r\n\r\n    else if (lastAction === \"handleStartSubject\") {\r\n      this.setState({\r\n        usecaseSelected: prevState.usecaseSelected,\r\n        tableData: prevState.tableData,\r\n        firstColSelection: prevState.firstColSelection,\r\n        firstColChecked: prevState.firstColChecked,\r\n        tabIndex: prevState.tabIndex,\r\n        curActionInfo: prevState.curActionInfo,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 3: Undo the selection of the task: startTable.\r\n    // In this case we need to restore many states. See code below.\r\n\r\n    else if (lastAction === \"handleStartTable\") {\r\n      this.setState({\r\n        firstColFilled: prevState.firstColFilled,\r\n        selectedTableIndex: prevState.selectedTableIndex,\r\n        propertyNeighbours: prevState.propertyNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        keyColIndex: prevState.keyColIndex,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        usecaseSelected: prevState.usecaseSelected,\r\n        tabIndex: prevState.tabIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 4: Undo the population of key column.\r\n    // In this case we need to restore keyColIndex, keyColNeighbours, firstDegNeighbours, firstColFilled, \r\n    //                                 curActionInfo, tableData, tableHeader\r\n\r\n    else if (lastAction === \"populateKeyColumn\") {\r\n      this.setState({\r\n        keyColIndex: prevState.keyColIndex,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        firstColFilled: prevState.firstColFilled,\r\n        firstColHeaderInfo: prevState.firstColHeaderInfo,\r\n        firstColSelection: prevState.firstColSelection,\r\n        firstColChecked: prevState.firstColChecked,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 5: Undo the population of a new column.\r\n    // In this case we need to restore curActionInfo, tableData.\r\n    else if (lastAction === \"populateOtherColumn\") {\r\n      this.setState({\r\n        curActionInfo: prevState.curActionInfo,\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        previewColIndex: prevState.previewColIndex,\r\n        otherColText: prevState.otherColText,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 6: Undo the population of same neighbour in different columns.\r\n    // In this case we need to restore curActionInfo, tableData, tableHeader, optionsMap.\r\n    else if (lastAction === \"sameNeighbourDiffRow\") {\r\n      this.setState({\r\n        curActionInfo: prevState.curActionInfo,\r\n        tableData: prevState.tableData,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 7: Undo the population of same neighbour in the same column.\r\n    // In this case we need to restore the curActionInfo, tableData.\r\n    else if (lastAction === \"sameNeighbourOneRow\") {\r\n      this.setState({\r\n        curActionInfo: prevState.curActionInfo,\r\n        tableData: prevState.tableData,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 9: Undo the union of tables.\r\n    // In this case we need to restore tableData\r\n    else if (lastAction === \"unionTable\" || lastAction === \"unionPage\" || lastAction === \"unionProperty\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 10: Undo the addition of a new column\r\n    else if (lastAction === \"contextAddColumn\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        curActionInfo: prevState.curActionInfo,\r\n        keyColIndex: prevState.keyColIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        tabIndex: prevState.tabIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 11: Undo the set of search cell.\r\n    else if (lastAction === \"contextSetColumn\") {\r\n      this.setState({\r\n        keyColIndex: prevState.keyColIndex,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        tabIndex: prevState.tabIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // // Case 12: Undo the showing of cell origin.\r\n    // else if (lastAction === \"contextCellOrigin\") {\r\n    //   this.setState({\r\n    //     curActionInfo: prevState.curActionInfo,\r\n    //     tabIndex: prevState.tabIndex,\r\n    //     lastAction: \"\",\r\n    //   })\r\n    // }\r\n\r\n    // Case 12: Undo the showing of cell preview.\r\n    else if (lastAction === \"originPreviewPage\") {\r\n      this.setState({\r\n        curActionInfo: prevState.curActionInfo,\r\n        tabIndex: prevState.tabIndex,\r\n        pageHidden: prevState.pageHidden,\r\n        iframeURL: prevState.iframeURL,\r\n        previewInfoArray: prevState.previewInfoArray,\r\n        previewInfoExpanded: prevState.previewInfoExpanded,\r\n        selectedCell: prevState.selectedCell,\r\n        previewColIndex: prevState.previewColIndex,\r\n        // firstColSelection: prevState.firstColSelection,\r\n        // firstColChecked: prevState.firstColChecked,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 13: Undo the deletion of column.\r\n    else if (lastAction === \"contextDeleteColumn\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        keyColIndex: prevState.keyColIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        propertyNeighbours: prevState.propertyNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 14: Undo the sorting of a column.\r\n    else if (lastAction === \"contextSortColumn\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 14: Undo the deduping of a column.\r\n    else if (lastAction === \"contextDedupColumn\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        tabIndex: prevState.tabIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 15: Undo the row filtering based on column filters.\r\n    else if (lastAction === \"applyFilter\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 16: Undo the joining of two tables.\r\n    else if (lastAction === \"runJoin\") {\r\n      this.setState({\r\n        curActionInfo: prevState.curActionInfo,\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        previewColIndex: prevState.previewColIndex,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    else if (lastAction === \"confirmAddFirstCol\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstColHeaderInfo: prevState.firstColHeaderInfo,\r\n        previewColIndex: prevState.previewColIndex,\r\n        firstColSelection: prevState.firstColSelection, // updated on 9/13\r\n        firstColChecked: prevState.firstColChecked,  // updated on 9/13\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    else if (lastAction === \"toggleOtherNeighbour\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        previewColIndex: prevState.previewColIndex,\r\n        otherColChecked: prevState.otherColChecked,\r\n        otherColCheckedIndex: prevState.otherColCheckedIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    else if (lastAction === \"populateRecommendation\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        keyColIndex: prevState.keyColIndex,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        curActionInfo: prevState.curActionInfo,\r\n        tabIndex: prevState.tabIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    else if (lastAction === \"populateStartRecommend\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        keyColIndex: prevState.keyColIndex,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        curActionInfo: prevState.curActionInfo,\r\n        tabIndex: prevState.tabIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // This is an empty else clause.\r\n    else {\r\n\r\n    }\r\n  }\r\n\r\n  // The two following functions opens/closes the modal for union table settings.\r\n\r\n  openModal() {\r\n    this.setState({\r\n      showSetting: true,\r\n    })\r\n  }\r\n\r\n  closeModal() {\r\n    this.setState({\r\n      showSetting: false,\r\n    })\r\n  }\r\n\r\n  // The following function toggles this.state.showTableSelection.\r\n\r\n  toggleTableSelection() {\r\n    let showTableSelection = !this.state.showTableSelection;\r\n    this.setState({\r\n      showTableSelection: showTableSelection,\r\n    })\r\n  }\r\n\r\n  // The following function handles the toggling of \"show unionable tables\" and \"show joinable tables\".\r\n  // based on whether the string passed in is \"union\" or \"join\"\r\n\r\n  toggleUnionJoin(e, str) {\r\n    // In this case we are toggling on/off unionable tables \r\n    if (str === \"union\") {\r\n      this.setState({\r\n        showUnionTables: !this.state.showUnionTables,\r\n        showJoinTables: false,\r\n      })\r\n    }\r\n    // In this case we are toggling on/off joinable tables \r\n    else {\r\n      // Note: every time before we toggle on joinable tables, let's set all this.state.tableOpenList to false\r\n      let tableOpenList = this.state.tableOpenList.slice();\r\n      for (let i = 0; i < tableOpenList.length; ++i) {\r\n        tableOpenList[i] = false;\r\n      }\r\n      this.setState({\r\n        showUnionTables: false,\r\n        showJoinTables: !this.state.showJoinTables,\r\n        tableOpenList: tableOpenList,\r\n      })\r\n    }\r\n  }\r\n\r\n  // The following function handles the join of a selected table with the table in tablePanel.\r\n\r\n  handleJoinTable(e, i) {\r\n    // We need to get two arrays of column headers. One for the table panel table, one for the selected table to join.\r\n    let tableHeader = _.cloneDeep(this.state.tableHeader);\r\n    let originTableHeader = [];\r\n    let joinTableHeader = [];\r\n\r\n    // Note: both originTableHeader and joinTableHeader are array of objects with three properties: label, value, and index\r\n\r\n    // First we get the header for the origin table\r\n    // console.log(tableHeader);\r\n    // Let's loop through this tableHeader to fill the originTableHeader\r\n    for (let i = 0; i < tableHeader.length; ++i) {\r\n      // If the current element in table header has length of 0, it means it's empty\r\n      if (tableHeader[i].length === 0) {\r\n        break;\r\n      }\r\n      else {\r\n        // We loop through the tableHeader[i]\r\n        let value = \"\";\r\n        for (let j = 0; j < tableHeader[i].length; ++j) {\r\n          let valueToAdd = j > 0 ? \"&\" + tableHeader[i][j].value : tableHeader[i][j].value;\r\n          value+=valueToAdd;\r\n        }\r\n        originTableHeader.push(\r\n          {\r\n            \"value\":value,\r\n            \"label\":value,\r\n            \"index\":i\r\n          }\r\n        )\r\n      }\r\n    }\r\n    // console.log(originTableHeader);\r\n\r\n    // Now that we have originTableHeader working correctly, let's get the joinTableHeader\r\n    let urlOrigin = decodeURIComponent(this.state.urlPasted.slice(30));\r\n    let joinTableData = setTableFromHTML(this.state.originTableArray[i], urlOrigin);\r\n    // console.log(joinTable);\r\n\r\n    // We start the index from 1, because 0 index corresponds to OriginURL\r\n    for (let i = 0; i < joinTableData[0].length; ++i) {\r\n      joinTableHeader.push(\r\n        {\r\n          \"value\":joinTableData[0][i].data,\r\n          \"label\":joinTableData[0][i].data,\r\n          \"index\":i\r\n        }\r\n      )\r\n    }\r\n\r\n    // Now we take a look at originTableHeader, joinTableHeader, and joinTable\r\n    // console.log(originTableHeader);\r\n    // console.log(joinTableHeader);\r\n    // console.log(joinTableData);\r\n\r\n    // It seems like we have fetched the right values. \r\n    // Now we use these to update states, so that jon modal can display the right content.\r\n\r\n    // Bugfix here: if either tableHeader is empty, we want to show an alert message\r\n    if (originTableHeader.length === 0 || joinTableHeader.length === 0) {\r\n      alert(\"One of the join tables have no data. Join cannot be performed.\");\r\n    }\r\n    else {\r\n      this.setState({\r\n        showJoinModal: true,\r\n        joinTableIndex: i,\r\n        joinTableData: joinTableData,\r\n        originColOptions: originTableHeader,\r\n        joinColOptions: joinTableHeader,\r\n      })\r\n    }\r\n  }\r\n\r\n  // The following function handles cancelling the join operation.\r\n\r\n  cancelJoin(e) {\r\n    this.setState({\r\n      showJoinModal: false,\r\n    })\r\n  }\r\n\r\n  // The following function handles the selection of join columns.\r\n  // It updates either originJoinIndex, or joinJoinIndex, based on the second parameter passed in\r\n\r\n  selectJoinColumn(e, table) {\r\n    // console.log(e.index);\r\n    if (table === \"originTable\") {\r\n      this.setState({\r\n        originJoinIndex: e.index,\r\n      })\r\n    }\r\n    else {\r\n      this.setState({\r\n        joinJoinIndex: e.index,\r\n      })\r\n    }\r\n  }\r\n\r\n  // The function handles the actual join of two selected tables. \r\n  // Currently, the only join type supported is left join\r\n\r\n  // Since join is equal to column addition, we need to update tableData, tableHeader, optionsMap, and selectedClassAnnotation\r\n  runJoin(e) {\r\n    // First check all the info that we needed\r\n    let joinTableData = this.state.joinTableData.slice();\r\n    let originJoinIndex = this.state.originJoinIndex;\r\n    let joinJoinIndex = this.state.joinJoinIndex;\r\n    // console.log(joinTableData);\r\n    // console.log(originJoinIndex);\r\n    // console.log(joinJoinIndex);\r\n    \r\n    // If the join table has n columns, then we are adding n-1 new columns to the table in table panel.\r\n    // Since we only allow join of one column from each table.\r\n\r\n    // Let's deal with tableHeader, optionsMap, and selectedCalssAnnotation, before we move on to tableData.\r\n    let tableHeaderUpdated = this.state.tableHeader.slice();\r\n    let optionsMapUpdated = this.state.optionsMap.slice();\r\n    let selectedClassAnnotationUpdated = this.state.selectedClassAnnotation.slice();\r\n\r\n    // First we handle tableHeader's addition.\r\n    // We first loop through tableHeader to remove all the empty ones\r\n    for (let i = 0; i < tableHeaderUpdated.length; ++i) {\r\n      if (tableHeaderUpdated[i] === \"\") {\r\n        tableHeaderUpdated.splice(i,1);\r\n        --i;\r\n      }\r\n    }\r\n    // Now we push on the new columns. Note that it has to be in the form of an array\r\n    for (let i = 0; i < joinTableData[0].length; ++i) {\r\n      if (i !== joinJoinIndex) {\r\n        tableHeaderUpdated.push(\r\n          [\r\n            {\r\n              \"value\":joinTableData[0][i].data,\r\n              \"label\":joinTableData[0][i].data\r\n            }\r\n          ]\r\n        )\r\n      }\r\n    }\r\n    // console.log(tableHeaderUpdated); \r\n\r\n    // Then we handle optionsMap's addition. We do not need to do much here.\r\n    // We start the index from 1, because we only add in n-1 new columns.\r\n    for (let i = 1; i < joinTableData[0].length; ++i) {\r\n      optionsMapUpdated.push([]);\r\n    }\r\n    // console.log(optionsMapUpdated);\r\n\r\n    // Then we handle selectedClassAnnotation's addition.\r\n    let queryPromise = [findClassAnnotation(this.state.originTableArray[this.state.joinTableIndex])];\r\n    allPromiseReady(queryPromise).then((values) => {\r\n    // Note, we need to push on an empty [] to values here, corresponding to the originURL column's class annotation\r\n    values[0].splice(0, 0, []);\r\n    for (let i = 0; i < values[0].length; ++i) {\r\n      if (i !== joinJoinIndex) {\r\n        selectedClassAnnotationUpdated.push(values[0][i]);\r\n      }\r\n    }\r\n    console.log(selectedClassAnnotationUpdated);\r\n    \r\n    // Lastly, and most importantly, we want to handle tableData's change.\r\n    // Let's start with an empty tableDataUpdated. Loop through tableData. \r\n    // Use a bool to keep track of if tableData[i][originJoinIndex] is in join table. For every yes, we push one element onto tableDataUpdated.\r\n    // If at the end, the bool is still no, we push on tableData[i] with a bunch of N/A's at the position of the newly added columns.\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    let tableDataUpdated = [];\r\n    // Let's first run some code to process joinTableData, so that it shares the same format as tableData\r\n    // Now, let's deal with tableData. Wee need to handle both data and origin.\r\n    let joinTableHeader = [];\r\n    for (let j=0;j<joinTableData[0].length;++j) {\r\n      joinTableHeader.push(\r\n        {\"value\":joinTableData[0][j].data\r\n        ,\"label\":joinTableData[0][j].data}\r\n      )\r\n    }\r\n    let joinTableDataUpdated = [];\r\n    // console.log(tableDataExplore);\r\n    // This starts the loop for rows\r\n    for (let i=1;i<joinTableData.length;++i) {\r\n      let tempRow = [];\r\n      // This starts the loop for columns\r\n      for (let j=0;j<joinTableData[i].length;++j) {\r\n        // First set the data\r\n        let data = joinTableData[i][j].data;\r\n        // Then set the origin\r\n        let origin = [];\r\n        let originText = joinTableData[i][j].origin+\": \"+joinTableHeader[j].value+\": \"+joinTableData[i][j].data;\r\n        origin.push(originText);\r\n        tempRow.push({\"data\":data,\"origin\":origin});\r\n      }\r\n      joinTableDataUpdated.push(tempRow);\r\n    }\r\n\r\n    // Take a look at tableData, and joinTableDataUpdated\r\n    // console.log(tableData);\r\n    // console.log(joinTableDataUpdated);\r\n\r\n    // Now we can finally start the join operator\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      let curJoinEntry = tableData[i][originJoinIndex].data;\r\n      console.log(\"Current entry to join is \"+curJoinEntry);\r\n      let curEntryFound = false;\r\n      // We start the index from 1 because the first column in joinTableData is the header\r\n      for (let j = 0; j < joinTableDataUpdated.length; ++j) {\r\n        if (joinTableDataUpdated[j][joinJoinIndex].data === curJoinEntry) {\r\n          // console.log(\"A match has been found at index \"+j);\r\n          // Let's create the tempRow that we want to push onto tableDataUpdated\r\n\r\n          let tempRow = _.cloneDeep(tableData[i]);\r\n          for (let k = 0; k < joinTableDataUpdated[j].length; ++k) {\r\n            if (k !== joinJoinIndex) {\r\n              tempRow.push(joinTableDataUpdated[j][k]);\r\n            }\r\n          }\r\n          tableDataUpdated.push(tempRow);\r\n          curEntryFound = true;\r\n        }\r\n      }\r\n      // If this current entry does NOT have a corresponding entry in the join table,\r\n      // We push it directly onto tableDataUpdated, with the addtion of some N/A's.\r\n      if (curEntryFound === false) {\r\n        // Let's create the tempRow that we want to push onto tableDataUpdated\r\n\r\n        // Code Placeholder\r\n        let tempRow = _.cloneDeep(tableData[i]);\r\n        for (let k = 0; k < joinTableDataUpdated[0].length; ++k) {\r\n          if (k !== joinJoinIndex) {\r\n            tempRow.push(\r\n              {\r\n                \"data\":\"N/A\",\r\n                \"origin\":[]\r\n              }\r\n            );\r\n          }\r\n        }\r\n        tableDataUpdated.push(tempRow);\r\n      }\r\n    }\r\n    // console.log(tableDataUpdated);\r\n\r\n    // Now, we have correctly got everything we needed: tableDataUpdated, tableHeaderUpdated, optionsMapUpdated, selectedClassAnnotationUpdated\r\n    // Let's add some support for undo, and do not forget to close the joinModal\r\n\r\n    // Bugfix: since this function potentially changes the number of rows too, we need to update firstDegNeighbours and keyColNeighbours\r\n    let promiseArrayOne = this.getNeighbourPromise(tableDataUpdated, \"subject\", this.state.keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableDataUpdated, \"object\", this.state.keyColIndex);\r\n    allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      // Support for undo: \r\n      let lastAction = \"runJoin\";\r\n      let prevState = \r\n        {\r\n          \"curActionInfo\":this.state.curActionInfo,\r\n          \"tableData\":this.state.tableData,\r\n          \"tableHeader\":this.state.tableHeader,\r\n          \"keyColNeighbours\":this.state.keyColNeighbours,\r\n          \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n          \"selectedClassAnnotation\":this.state.selectedClassAnnotation,\r\n          \"previewColIndex\": this.state.previewColIndex,\r\n        };\r\n\r\n      this.setState({\r\n        curActionInfo:{\"task\":\"afterPopulateColumn\"},\r\n        tableData:tableDataUpdated,\r\n        tableHeader:tableHeaderUpdated,\r\n        keyColNeighbours:keyColNeighbours,\r\n        firstDegNeighbours:firstDegNeighbours,\r\n        selectedClassAnnotation:selectedClassAnnotationUpdated,\r\n        showJoinModal: false,\r\n        previewColIndex: -1,\r\n        lastAction:lastAction,\r\n        prevState:prevState,\r\n      })\r\n    })\r\n    })\r\n    })\r\n  }\r\n\r\n  // This function handles the expansion/collapse of an attribute in cell preview and origin\r\n  togglePreviewElement(e, i) {\r\n    let previewInfoExpanded = this.state.previewInfoExpanded.slice();\r\n    previewInfoExpanded[i] = !previewInfoExpanded[i];\r\n    this.setState({\r\n      previewInfoExpanded: previewInfoExpanded,\r\n    })\r\n  }\r\n\r\n  // This function handles the URL paste for table union. It should very similar to handleURLPaste\r\n  handleUnionPaste(e) {\r\n\r\n    document.body.classList.add('waiting');\r\n\r\n    // We first get the urlPasted\r\n    e.preventDefault();\r\n    let urlPasted = (e.clipboardData || window.clipboardData).getData(\"text\");\r\n\r\n    // We first check if user has pasted a valid wikipedia page.\r\n    if (!urlPasted.includes(\"https://en.wikipedia.org/wiki/\")) {\r\n      document.body.classList.remove('waiting');\r\n      alert(\"Please paste a valid Wikipedia link.\");\r\n    }\r\n\r\n    // If yes, we need to fetch the tables from the pasted Wikipedia page\r\n    else {\r\n      let promiseArray = [];\r\n      promiseArray.push(fetchText(urlPasted));\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        // We first parse the pasted URL and store the list of tables from the pasted URL\r\n        let htmlText = values[0];\r\n        let doc = new DOMParser().parseFromString(htmlText, \"text/html\");\r\n        let wikiTableArray = doc.getElementsByClassName(\"wikitable\");\r\n        let unionTableArray = [];\r\n        for (let i = 0; i < wikiTableArray.length; ++i) {\r\n          if (wikiTableArray[i].tagName === \"TABLE\" && wikiTableArray[i].rows !== undefined) {\r\n            unionTableArray.push(wikiTableArray[i]);\r\n          }\r\n        }\r\n        let unionOpenList = [];\r\n        for (let i = 0; i < unionTableArray.length; ++i) {\r\n          unionOpenList.push(false);\r\n        }\r\n\r\n        document.body.classList.remove('waiting');\r\n\r\n        // Need to add support for undo later. Skip for now\r\n        this.setState({\r\n          unionURL: urlPasted,\r\n          unionTableArray: unionTableArray,\r\n          unionOpenList: unionOpenList,\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // This function handles the toggle on/off for tables in unionTableArray\r\n  toggleUnionTable(e, index) {\r\n    let unionOpenList = this.state.unionOpenList.slice();\r\n    unionOpenList[index] = !unionOpenList[index];\r\n    // When we toggle on one table (to union), we want to close all other tables\r\n    for (let i = 0; i < unionOpenList.length; ++i) {\r\n      if (i !== index) {\r\n        unionOpenList[i] = false;\r\n      }\r\n    }\r\n    this.setState({\r\n      unionOpenList: unionOpenList,\r\n    })\r\n  }\r\n\r\n  // The function handles user clicking the \"union\" button for a table from unionTableArray\r\n  // For now, it simply sets showUnionModal to true.\r\n  showUnionAlign(e, index) {\r\n    this.setState({\r\n      showUnionModal: true,\r\n    })\r\n  }\r\n\r\n  // The function handles cancel of union operation. For now, it just sets showUnionModal to false.\r\n  cancelUnionAlign() {\r\n    this.setState({\r\n      showUnionModal: false,\r\n    })\r\n  } \r\n\r\n  // The following function is completely hardcoded: it performs the table union\r\n  hardcodeUnion(e) {\r\n    document.body.classList.add('waiting');\r\n\r\n    let dataToUnion = setTableFromHTML(this.state.unionTableArray[0],\"\");\r\n    // console.log(dataToUnion);\r\n\r\n    // Now we should have a for loop to loop over dataToUnion.length\r\n    // We also need to run a loop to queries to specifically fetch the dbo:starring attribute\r\n\r\n    // Let's first take a look of all the movies (all entries from col index 2). \r\n    // Then we will ask the queries. Then, when we get our results back (the starring), \r\n    // we construct the new table data row by row. One cell at a time.\r\n    // and concat the new table data with the existing table data.\r\n\r\n    let promiseArray = [];\r\n\r\n    for (let i = 0; i < dataToUnion.length; ++i) {\r\n      let cellValue = dataToUnion[i][2].data === \"N/A\" ? \"NONEXISTINGSTRING\" : regexReplace(dataToUnion[i][2].data);\r\n      let prefixURL = \r\n        \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n      let suffixURL = \r\n        \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n      let queryBody =\r\n        \"select+%3Fo%0D%0Awhere+%7B%0D%0Adbr%3A\" + cellValue + \"+dbo%3Astarring+%3Fo.%0D%0A%7D&\";\r\n      let queryURL = prefixURL + queryBody + suffixURL;\r\n      let curPromise = fetchJSON(queryURL);\r\n      promiseArray.push(curPromise);\r\n    }\r\n\r\n    allPromiseReady(promiseArray).then((values) => {\r\n\r\n      // for (let i = 0; i < values.length; ++i) {\r\n      //   console.log(values[i].results.bindings);\r\n      // }\r\n\r\n      // We have gotten all the data we need. Let's now put them together\r\n\r\n      let otherTableData = [];\r\n\r\n      for (let i = 0; i < dataToUnion.length; ++i) {\r\n        let tempRow = [];\r\n        // We push on the movies, directors, notes (which will be blank), starring (using the query results), and country in order\r\n        // First movies\r\n        tempRow.push(dataToUnion[i][2]);\r\n        // Then directors\r\n        tempRow.push(dataToUnion[i][4]);\r\n        // Then notes. It will have blank data and origin\r\n        tempRow.push({\r\n          \"data\": \"\",\r\n          \"origin\": \"\",\r\n        })\r\n        // Then starring. We need to use query results.\r\n        if (values[i].results.bindings.length === 0) {\r\n          tempRow.push({\r\n            \"data\": \"N/A\",\r\n          })\r\n        }\r\n        else {\r\n          let tempData = \"\";\r\n          for (let j = 0; j < values[i].results.bindings.length; ++j) {\r\n            if (j > 0) {\r\n              tempData+=\";\";\r\n            }\r\n            tempData+=removePrefix(values[i].results.bindings[j].o.value);\r\n          }\r\n          tempRow.push({\r\n            \"data\": tempData,\r\n            \"origin\":\"\",\r\n          })\r\n        }\r\n        // Lastly, country.\r\n        tempRow.push(dataToUnion[i][5]);\r\n\r\n        // After the row has been set, we push the row onto otherTableData\r\n        otherTableData.push(tempRow);\r\n      }\r\n      // console.log(otherTableData);\r\n\r\n      let tableData = _.cloneDeep(this.state.tableData);\r\n      tableData = tableData.concat(otherTableData);\r\n\r\n      document.body.classList.remove('waiting');\r\n\r\n      this.setState({\r\n        showUnionModal: false,\r\n        tableData: tableData,\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let bodyEle;\r\n    let bottomContentClass = \" bottom-content\";\r\n    let topContentClass = \"row top-content\";\r\n    if (this.state.pageHidden) {\r\n      bottomContentClass = \" bottom-content-hidden\";\r\n      topContentClass = \"row top-content-large\";\r\n    }\r\n    // If user has not pasted the URL, we want to display the landing page\r\n    if (this.state.urlPasted === \"\") {\r\n      bodyEle = \r\n        <LandingPage \r\n          handleURLPaste={this.handleURLPaste} \r\n        />;\r\n    }\r\n    // Else, we show the three panels: TablePanel, ActionPanel, and PagePanel\r\n    else {\r\n      bodyEle = (\r\n        <div>\r\n          <div className=\"header\">\r\n            <Header \r\n              // Following states are passed for general purposes\r\n              copyTable={this.copyTable}\r\n              undoPreviousStep={this.undoPreviousStep}\r\n              openModal = {this.openModal}\r\n            />\r\n          </div> \r\n          <div className=\"mainbody\">\r\n            <div className=\"\">\r\n              <div className={topContentClass}>\r\n                <div className=\"col-md-7 small-padding table-panel\">\r\n                  <TablePanel\r\n                    urlPasted={this.state.urlPasted}\r\n                    usecaseSelected={this.state.usecaseSelected}\r\n                    // Following states are passed to \"startSubject\"\r\n                    tableHeader={this.state.tableHeader}\r\n                    tableData={this.state.tableData}\r\n                    keyColIndex={this.state.keyColIndex}\r\n                    onCellChange={this.cellChange}\r\n                    selectColHeader={this.selectColHeader}\r\n                    getKeyOptions={this.getKeyOptions}\r\n                    optionsMap={this.state.optionsMap}\r\n                    contextAddColumn={this.contextAddColumn}\r\n                    contextDeleteColumn={this.contextDeleteColumn}\r\n                    contextSetColumn={this.contextSetColumn}\r\n                    originPreviewPage={this.originPreviewPage}\r\n                    showFilterMethods={this.showFilterMethods}\r\n                    // Following states control the render of first column header\r\n                    firstColFilled={this.state.firstColFilled}\r\n                    handlePlusClick={this.handlePlusClick}\r\n                    firstColHeaderInfo={this.state.firstColHeaderInfo}\r\n                    // Following states control the render of other column header\r\n                    getOtherOptions={this.getOtherOptions}\r\n                    // Following states control the render of column preview\r\n                    previewColIndex={this.state.previewColIndex}\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-5 small-padding action-panel\">\r\n                  <ActionPanel\r\n                    urlPasted={this.state.urlPasted}\r\n                    usecaseSelected={this.state.usecaseSelected}\r\n                    curActionInfo={this.state.curActionInfo}\r\n                    handleStartSubject={this.handleStartSubject}\r\n                    populateKeyColumn={this.populateKeyColumn}\r\n                    populateOtherColumn={this.populateOtherColumn}\r\n                    sameNeighbourDiffRow={this.sameNeighbourDiffRow}\r\n                    sameNeighbourOneRow={this.sameNeighbourOneRow}\r\n                    populateRecommendation={this.populateRecommendation}\r\n                    populateStartRecommend={this.populateStartRecommend}\r\n                    // Folloiwng states are passed to \"startTable\"\r\n                    handleStartTable={this.handleStartTable}\r\n                    propertyNeighbours={this.state.propertyNeighbours}\r\n                    togglePropertyNeighbours={this.togglePropertyNeighbours}\r\n                    toggleSibling={this.toggleSibling}\r\n                    toggleOtherTable={this.toggleOtherTable}\r\n                    unionTable={this.unionTable}\r\n                    unionPage={this.unionPage}\r\n                    unionProperty={this.unionProperty}\r\n                    // Follow state handles tab switch\r\n                    tabIndex={this.state.tabIndex}\r\n                    handleTabSwitch={this.handleTabSwitch}\r\n                    // Following states are passed during start up\r\n                    showTableSelection={this.state.showTableSelection}\r\n                    toggleTableSelection={this.toggleTableSelection}\r\n                    originTableArray={this.state.originTableArray}\r\n                    tableOpenList={this.state.tableOpenList}\r\n                    toggleTable={this.toggleTable}\r\n                    selectedTableIndex={this.state.selectedTableIndex}\r\n                    // Following states are for union/join tables\r\n                    showUnionTables={this.state.showUnionTables}\r\n                    showJoinTables={this.state.showJoinTables}\r\n                    toggleUnionJoin={this.toggleUnionJoin}\r\n                    handleJoinTable={this.handleJoinTable}\r\n                    // Following states are for first column's header selection\r\n                    firstColSelection={this.state.firstColSelection}\r\n                    firstColChecked={this.state.firstColChecked}\r\n                    firstColText={this.state.firstColText}\r\n                    firstColFilled={this.state.firstColFilled}\r\n                    keyColIndex={this.state.keyColIndex}\r\n                    toggleFirstNeighbour={this.toggleFirstNeighbour}\r\n                    firstColTextChange={this.firstColTextChange}\r\n                    tableHeader={this.state.tableHeader}\r\n                    keyCheckedIndex={this.state.keyCheckedIndex}\r\n                    addToFirstCol={this.addToFirstCol}\r\n                    confirmAddFirstCol={this.confirmAddFirstCol}\r\n                    // Following states are for other column's header selection\r\n                    otherColSelection={this.state.otherColSelection}\r\n                    otherColChecked={this.state.otherColChecked}\r\n                    otherColText={this.state.otherColText}\r\n                    otherCheckedIndex={this.state.otherCheckedIndex}\r\n                    toggleOtherNeighbour={this.toggleOtherNeighbour}\r\n                    otherColTextChange={this.otherColTextChange}\r\n                    // Following states are for column's processing methods\r\n                    contextSortColumn={this.contextSortColumn}\r\n                    contextDedupColumn={this.contextDedupColumn}\r\n                    openFilter={this.openFilter}\r\n                    // Following states are for displaying cell's preview and origin\r\n                    previewInfoArray={this.state.previewInfoArray}\r\n                    previewInfoExpanded={this.state.previewInfoExpanded}\r\n                    selectedCell={this.state.selectedCell}\r\n                    togglePreviewElement={this.togglePreviewElement}\r\n                    // Following states are for showStartRecommend\r\n                    keyColNeighbours={this.state.keyColNeighbours}\r\n                    // Following states are for customized table union\r\n                    unionURL={this.state.unionURL}\r\n                    handleUnionPaste={this.handleUnionPaste}\r\n                    unionTableArray={this.state.unionTableArray}\r\n                    unionOpenList={this.state.unionOpenList}\r\n                    toggleUnionTable={this.toggleUnionTable}\r\n                    showUnionAlign={this.showUnionAlign}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className={bottomContentClass}>\r\n                <div>\r\n                  <PagePanel\r\n                    pageHidden={this.state.pageHidden}\r\n                    iframeURL={this.state.iframeURL}\r\n                    toggleWikiPage={this.toggleWikiPage}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <SettingModal \r\n                  showSetting={this.state.showSetting}\r\n                  closeModal={this.closeModal}\r\n                  semanticEnabled={this.state.semanticEnabled}\r\n                  toggleSemantic={this.toggleSemantic}\r\n                  unionCutOff={this.state.unionCutOff}\r\n                  unionCutOffChange={this.unionCutOffChange}\r\n                />\r\n              </div>\r\n              <div>\r\n                <FilterModal\r\n                  showFilter={this.state.showFilter}\r\n                  dataAndChecked={this.state.dataAndChecked}\r\n                  checkAll={this.state.checkAll}\r\n                  applyFilter={this.applyFilter}\r\n                  cancelFilter={this.cancelFilter}\r\n                  toggleChecked={this.toggleChecked}\r\n                  toggleAll={this.toggleAll}\r\n                />\r\n              </div>\r\n              <div>\r\n                <JoinModal \r\n                  showJoin={this.state.showJoinModal}\r\n                  cancelJoin={this.cancelJoin}\r\n                  originColOptions={this.state.originColOptions}\r\n                  joinColOptions={this.state.joinColOptions}\r\n                  originJoinIndex={this.state.originJoinIndex}\r\n                  joinJoinIndex={this.state.joinJoinIndex}\r\n                  selectJoinColumn={this.selectJoinColumn}\r\n                  runJoin={this.runJoin}\r\n                />\r\n              </div>\r\n              <div>\r\n                <UnionModal\r\n                  showUnionModal={this.state.showUnionModal}\r\n                  cancelUnionAlign={this.cancelUnionAlign}\r\n                  hardcodeUnion={this.hardcodeUnion}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"footer\">\r\n            <Footer />\r\n          </div> \r\n        </div>\r\n      );\r\n    }\r\n    return <div>{bodyEle}</div>;\r\n  }\r\n}\r\n\r\nexport default MainBody;\r\n\r\n// This function takes in a queryURL and returns its JSON format\r\nfunction fetchJSON(url) {\r\n  let urlCORS = \"https://mysterious-ridge-15861.herokuapp.com/\"+url;\r\n  return fetch(urlCORS)\r\n        .then(function (response) {\r\n          if (!response.ok) {\r\n            throw Error(1);\r\n          }\r\n          return response;\r\n        })\r\n        .then(function (response) {\r\n          return response.json();\r\n        })\r\n        .catch(function (error) {\r\n          document.body.classList.remove('waiting');\r\n          // alert(\"Some error occured when accessing SPARQL public endpoint. If semantic mapping is enabled, disable it and try again.\");\r\n          return 1;\r\n        })\r\n}\r\n\r\n// This function takes in a queryURL and returns its Text format\r\nfunction fetchText(url) {\r\n  let urlCORS = \"https://mysterious-ridge-15861.herokuapp.com/\"+url;\r\n  return fetch(urlCORS).then((response) => response.text());\r\n}\r\n\r\n// This function ensures that all promises in promiseArray are ready\r\nfunction allPromiseReady(promiseArray) {\r\n  return Promise.all(promiseArray);\r\n}\r\n\r\n// This function replaces string so that the result can be used in queryURL.\r\n// It currently replaces \"(\", \")\", \"'\", \"-\", \" \", \"&\", \".\", \"\"\",and \"/\"\r\nfunction regexReplace(str) {\r\n  return str\r\n    .replace(/\\$/g, \"%5Cu0024\")\r\n    .replace(/%/g, \"%5Cu0025\")\r\n    .replace(/!/g, \"%5Cu0021\")\r\n    .replace(/\"/g, \"%5Cu0022\")\r\n    .replace(/#/g, \"%5Cu0023\")\r\n    .replace(/&/g, \"%5Cu0026\")\r\n    .replace(/'/g, \"%5Cu0027\")\r\n    .replace(/\\(/g, \"%5Cu0028\")\r\n    .replace(/\\)/g, \"%5Cu0029\")\r\n    .replace(/\\*/g, \"%5Cu002A\")\r\n    .replace(/\\+/g, \"%5Cu002B\")\r\n    .replace(/-/g, \"%5Cu002D\")\r\n    .replace(/;/g, \"%5Cu003B\")\r\n    .replace(/</g, \"%5Cu003C\")\r\n    .replace(/=/g, \"%5Cu003D\")\r\n    .replace(/>/g, \"%5Cu003E\")\r\n    .replace(/\\?/g, \"%5Cu003F\")\r\n    .replace(/\\./g, \"%5Cu002E\")\r\n    .replace(/\\//g, \"%5Cu002F\")\r\n    .replace(/,/g, \"%5Cu002C\")\r\n    .replace(/\\s/g, \"_\")\r\n    .replace(/@/g, \"%5Cu0040\")\r\n    .replace(/\\^/g, \"%5Cu005E\")\r\n    .replace(/~/g, \"%5Cu007E\")\r\n    .replace(/`/g, \"%5Cu0060\")\r\n    .replace(/\\|/g, \"%5Cu007C\")\r\n    .replace(/\\[/g, \"%5Cu005B\")\r\n    .replace(/\\\\/g, \"%5Cu005C\")\r\n    .replace(/\\]/g, \"%5Cu005D\")\r\n    .replace(/\\{/g, \"%5Cu007B\")\r\n    .replace(/\\}/g, \"%5Cu007D\");\r\n}\r\n\r\n// This function replaces the URL pasted\r\nfunction urlReplace(str) {\r\n  return str\r\n    .replace(/%E2%80%93/g, \"%5Cu2013\")\r\n    .replace(/\\$/g, \"%5Cu0024\")\r\n    .replace(/!/g, \"%5Cu0021\")\r\n    .replace(/\"/g, \"%5Cu0022\")\r\n    .replace(/#/g, \"%5Cu0023\")\r\n    .replace(/&/g, \"%5Cu0026\")\r\n    .replace(/'/g, \"%5Cu0027\")\r\n    .replace(/\\(/g, \"%5Cu0028\")\r\n    .replace(/\\)/g, \"%5Cu0029\")\r\n    .replace(/\\*/g, \"%5Cu002A\")\r\n    .replace(/\\+/g, \"%5Cu002B\")\r\n    .replace(/-/g, \"%5Cu002D\")\r\n    .replace(/;/g, \"%5Cu003B\")\r\n    .replace(/</g, \"%5Cu003C\")\r\n    .replace(/=/g, \"%5Cu003D\")\r\n    .replace(/>/g, \"%5Cu003E\")\r\n    .replace(/\\?/g, \"%5Cu003F\")\r\n    .replace(/\\./g, \"%5Cu002E\")\r\n    .replace(/\\//g, \"%5Cu002F\")\r\n    .replace(/,/g, \"%5Cu002C\")\r\n    .replace(/\\s/g, \"_\")\r\n    .replace(/@/g, \"%5Cu0040\")\r\n    .replace(/\\^/g, \"%5Cu005E\")\r\n    .replace(/~/g, \"%5Cu007E\")\r\n    .replace(/`/g, \"%5Cu0060\")\r\n    .replace(/\\|/g, \"%5Cu007C\")\r\n    .replace(/\\[/g, \"%5Cu005B\")\r\n    .replace(/\\\\/g, \"%5Cu005C\")\r\n    .replace(/\\]/g, \"%5Cu005D\")\r\n    .replace(/\\{/g, \"%5Cu007B\")\r\n    .replace(/\\}/g, \"%5Cu007D\");\r\n}\r\n\r\n// This function removes the prefix \"http://dbpedia.org/resource/\" from query results, if it includes one\r\n\r\nfunction removePrefix(str) {\r\n  let prefixToRemove = \"http://dbpedia.org/resource/\";\r\n  // If dbResult contains prefix of \"http://dbpedia.org/resource/\", we want to remove it\r\n  if (str.includes(prefixToRemove) === true) {\r\n     str = str.slice(28);\r\n  }\r\n  return str;\r\n}\r\n\r\n// This function updates the key column's neighbours for ONE entry from the search column.\r\n\r\n// It taks three parameters:\r\n//  1) array \"keyColNeighbour\" storing list of neighbours for the key column\r\n//  2) array \"resultsBinding\", storing the returned result of queryURL from Virtuoso\r\n//  3) string \"type\", either \"subject\" or \"object\"\r\n\r\n// It returns the updated keyColNeighbours\r\nfunction updateKeyColNeighbours(keyColNeighbours, resultsBinding, type) {\r\n\r\n  // we first filter out those in resultsBinding according to three criterias\r\n\r\n  // 1) p.value.slice(28).length must > 1\r\n  // 2) p.value must include \"ontology\" or \"property\" (so it is one of dbo:XXXX or dbp:XXXX)\r\n  // 3) p.value must not include certain strings (which likely correspond to meaningless attributes)\r\n\r\n  let processedBinding = resultsBinding.filter(\r\n    a => a.p.value.slice(28).length > 1 &&\r\n         (a.p.value.includes(\"ontology\") || a.p.value.includes(\"property\")) &&\r\n         !(a.p.value.includes(\"wikiPage\") \r\n         || a.p.value.includes(\"align\") \r\n         || a.p.value.includes(\"abstract\") \r\n         || a.p.value.includes(\"caption\") \r\n         || a.p.value.includes(\"image\") \r\n         || a.p.value.includes(\"width\") \r\n         || a.p.value.includes(\"thumbnail\") \r\n         || a.p.value.includes(\"blank\")\r\n         || a.p.value.includes(\"fec\")\r\n         || a.p.value.includes(\"viaf\")\r\n         || a.p.value.includes(\"soundRecording\")\r\n         || a.p.value.includes(\"votesmart\")\r\n         || a.p.value.includes(\"wordnet\")\r\n         || a.p.value.includes(\"float\")\r\n         || a.p.value.includes(\"bbr\")\r\n         || a.p.value === \"http://dbpedia.org/property/alt\"\r\n         || a.p.value === \"http://dbpedia.org/property/by\"\r\n         || a.p.value === \"http://dbpedia.org/property/onlinebooks\"\r\n         || a.p.value === \"http://dbpedia.org/property/signature\"\r\n         || a.p.value === \"http://dbpedia.org/property/video\"\r\n         || a.p.value === \"http://dbpedia.org/property/logo\"\r\n         || a.p.value === \"http://dbpedia.org/property/shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/body\"\r\n         || a.p.value === \"http://dbpedia.org/property/hShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/hBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/aShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/aBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Body\"\r\n         || a.p.value === \"http://dbpedia.org/property/nba\"\r\n         || a.p.value === \"http://dbpedia.org/ontology/termPeriod\"\r\n         )\r\n  );\r\n\r\n  // We then do some filtering based on subPropertyOf.\r\n  // Because of our observation, we only want to keep entries whose subPropertyOf attribute is from the DUL dataset.\r\n  // processedBinding = processedBinding.filter(a => a.subPropertyOf === undefined || a.subPropertyOf.value.includes(\"DUL.owl\"));\r\n  processedBinding = processedBinding.filter(function(a) {\r\n    if (a.subPropertyOf !== undefined) {\r\n      return a.subPropertyOf.value.includes(\"DUL.owl\");\r\n    }\r\n    return true;\r\n  })\r\n\r\n  // we then sort the resultsBinding by p.value.slice(28)\r\n  processedBinding = processedBinding.sort((a, b) =>\r\n    a.p.value.slice(28) > b.p.value.slice(28) ? 1 : -1\r\n  );\r\n\r\n  // we take a look at processedBinding at this stage\r\n  // console.log(processedBinding);\r\n\r\n  // Let's only start the loop is processedBinding is non-empty\r\n  if (processedBinding.length > 0) {\r\n    // We set count of neighbour ready to be added\r\n    let neighbourCount = 1;  \r\n\r\n    // We set literal of neighbour ready to be added.\r\n    // Morever, we get the value of the neighbour ready to be added, depending on type.\r\n    // Initialized with the first neighbour.\r\n\r\n    let neighbourToAdd = processedBinding[0].p.value.slice(28); \r\n    let valuesToAdd = [];\r\n    valuesToAdd.push(type === \"subject\" ? removePrefix(processedBinding[0].o.value) : removePrefix(processedBinding[0].s.value))\r\n\r\n    // we set range of neighbour ready to be added. \"\" if doesn't exist.\r\n    let neighbourRange = processedBinding[0].range !== undefined ? processedBinding[0].range.value : \"\";\r\n\r\n    // we the subPropertyOf of neighbour ready to be added. \"\" if doesn't exist.\r\n    let neighbourSubPropertyOf = processedBinding[0].subPropertyOf !== undefined ? processedBinding[0].subPropertyOf.value : \"\";\r\n    \r\n    // We loop over processedBinding\r\n    for (let i = 1; i < processedBinding.length; ++i) {\r\n      let curNeighbour = processedBinding[i].p.value.slice(28);\r\n      // If the current neighbour is equal to neighbourToAdd, we increment the count, and push onto valuesToAdd\r\n      if (curNeighbour === neighbourToAdd) {\r\n        ++neighbourCount;\r\n        valuesToAdd.push(type === \"subject\" ? removePrefix(processedBinding[i].o.value) : removePrefix(processedBinding[i].s.value))\r\n      }\r\n      // else, we push neighbourToAdd to keyColNeighbours. \r\n      else {\r\n        // set value.\r\n        let objValue = neighbourToAdd;\r\n        // set label. We want to change the neighbour label if type === \"object\".\r\n        let objLabel = neighbourToAdd;\r\n        if (type === \"object\") {\r\n          objLabel = \"is \" + objLabel + \" of\";\r\n        }\r\n        // set type\r\n        let objType = type;\r\n        // set count\r\n        let objCount = neighbourCount;\r\n        // set data. Let's do some processing here: we want to ensure that valuesToAdd has a max length of maxNeighbourCount\r\n        let objData = valuesToAdd.length <= maxNeighbourCount ? valuesToAdd : valuesToAdd.slice(0, maxNeighbourCount);\r\n        // set range\r\n        let objRange = neighbourRange;\r\n        // set subPropertyOf\r\n        let objSubPropertyOf = neighbourSubPropertyOf;\r\n\r\n        // Set object from all its attributes\r\n        let tempObj = {\r\n          \"value\":objValue, \r\n          \"label\":objLabel, \r\n          \"type\":objType, \r\n          \"count\":objCount, \r\n          \"filledCount\":1, \r\n          \"data\":objData,\r\n          \"range\":objRange,\r\n          \"subPropertyOf\":objSubPropertyOf\r\n        };\r\n        // We push this tempObj onto keyColNeighbours\r\n        keyColNeighbours.push(tempObj)\r\n\r\n        // We now need to reset neighbourCount, neighbourToAdd, neighbourRange, neighbourSubPropertyOf, and valuesToAdd\r\n        neighbourCount = 1;\r\n        neighbourToAdd = curNeighbour;\r\n        valuesToAdd = [type === \"subject\" ? removePrefix(processedBinding[i].o.value) : removePrefix(processedBinding[i].s.value)];\r\n        neighbourRange = processedBinding[i].range !== undefined ? processedBinding[i].range.value : \"\";\r\n        neighbourSubPropertyOf = processedBinding[i].subPropertyOf !== undefined ? processedBinding[i].subPropertyOf.value : \"\";\r\n      }\r\n    }\r\n    // Now, after the loop is done, we need to do one more iteration to determine how we want to add the last neighbour.\r\n    \r\n    // set value.\r\n    let objValue = neighbourToAdd;\r\n    // set label. We want to change the neighbour label if type === \"object\".\r\n    let objLabel = neighbourToAdd;\r\n    if (type === \"object\") {\r\n      objLabel = \"is \" + objLabel + \" of\";\r\n    }\r\n    // set type\r\n    let objType = type;\r\n    // set count\r\n    let objCount = neighbourCount;\r\n    // set data. Let's do some processing here: we want to ensure that valuesToAdd has a max length of maxNeighbourCount\r\n    let objData = valuesToAdd.length <= maxNeighbourCount ? valuesToAdd : valuesToAdd.slice(0, maxNeighbourCount);\r\n    // set range\r\n    let objRange = neighbourRange;\r\n    // set subPropertyOf\r\n    let objSubPropertyOf = neighbourSubPropertyOf;\r\n\r\n    // Set object from all its attributes\r\n    let tempObj = {\r\n        \"value\":objValue, \r\n        \"label\":objLabel, \r\n        \"type\":objType, \r\n        \"count\":objCount, \r\n        \"filledCount\":1, \r\n        \"data\":objData,\r\n        \"range\":objRange,\r\n        \"subPropertyOf\":objSubPropertyOf\r\n      };\r\n    // we push this tempObj onto keyColNeighbours\r\n    keyColNeighbours.push(tempObj)\r\n  }\r\n\r\n  // console.log(keyColNeighbours);\r\n  // console.log(processedBinding);\r\n\r\n  return keyColNeighbours;\r\n}\r\n\r\n// This helper function is designed to process the result bindings passed from contextCellPreview.\r\n// It should share some similarity with updateKeyColNeighbours\r\n\r\n// It takes two parameters:\r\n//  1) array \"resultsBinding\", storing the returned result of queryURL from Virtuoso\r\n//  2) string \"type\", either \"subject\" or \"object\"\r\n\r\n// It returns previewInfoArray, a list of objects used to display a cell's preview info\r\n// This object has two properties:\r\n// 1) key: a string\r\n// 2) value: an array of strings\r\nfunction updatePreviewInfo(resultsBinding, type) {\r\n  // console.log(previewInfoArray);\r\n  // console.log(resultsBinding);\r\n  // console.log(type);\r\n\r\n  // Let's do some preprocessing of resultsBinding. We want to do sorting, deduping, and some filtering.\r\n\r\n  // we first filter out those in resultsBinding according to three criterias\r\n\r\n  // 1) p.value.slice(28).length must > 1\r\n  // 2) p.value must include \"ontology\" or \"property\" (so it is one of dbo:XXXX or dbp:XXXX)\r\n  // 3) p.value must not include certain strings (which likely correspond to meaningless attributes)\r\n\r\n  let processedBinding = resultsBinding.filter(\r\n    a => a.p.value.slice(28).length > 1 &&\r\n         (a.p.value.includes(\"ontology\") || a.p.value.includes(\"property\")) &&\r\n         !(a.p.value.includes(\"wikiPage\") \r\n         || a.p.value.includes(\"align\") \r\n         || a.p.value.includes(\"abstract\") \r\n         || a.p.value.includes(\"caption\") \r\n         || a.p.value.includes(\"image\") \r\n         || a.p.value.includes(\"width\") \r\n         || a.p.value.includes(\"thumbnail\") \r\n         || a.p.value.includes(\"blank\")\r\n         || a.p.value.includes(\"fec\")\r\n         || a.p.value.includes(\"viaf\")\r\n         || a.p.value.includes(\"soundRecording\")\r\n         || a.p.value.includes(\"votesmart\")\r\n         || a.p.value.includes(\"wordnet\")\r\n         || a.p.value.includes(\"float\")\r\n         || a.p.value.includes(\"bbr\")\r\n         || a.p.value === \"http://dbpedia.org/property/alt\"\r\n         || a.p.value === \"http://dbpedia.org/property/by\"\r\n         || a.p.value === \"http://dbpedia.org/property/onlinebooks\"\r\n         || a.p.value === \"http://dbpedia.org/property/signature\"\r\n         || a.p.value === \"http://dbpedia.org/property/video\"\r\n         || a.p.value === \"http://dbpedia.org/property/logo\"\r\n         || a.p.value === \"http://dbpedia.org/property/shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/body\"\r\n         || a.p.value === \"http://dbpedia.org/property/hShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/hBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/aShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/aBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Body\"\r\n         || a.p.value === \"http://dbpedia.org/property/nba\"\r\n         || a.p.value === \"http://dbpedia.org/ontology/termPeriod\"\r\n         )\r\n  );\r\n\r\n\r\n  // we then sort the resultsBinding by p.value.slice(28)\r\n  processedBinding = processedBinding.sort((a, b) =>\r\n    a.p.value.slice(28) > b.p.value.slice(28) ? 1 : -1\r\n  );\r\n\r\n  // Now let's create the previewInfoArray based on processedBinding\r\n  // console.log(processedBinding);\r\n\r\n  let previewInfoArray = [];\r\n\r\n  if (processedBinding.length > 1) {\r\n    // We first push on the first element from processedBinding\r\n\r\n    previewInfoArray.push(\r\n      {\r\n        \"key\": type === \"subject\" ? processedBinding[0].p.value.slice(28) : \"is \"+processedBinding[0].p.value.slice(28)+\" of\",\r\n        \"value\": [removePrefix(processedBinding[0].o.value)],\r\n      }\r\n    )\r\n    let curIndex = 0;\r\n    for (let i = 1; i < processedBinding.length; ++i) {\r\n      let curNeighbour = processedBinding[i].p.value.slice(28);\r\n      let prevNeighbour = processedBinding[i-1].p.value.slice(28);\r\n      // console.log(curNeighbour);\r\n      // console.log(prevNeighbour);\r\n\r\n      // If this neighbour is the same as the previous one, we want to append this neighbour's value\r\n      // to the element's value array in previewInfoArray at curIndex\r\n      if (curNeighbour === prevNeighbour) {\r\n        // Note, we dont want each element in previewInfoArray to contain too many elements (5), so we do a check here.\r\n        if (previewInfoArray[curIndex].value.length < maxNeighbourCount) {\r\n          previewInfoArray[curIndex].value.push(removePrefix(processedBinding[i].o.value));\r\n        }\r\n      }\r\n      // Else, we push a fresh element onto previewInforArray, and update curIndex\r\n      else {\r\n        previewInfoArray.push(\r\n          {\r\n            \"key\": type === \"subject\" ? processedBinding[i].p.value.slice(28) : \"is \"+processedBinding[i].p.value.slice(28)+\" of\",\r\n            \"value\":[removePrefix(processedBinding[i].o.value)],\r\n          }\r\n        )\r\n        ++curIndex;\r\n      }\r\n    }\r\n  }\r\n\r\n  // At the current stage, previewInfoArray contains all the dbo and dbp neighbours. \r\n  // Let's also add support for the DB categories, so that those can be displayed in cell preview as well.\r\n  let categoryPreviewInfoArray = [];\r\n  if (type === \"subject\") {\r\n    let categoryBinding = resultsBinding.filter(\r\n      a => a.p.value.includes(\"dc/terms/subject\")\r\n    ) \r\n    // console.log(categoryBinding);\r\n    if (categoryBinding.length > 0) {\r\n      categoryPreviewInfoArray.push(\r\n        {\r\n          \"key\": \"Category\",\r\n          \"value\": [categoryBinding[0].o.value.slice(37)]\r\n        }\r\n      );\r\n      for (let i = 1; i < categoryBinding.length; ++i) {\r\n        categoryPreviewInfoArray[0].value.push(categoryBinding[i].o.value.slice(37));\r\n      }\r\n    }\r\n  }\r\n  // We concat categoryPreviewInfoArray with previewInfoArray.\r\n  previewInfoArray = categoryPreviewInfoArray.concat(previewInfoArray);\r\n  // console.log(previewInfoArray);\r\n\r\n  return previewInfoArray;\r\n}\r\n\r\n// This function processes the resultsBinding passed from handleStartSubject, to create the info needed for Action Panel.\r\n// It should share some similarity with updatePreviewInfo\r\n\r\n// It takes one parameter:\r\n// 1) array \"resultsBinding\", storing the returned result of queryURL from Virtuoso\r\n// Note: \"type\" parameter is not needed, since we are not dealing with object neighbours\r\n\r\nfunction updateFirstColSelection(resultsBinding) {\r\n\r\n  // we first filter out those in resultsBinding according to three criterias\r\n  // Note: the second criteria is a bit different from updateKeyColNeighbours and updatePreviewInfo\r\n\r\n  // 1) p.value.slice(28).length must > 1\r\n  // 2) p.value must include \"ontology\", \"property\", or \"dc/terms/subject\" (so it is one of dbo:XXXX, dbp:XXXX, or dct:subject)\r\n  // 3) p.value must not include certain strings (which likely correspond to meaningless attributes)\r\n\r\n  let processedBinding = resultsBinding.filter(\r\n    a => a.p.value.slice(28).length > 1 \r\n         &&\r\n         (a.p.value.includes(\"ontology\") \r\n         || a.p.value.includes(\"property\")\r\n         || a.p.value.includes(\"dc/terms/subject\")\r\n         ) \r\n         &&\r\n         !(a.p.value.includes(\"wikiPage\") \r\n         || a.p.value.includes(\"align\") \r\n         || a.p.value.includes(\"abstract\") \r\n         || a.p.value.includes(\"caption\") \r\n         || a.p.value.includes(\"image\") \r\n         || a.p.value.includes(\"width\") \r\n         || a.p.value.includes(\"thumbnail\") \r\n         || a.p.value.includes(\"blank\")\r\n         || a.p.value.includes(\"fec\")\r\n         || a.p.value.includes(\"viaf\")\r\n         || a.p.value.includes(\"soundRecording\")\r\n         || a.p.value.includes(\"votesmart\")\r\n         || a.p.value.includes(\"wordnet\")\r\n         || a.p.value.includes(\"float\")\r\n         || a.p.value.includes(\"bbr\")\r\n         || a.p.value === \"http://dbpedia.org/property/alt\"\r\n         || a.p.value === \"http://dbpedia.org/property/by\"\r\n         || a.p.value === \"http://dbpedia.org/property/onlinebooks\"\r\n         || a.p.value === \"http://dbpedia.org/property/signature\"\r\n         || a.p.value === \"http://dbpedia.org/property/video\"\r\n         || a.p.value === \"http://dbpedia.org/property/logo\"\r\n         || a.p.value === \"http://dbpedia.org/property/shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/body\"\r\n         || a.p.value === \"http://dbpedia.org/property/hShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/hBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/aShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/aBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Body\"\r\n         || a.p.value === \"http://dbpedia.org/property/nba\"\r\n         || a.p.value === \"http://dbpedia.org/ontology/termPeriod\"\r\n         )\r\n  );\r\n  \r\n  // We then sort the processedBinding by some criterias.\r\n\r\n  // First Criteria: dct:subjects should show up at the top of the list, sorted by o.value.slice(37).\r\n\r\n  // Since a customized sort is a bit hard to write, let's break this array into two, sort each one, then concat them back together\r\n  let dctArray = [];\r\n  let dbopArray = [];\r\n  for (let i = 0; i < processedBinding.length; ++i) {\r\n    if (processedBinding[i].p.value === \"http://purl.org/dc/terms/subject\") {\r\n      dctArray.push(processedBinding[i]);\r\n    }\r\n    else {\r\n      dbopArray.push(processedBinding[i]);\r\n    }\r\n  }\r\n\r\n  // We first sort the dctArray by o.value.slice(37).\r\n\r\n  dctArray.sort((a, b) => (a.o.value.slice(37) < b.o.value.slice(37) ? -1 : 1));\r\n\r\n  // We then sort dbop array by the following rules:\r\n  // Those that are dbr (so without a datatype) shows up higher\r\n  // Then those with a smaller count shows up higher\r\n  // Then alphabetical order.\r\n\r\n  // The following code gets the count for each property(or neighbour)\r\n  dbopArray.sort((a, b) => (a.p.value.slice(28) < b.p.value.slice(28) ? -1 : 1));\r\n  if (dbopArray.length > 0) {\r\n    dbopArray[0].p.count = getPCount(dbopArray[0].p.value, dbopArray);\r\n  }\r\n  for (let i = 1; i < dbopArray.length; ++i) {\r\n    let prevNeighbour = dbopArray[i-1];\r\n    let curNeighbour = dbopArray[i];\r\n    if (prevNeighbour.p.value === curNeighbour.p.value) {\r\n      curNeighbour.p.count = prevNeighbour.p.count;\r\n    }\r\n    else {\r\n      curNeighbour.p.count = getPCount(dbopArray[i].p.value, dbopArray);\r\n    }\r\n  }\r\n\r\n  // The following code sorts the array\r\n  dbopArray.sort(function (a, b) {\r\n    if (a.o.datatype === undefined && b.o.datatype !== undefined) {\r\n      return -1;\r\n    }\r\n    else if (b.o.datatype === undefined && a.o.datatype !== undefined) {\r\n      return 1;\r\n    }\r\n    else {\r\n      if (a.p.count === b.p.count) {\r\n        return a.p.value.slice(28) < b.p.value.slice(28) ? -1 : 1;\r\n      }\r\n      else {\r\n        return a.p.count < b.p.count ? -1 : 1;\r\n      }\r\n    }\r\n  });\r\n  // console.log(dbopArray);\r\n\r\n  // At this stage, we have finished sorting both dctArray and dbopArray. Let's put them back together.\r\n  processedBinding = dctArray.concat(dbopArray);\r\n\r\n  // console.log(processedBinding);\r\n\r\n  // Now we need to loop over the processedBinding, and create an array of objects. \r\n  // This array should have length equal to processedBinding.length.\r\n  // Each object should have 6 attributes.\r\n  // 1) pValue: value of predicate\r\n  // 2) pDataset: which dataset does this predicate belong to (one of dbo, dbp, and dct)\r\n  // 3) oValue: value of object\r\n  // 4) oType: datatype of object, such as \"http://www.w3.org/2001/XMLSchema#date\". This can be empty.\r\n\r\n  // 5) value: same as pValue: historical code\r\n  // 6) label: same as pValue: historical code\r\n\r\n  let firstColSelection = [];\r\n\r\n  for (let i = 0; i < processedBinding.length; ++i) {\r\n    // First case: current neighbour is from dct:subject\r\n    if (processedBinding[i].p.value === \"http://purl.org/dc/terms/subject\") {\r\n      firstColSelection.push(\r\n        {\r\n          \"pValue\":\"category\",\r\n          \"pDataset\":\"dct\",\r\n          \"oValue\":processedBinding[i].o.value.slice(37),\r\n          \"oType\":\"\",\r\n          \"value\":\"category\",\r\n          \"label\":processedBinding[i].o.value.slice(37),\r\n        }\r\n      )\r\n    }\r\n    // Second case: current neighbour is from dbo or dbp\r\n    else {\r\n      firstColSelection.push(\r\n        {\r\n          \"pValue\":processedBinding[i].p.value.slice(28),\r\n          \"pDataset\":processedBinding[i].p.value.includes(\"property\") ? \"dbp\" : \"dbo\",\r\n          \"oValue\":removePrefix(processedBinding[i].o.value),\r\n          \"oType\":processedBinding[i].o.datatype === undefined ? \"\" : processedBinding[i].o.datatype,\r\n          \"value\":processedBinding[i].p.value.slice(28),\r\n          \"label\":processedBinding[i].p.value.slice(28)+\":\"+removePrefix(processedBinding[i].o.value),\r\n        }\r\n      )\r\n    }\r\n  }\r\n  return firstColSelection;\r\n}\r\n\r\n\r\n// This function takes in the clean data for the first table, clean data for the second table, and colMapping between these two tables\r\n// And returns the unioned clean data for the first table\r\n\r\nfunction tableConcat(tableData, otherTableData, tempMapping) {\r\n  // We want to correctly modify tableDataExplore, based on colMapping.\r\n  // If colMapping is null for some column, we want to set the data as \"N/A\"\r\n  // console.log(tableDataExplore);\r\n\r\n  // We first make some small modifications to colMapping, as we have inserted a new column into otherTableData and tableDataExplore\r\n  for (let j = 0; j < tempMapping.length; ++j) {\r\n    if (tempMapping[j] !== \"null\") {\r\n      tempMapping[j]++;\r\n    }\r\n  }\r\n  tempMapping.splice(0, 0, 0); // insert element 0 at the first position of colMapping, deleting 0 elements\r\n\r\n  // Now we insert the data into dataToAdd. dataToAdd will be concatenated with tableDataExplore\r\n  let dataToAdd = [];\r\n  for (let i = 0; i < otherTableData.length; ++i) {\r\n    let tempRow = [];\r\n    for (let j = 0; j < tempMapping.length; ++j) {\r\n      let colInNew = tempMapping[j];\r\n      if (colInNew !== \"null\") {\r\n        tempRow.push(otherTableData[i][colInNew]);\r\n      } else {\r\n        tempRow.push({ data: \"N/A\" });\r\n      }\r\n    }\r\n    dataToAdd.push(tempRow);\r\n  }\r\n  return tableData.concat(dataToAdd);\r\n}\r\n\r\nfunction HTMLCleanCell(str) {\r\n  // Note that this function also removes leading and trailing whitespaces\r\n  if (str[str.length - 1] === \"\\n\") {\r\n    return str.slice(0, -1).trim().split(\"[\")[0];\r\n  } else {\r\n    return str.trim().split(\"[\")[0];\r\n  }\r\n}\r\n\r\n// This function returns an array of table objects that are unionable with the selected table.\r\n\r\n// It taks two parameters:\r\n//  1) HTML \"tableHTML\" storing the HTML of the selected table\r\n//  2) HTML \"pageHTML\", storing the HTML of a sibling page\r\n\r\n// Table object has four attributes: isOpen, data, unionScore, colMapping\r\n\r\n// Once semantic mapping feature is added, the colMapping will be updated\r\n\r\nfunction findTableFromHTML(\r\n  tableHeader,\r\n  pageHTML,\r\n  selectedClassAnnotation,\r\n  semanticEnabled,\r\n  unionCutOff,\r\n  pageName\r\n) {\r\n  // We first get the column names of the table in the table panel, using this.state.tableHeader.\r\n  // Note: the index starts from 1 because we don't care about the originURL column (column 0). ***\r\n  let originCols = [];\r\n  // BUGFIX needs to be applied here. (Seems to be fixed)\r\n  // console.log(tableHeader);\r\n  for (let j = 1; j < tableHeader.length; ++j) {\r\n    let curValue = \"\"\r\n    for (let k = 0; k < tableHeader[j].length; ++k) {\r\n      curValue+=tableHeader[j][k].value;\r\n    }\r\n    originCols.push(curValue);\r\n  }\r\n\r\n  // We now fetch all the tables from pageHTML (the current sibling page)\r\n  let doc = new DOMParser().parseFromString(pageHTML, \"text/html\");\r\n  let wikiTablesFound = doc.getElementsByClassName(\"wikitable\");\r\n  let tablesFound = [];\r\n  for (let i = 0; i < wikiTablesFound.length; ++i) {\r\n    // console.log(wikiTablesFound[i].tagName);\r\n    if (wikiTablesFound[i].tagName === \"TABLE\" && wikiTablesFound[i].rows !== undefined) {\r\n      tablesFound.push(wikiTablesFound[i]);\r\n    }\r\n  }\r\n\r\n  // console.log(tablesFound);\r\n\r\n  // This is the array we will return.\r\n  let tableArray = [];\r\n\r\n  // We now loop through all the tables found on this sibling page, and see if they are unionable with the selected table\r\n  let tablePromise = [];\r\n  for (let i = 0; i < tablesFound.length; ++i) {\r\n    tablePromise.push(\r\n      findTableFromTable(\r\n        tablesFound[i],\r\n        originCols,\r\n        selectedClassAnnotation,\r\n        semanticEnabled,\r\n        unionCutOff,\r\n        pageName\r\n      )\r\n    );\r\n  }\r\n\r\n  return allPromiseReady(tablePromise).then((values) => {\r\n    for (let i = 0; i < values.length; ++i) {\r\n      tableArray.push(values[i]);\r\n    }\r\n    // we filter the tableArray here by removing those tables that do not have a high enough unionScore\r\n    // Note: In the unfiltered table array, we are using -1 to represent tables with a low unionScore\r\n    tableArray = tableArray.filter(function (x) {\r\n      return x !== -1;\r\n    });\r\n    // console.log(tableArray);\r\n    // We sort the tableArray here by unionScore\r\n    tableArray.sort((a, b) => (a.unionScore < b.unionScore ? 1 : -1));\r\n    return Promise.resolve(tableArray);\r\n  });\r\n}\r\n\r\n// This function takes in four parameters:\r\n\r\n// 1) a tableHTML\r\n// 2) originCols (denoting the columns names of the selected table)\r\n// 3) class annotation of the selected table\r\n// 4) whether semantic mapping is enabled or not\r\n\r\n// and return a table Object with properties: isOpen, unionScore, colMapping, and data\r\nfunction findTableFromTable(\r\n  tableHTML,\r\n  originCols,\r\n  selectedClassAnnotation,\r\n  semanticEnabled,\r\n  unionCutOff,\r\n  pageName\r\n) {\r\n  // Define some constants\r\n  const ontologySize = 780;\r\n  const matchCutOff = 0.999;\r\n\r\n  // We first fetch the cleaned column names of the current table\r\n  // console.log(pageName);\r\n  // console.log(tableHTML);\r\n  // console.log(tableHTML.rows);\r\n  let curHeaderCells = tableHTML.rows[0].cells;\r\n  let newCols = []; // stores the cleaned column names of the this table. Let's consider using this value for display as well.\r\n  let remainCols = []; // stores an array of the indices of the columns of the current table that are not yet mapped\r\n  let searchCols = []; // stores an array of the indices of the columns from the selected table that are not yet mapped\r\n\r\n  // We potentially need to resort to semantic mapping. So let's create a promiseArray.\r\n  // This promiseArray will only contain one element\r\n  let promiseArray = [];\r\n\r\n  for (let j = 0; j < curHeaderCells.length; ++j) {\r\n    let headerName = HTMLCleanCell(curHeaderCells[j].innerText);\r\n    newCols.push(headerName);\r\n    remainCols.push(j);\r\n  }\r\n\r\n  // we want to make sure that newTable has more than half of the columns of the selectedTable\r\n  // because we require a >50% unionScore\r\n  // If it does not, we ignore this table automatically\r\n\r\n  if (newCols.length >= originCols.length * unionCutOff) {\r\n    // We use the proposed algo here.\r\n    // First we set the union score and column Mapping\r\n    let unionScore = 0;\r\n    let colMapping = [];\r\n    // We loop through the column headers in originCol, and see if they exist in newCols.\r\n    for (let k = 0; k < originCols.length; ++k) {\r\n      let curIndex = newCols.indexOf(originCols[k]);\r\n      if (curIndex !== -1) {\r\n        // This means the new table also contains column k from the selected table\r\n        // Thus we have found a mapping. We push it onto colMapping.\r\n        colMapping.push(curIndex);\r\n        unionScore += 1 / originCols.length;\r\n      } else {\r\n        colMapping.push(\"null\");\r\n      }\r\n    }\r\n    // In here we do a bit of string matching\r\n    // Chances are: tables from sibling pages with the same number of columns as the selected table, with structual invariability,\r\n    // is likely to be the \"same\" table as the selected on, we give it a chance for string matching\r\n    if (newCols.length === originCols.length) {\r\n      let sameStructure = true;\r\n      for (let i = 0; i < colMapping.length; ++i) {\r\n        if (colMapping[i] !== \"null\" && colMapping[i] !== i) {\r\n          sameStructure = false;\r\n          break;\r\n        }\r\n      }\r\n      if (sameStructure === true) {\r\n        for (let i = 0; i < colMapping.length; ++i) {\r\n          if (colMapping[i] === \"null\") {\r\n            if (\r\n              newCols[i].includes(originCols[i]) ||\r\n              originCols[i].includes(newCols[i])\r\n            ) {\r\n              colMapping[i] = i;\r\n              unionScore += 1 / originCols.length;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // console.log(colMapping);\r\n      // If unionScore is 1, and newCols.length is equal to originCols.length, we want to reward it with 0.01 unionScore\r\n      // This helps us to rank the tables with the exact same column headers a bit higher\r\n      if (unionScore === 1) {\r\n        unionScore += 0.01;\r\n      }\r\n    }\r\n\r\n    // We proceed differently based on whether semantic mapping is enabled or not\r\n\r\n    // Case 1: semantic mapping is enabled\r\n\r\n    if (semanticEnabled === \"enabled\") {\r\n      // If we are not finding a perfect match, we want to do use semantic mapping here to see if it's possible to map the unmapped columns\r\n      // Note: this part is expected to take quite some time. Now it's implemented just for testing purposes\r\n      if (unionScore < 0.999) {\r\n        // We want to remove from remainCols the columns that are already mapped\r\n        // The remaining will be the columns that we can still use from the current table\r\n        remainCols = remainCols.filter(function (x) {\r\n          return colMapping.indexOf(x) < 0;\r\n        });\r\n        for (let i = 0; i < colMapping.length; ++i) {\r\n          if (colMapping[i] === \"null\") {\r\n            searchCols.push(i);\r\n          }\r\n        }\r\n        // if (newCols[1] === \"Scorer\") {\r\n        // console.log(\"We still need to find these columns from the original table: \"+searchCols);\r\n        // console.log(\"These columns are still available for use: \"+remainCols);\r\n        // console.log(\"The current column mappings are \"+colMapping);\r\n        // console.log(\"Here are the class annotations of the search columns: \")\r\n        // for (let i=0;i<searchCols.length;++i) {\r\n        //   console.log(selectedClassAnnotation[searchCols[i]]);\r\n        // }\r\n        // }\r\n\r\n        // Now, searchCols stores the columns from the selected table that have not been mapped yet\r\n        // and remainCols stores the columns from the current table that can still be used for mapping\r\n        // Let's ask a query to find the class annotations for the remainCols\r\n        // if (remainCols.length > 0) {\r\n        promiseArray.push(findClassAnnotation(tableHTML, remainCols, pageName));\r\n        // }\r\n      }\r\n\r\n      // Because the return statement is here, it may be possible that we are pushing nothing onto the promiseArray!!!\r\n      // There is no need to worry about it.\r\n      return allPromiseReady(promiseArray).then((values) => {\r\n        // First, if we are in the perfect match case, we want to retrun straight away\r\n        if (unionScore >= 0.999) {\r\n          return Promise.resolve({\r\n            isOpen: false,\r\n            unionScore: unionScore,\r\n            colMapping: colMapping,\r\n            data: tableHTML,\r\n            title: newCols,\r\n          });\r\n        }\r\n        // Else, we want to look for semantic mapping opportunities\r\n        else {\r\n          // create a copy of values\r\n\r\n          // Note!!!! Sometimes the tableHTML only has one row, so values[0] would have a length of zero, in which case our algo breaks down\r\n          // Let's prevent it from happening\r\n          let remainClassAnnotation = values[0].slice();\r\n          if (remainClassAnnotation.length > 0) {\r\n            // let remainColsCopy = remainCols.slice();\r\n            // let remainClassAnnotationCopy = remainClassAnnotation.slice();\r\n            for (let i = 0; i < searchCols.length; ++i) {\r\n              let curSearchIndex = searchCols[i];\r\n              // console.log(curSearchIndex);\r\n              // console.log(selectedClassAnnotation[curSearchIndex]);\r\n\r\n              // If the class annotation for this column is empty, we skip it because there's no hope for semantic match.\r\n              // Otherwise we can work with it\r\n              if (selectedClassAnnotation[curSearchIndex].length > 0) {\r\n                // console.log(\"Current column being searched has index: \"+curSearchIndex);\r\n                // console.log(selectedClassAnnotation[curSearchIndex]);\r\n\r\n                // we loop through the remain cols and check their class annotations\r\n                for (let j = 0; j < remainCols.length; ++j) {\r\n                  // Let make sure this column does have a class annotation. Otherwise we skip it\r\n                  // console.log(remainClassAnnotation[j]);\r\n                  // Note: sometimes remainClassAnnotation[j] is undefined, which causes an error\r\n                  // if (remainClassAnnotation[j] === undefined) {\r\n                  //   console.log(\"This case is causing an error\");\r\n                  //   console.log(\"Remain cols are \"+remainCols);\r\n                  //   console.log(\"Remain class annotations are \"+remainClassAnnotation);\r\n                  //   console.log(\"Original remain cols are \"+remainColsCopy);\r\n                  //   console.log(\"original remain class annotations are \"+remainClassAnnotationCopy);\r\n                  //   console.log(\"Table HTML is \");\r\n                  //   console.log(tableHTML);\r\n                  //   console.log(values[0]);\r\n                  // }\r\n                  if (remainClassAnnotation[j].length > 0) {\r\n                    // console.log(\"Remain column index is \"+remainCols[j]);\r\n                    // console.log(\"Its class annotation is \"+remainClassAnnotation[j]);\r\n                    // Let make special cases when the any of search column class and current column class is [Number]\r\n                    // If they are both [Number], we will give it a match\r\n                    // Else it's not a match\r\n                    if (\r\n                      selectedClassAnnotation[curSearchIndex][0] === \"Number\" ||\r\n                      remainClassAnnotation[j][0] === \"Number\"\r\n                    ) {\r\n                      // This case we have a match\r\n                      if (\r\n                        selectedClassAnnotation[curSearchIndex][0] ===\r\n                        remainClassAnnotation[j][0]\r\n                      ) {\r\n                        // We need to update the colMapping and unionScore\r\n                        colMapping[curSearchIndex] = remainCols[j];\r\n                        unionScore += 1 / originCols.length;\r\n                        // we also need to remove this column from remainClassAnnotation and remainCols because we cannot use it anymore\r\n                        remainCols.splice(j, 1);\r\n                        remainClassAnnotation.splice(j, 1);\r\n                        // Also, since we are removing element from remainCols array and remainClassAnnotation array, we need to decrement\r\n                        // j to go back to the correct posiition\r\n                        --j;\r\n                        // Also we need to call break to prevent further looping: we are done with this search column\r\n                        break;\r\n                      }\r\n                      // Else there is no match. We simply ignore it.\r\n                    }\r\n                    // If neither of them is [Number], we need to use the test statistic\r\n                    else {\r\n                      // Let's first find the array intersection of selectedClassAnnotation[curSearchIndex] and remainClassAnnotation[j]\r\n                      let intersection = selectedClassAnnotation[\r\n                        curSearchIndex\r\n                      ].filter(function (x) {\r\n                        return remainClassAnnotation[j].indexOf(x) >= 0;\r\n                      });\r\n                      // console.log(\"Intersection is \"+intersection);\r\n                      // We only want to consider two column unionable if they at least have some intersections.\r\n                      if (intersection.length > 0) {\r\n                        let totalSuccess =\r\n                          selectedClassAnnotation[curSearchIndex].length;\r\n                        let numTrial = remainClassAnnotation[j].length;\r\n                        let numSuccess = intersection.length;\r\n                        let testStat = hyperCDF(\r\n                          numSuccess,\r\n                          ontologySize,\r\n                          totalSuccess,\r\n                          numTrial\r\n                        );\r\n                        // If testStat is larger than matchCutOff, we consider it a match\r\n                        if (testStat > matchCutOff) {\r\n                          // We need to update the colMapping and unionScore\r\n                          colMapping[curSearchIndex] = remainCols[j];\r\n                          unionScore += 1 / originCols.length;\r\n                          // we also need to remove this column from remainClassAnnotation and remainCols because we cannot use it anymore\r\n                          remainCols.splice(j, 1);\r\n                          remainClassAnnotation.splice(j, 1);\r\n                          // Also, since we are removing element from remainCols array and remainClassAnnotation array, we need to decrement\r\n                          // j to go back to the correct posiition\r\n                          --j;\r\n                          // Also we need to call break to prevent further looping: we are done with this search column\r\n                          break;\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          // console.log(\"Remain columns are \"+)\r\n          // console.log(\"Here is table HTML\");\r\n          // console.log(tableHTML);\r\n          // console.log(\"Here are the class annotations for columns that still need mapping\");\r\n          // for (let i=0;i<searchCols.length;++i) {\r\n          //   console.log(selectedClassAnnotation[searchCols[i]]);\r\n          // }\r\n          // console.log(\"The remain columns are \"+remainCols);\r\n          // console.log(\"Here are the class annotations for the remaining columns\");\r\n          // console.log(values);\r\n          // console.log(\"This is column mapping \"+colMapping);\r\n          // console.log(\"Union score is \"+unionScore);\r\n\r\n          // We need to loop through the searchCols\r\n\r\n          // We push on tables with unionScore > unionCutOff\r\n          if (unionScore >= unionCutOff) {\r\n            // console.log(\"This table is unionable!\");\r\n            // console.log(\"Table is \"+tableHTML);\r\n            // console.log(\"Union Score is \"+unionScore);\r\n            // console.log(\"Column mapping is \"+colMapping);\r\n            // tableArray.push({\"isOpen\":false,\"unionScore\":unionScore,\"colMapping\":colMapping,\"data\":tablesFound[i]});\r\n            // console.log(colMapping);\r\n            return Promise.resolve({\r\n              isOpen: false,\r\n              unionScore: unionScore,\r\n              colMapping: colMapping,\r\n              data: tableHTML,\r\n              title: newCols,\r\n            });\r\n          } else {\r\n            return Promise.resolve(-1);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // Case 2: semantic mapping is disabled.\r\n    // In this case we check if the unionScore is high enough directly, without going through the semantic mapping process\r\n    else {\r\n      // We push on tables with unionScore > unionCutOff\r\n      if (unionScore >= unionCutOff) {\r\n        // console.log(\"This table is unionable!\");\r\n        // console.log(\"Table is \"+tableHTML);\r\n        // console.log(\"Union Score is \"+unionScore);\r\n        // console.log(\"Column mapping is \"+colMapping);\r\n        // tableArray.push({\"isOpen\":false,\"unionScore\":unionScore,\"colMapping\":colMapping,\"data\":tablesFound[i]});\r\n        // console.log(colMapping);\r\n        return Promise.resolve({\r\n          isOpen: false,\r\n          unionScore: unionScore,\r\n          colMapping: colMapping,\r\n          data: tableHTML,\r\n          title: newCols,\r\n        });\r\n      } else {\r\n        return Promise.resolve(-1);\r\n      }\r\n    }\r\n  }\r\n  // This else clause means that this table does not even have enough number of columns.\r\n  // So we know right away it cannot be a match. So we return -1 (failure)\r\n  else {\r\n    return Promise.resolve(-1);\r\n  }\r\n}\r\n\r\n// This function takes in the HTML of a table, and returns a Promise that resolves to the class annotation for all the columns of the table\r\nfunction findClassAnnotation(tableHTML, remainCols, pageName) {\r\n  // console.log(\"Page Name is: \"+pageName);\r\n  // console.log(\"Table HTML is: \");\r\n  // console.log(tableHTML);\r\n  // console.log(remainCols);\r\n  let selectedTable = tableHTML;\r\n  let tempTable = [];\r\n\r\n  // We first fetch the plain, unprocessed version of the table.\r\n  // Note: this function potentially needs to be modified.\r\n  // Instead of using innerText for cell data, if its href exists, we should use its href instead\r\n  for (let i = 0; i < selectedTable.rows.length; ++i) {\r\n    let tempRow = [];\r\n    for (let j = 0; j < selectedTable.rows[i].cells.length; ++j) {\r\n      let curCellText = HTMLCleanCell(selectedTable.rows[i].cells[j].innerText);\r\n\r\n      // Note: We want to use the href as data for the first column (if such href exists) instead of its innerText.\r\n      if (i === 1) {\r\n        // We get all the links from this current cell (there may be more than one)\r\n        let anchorArray = selectedTable.rows[i].cells[j].getElementsByTagName(\r\n          \"a\"\r\n        );\r\n        // we want to use the first valid link as the search element for this cell\r\n        // Definition of being valid: its associated innerText is not empty (thus not the link of a picture)\r\n        //                            and it is not a citation (so [0] is not \"[\")\r\n        for (let k = 0; k < anchorArray.length; ++k) {\r\n          if (\r\n            anchorArray[k].innerText !== \"\" &&\r\n            anchorArray[k].innerText[0] !== \"[\"\r\n          ) {\r\n            let hrefArray = anchorArray[k].href.split(\"/\");\r\n            // console.log(\"InnerText is \"+anchorArray[k].innerText);\r\n            // console.log(\"It exists in DBPedia as \"+hrefArray[hrefArray.length-1]);\r\n            curCellText = hrefArray[hrefArray.length - 1];\r\n            // if (curCellText.includes(\"UEFA\")) {\r\n            // console.log(curCellText);\r\n            // }\r\n          }\r\n        }\r\n      }\r\n      let curRowSpan = selectedTable.rows[i].cells[j].rowSpan;\r\n      let curColSpan = selectedTable.rows[i].cells[j].colSpan;\r\n      // console.log(curColSpan);\r\n      tempRow.push({\r\n        data: curCellText,\r\n        rowSpan: curRowSpan,\r\n        colSpan: curColSpan,\r\n      });\r\n    }\r\n    tempTable.push(tempRow);\r\n  }\r\n\r\n  // We first deal with colspans.\r\n  for (let i = 0; i < tempTable.length; ++i) {\r\n    for (let j = 0; j < tempTable[i].length; ++j) {\r\n      let curCellText = tempTable[i][j].data;\r\n      if (tempTable[i][j].colSpan > 1) {\r\n        for (let k = 1; k < tempTable[i][j].colSpan; ++k) {\r\n          tempTable[i].splice(j + 1, 0, {\r\n            data: curCellText,\r\n            rowSpan: 1,\r\n            colSpan: 1,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // We now deal with rowspans.\r\n  for (let i = 0; i < tempTable.length; ++i) {\r\n    for (let j = 0; j < tempTable[i].length; ++j) {\r\n      let curCellText = tempTable[i][j].data;\r\n      if (tempTable[i][j].rowSpan > 1) {\r\n        for (let k = 1; k < tempTable[i][j].rowSpan; ++k) {\r\n          // Note: the if condition is necessary to take care of error conditions (the original HTML table element has errors)\r\n          if (i + k < tempTable.length) {\r\n            tempTable[i + k].splice(j, 0, {\r\n              data: curCellText,\r\n              rowSpan: 1,\r\n              colSpan: 1,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // console.log(\"Table data is: \");\r\n  // console.log(tempTable);\r\n\r\n  // Now tempTable contains the clean data we can use\r\n  let promiseArray = [];\r\n  // We take the minimum of (1, tempTable.length-1) number of values from each column to determine its class annotation\r\n  // Note!! This -1 here is important. It excludes the row corresponding to the column headers\r\n  let remainEntries = Math.min(1, tempTable.length - 1);\r\n\r\n  // This is a placeholder array to solve the 2D problem. It's a 1D array containing remainEntries number of -1's\r\n  // let placeHolderArray = [];\r\n  // let notFoundArray = [];\r\n  // for (let i=0;i<remainEntries;++i) {\r\n  //   placeHolderArray.push(-1);\r\n  //   notFoundArray.push(\"null\");\r\n  // }\r\n\r\n  // Let's loop through the table to ask our queries.\r\n  // If remainCols are undefined, we take every columns from the tempTable;\r\n  if (remainCols === undefined) {\r\n    remainCols = [];\r\n    for (let j = 0; j < tempTable[0].length; ++j) {\r\n      remainCols.push(j);\r\n    }\r\n  }\r\n\r\n  // console.log(\"Remain columns are: \"+remainCols);\r\n  for (let j = 0; j < remainCols.length; ++j) {\r\n    // console.log(\"We are taking this number of entries from this table: \"+remainEntries);\r\n    // Find the current column index\r\n    let curColIndex = remainCols[j];\r\n    // console.log(\"Current column index is: \"+curColIndex);\r\n\r\n    // Loop through the first three (or one) entries from this column\r\n    for (let i = 1; i <= remainEntries; ++i) {\r\n      // Here we make the query\r\n      let prefixURL =\r\n        \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n      let suffixURL =\r\n        \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n      // console.log(tempTable[i][j].data);\r\n      // console.log(regexReplace(tempTable[i][j].data));\r\n      // console.log(tempTable[i][curColIndex]);\r\n      let curEntry =\r\n        tempTable[i][curColIndex] === undefined\r\n          ? \"NONEXISTING\"\r\n          : regexReplace(tempTable[i][curColIndex].data);\r\n      // console.log(curEntry);\r\n      // console.log(regexReplace(tempTable[i][curColIndex].data));\r\n      // console.log(!isNaN(Number(curEntry)));\r\n      // console.log(\"Replaced data is \"+curEntry);\r\n      // console.log(curEntry === \"\");\r\n\r\n      // If we found out that the current entry is a number, we do not want to send a query.\r\n      // Note: Number(\"\") will show up as a number!! This was one of the bugs that we fixed\r\n      if (!isNaN(Number(curEntry)) && curEntry !== \"\") {\r\n        promiseArray.push(Promise.resolve([\"Number\"]));\r\n      }\r\n      // Else if we find the curEntry is too long, it will likely not exist in DBPedia\r\n      else if (curEntry.length > 40) {\r\n        promiseArray.push(Promise.resolve([\"Null\"]));\r\n      }\r\n      // Else we construct the query\r\n      else {\r\n        // console.log(\"Cur Entry is \"+curEntry);\r\n        if (curEntry === undefined || curEntry === \"\") {\r\n          curEntry = \"NONEXISTING\";\r\n        }\r\n        // if (curEntry === \"Sergio_Agüero\") {\r\n        //   console.log(\"We have another problem here\");\r\n        // }\r\n        // console.log(curEntry);\r\n        // console.log(tempTable[i][curColIndex].data);\r\n        // console.log(regexReplace(tempTable[i][curColIndex].data));\r\n        let queryBody =\r\n          \"SELECT+%3Fo%0D%0AWHERE+%7B%0D%0A++++++dbr%3A\" +\r\n          curEntry +\r\n          \"+rdf%3Atype+%3Fo.%0D%0A++++++BIND%28STR%28%3Fo%29+AS+%3FoString+%29.%0D%0A++++++FILTER%28regex%28%3FoString%2C%22dbpedia.org%2Fontology%2F%22%2C%22i%22%29%29%0D%0A%7D%0D%0A&\";\r\n        let queryURL = prefixURL + queryBody + suffixURL;\r\n        // if (curEntry === \"Bangor_City_F%5Cu002EC%5Cu002E\") {\r\n        //   console.log(\"There is something wrong with this entry\")\r\n        //   console.log(queryURL);\r\n        // }\r\n        // console.log(\"Query is constructed!\");\r\n        // if (queryURL === \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=SELECT+%3Fo%0D%0AWHERE+%7B%0D%0A++++++dbr%3A\") {\r\n        //   console.log(\"Here is where the problem occurs\");\r\n        // }\r\n        // console.log(queryURL);\r\n        promiseArray.push(fetchJSON(queryURL));\r\n        // console.log(\"Query pushed successfully. This is queryBody: \");\r\n        // console.log(queryBody);\r\n      }\r\n    }\r\n  }\r\n  return allPromiseReady(promiseArray).then((values) => {\r\n    // console.log(values);\r\n    // for (let i=0;i<values.length;++i) {\r\n    //   console.log(values[i]);\r\n    // }\r\n    // console.log(\"Query results from Virtuoso are:\");\r\n    // console.log(values);\r\n    let classAnnotation = [];\r\n    for (let j = 0; j < remainCols.length; ++j) {\r\n      // console.log(\"Number of remain cols is \"+remainCols.length);\r\n      let curColumnClass = [];\r\n      // If we are dealing with number results, we just want to push on an array with one element \"Number\"\r\n      if (values[remainEntries * j] !== undefined) {\r\n        if (values[remainEntries * j][0] !== undefined) {\r\n          if (values[remainEntries * j][0] === \"Number\") {\r\n            classAnnotation.push([\"Number\"]);\r\n          }\r\n          // If we are dealing with invalid results, we just want to push on an empty array\r\n          else if (values[remainEntries * j][0] === \"Null\") {\r\n            classAnnotation.push([]);\r\n          }\r\n        }\r\n        // if (values[remainEntries*j][0] === -1) {\r\n        //   classAnnotation.push([\"Number\"]);\r\n        // }\r\n        // // If we are dealing with invalid results, we just want to push on an empty array\r\n        // else if (values[remainEntries*j][0] === \"null\") {\r\n        //   classAnnotation.push([]);\r\n        // }\r\n        // Else, we find its class annotation from query results\r\n        else {\r\n          for (let i = 0; i < remainEntries; ++i) {\r\n            let curCellClass = [];\r\n            // console.log(remainEntries*j+i);\r\n            let bindingArray = values[remainEntries * j + i].results.bindings;\r\n            for (let k = 0; k < bindingArray.length; ++k) {\r\n              curCellClass.push(bindingArray[k].o.value.slice(28));\r\n            }\r\n            curColumnClass = [...new Set([...curColumnClass, ...curCellClass])];\r\n          }\r\n          classAnnotation.push(curColumnClass);\r\n        }\r\n      }\r\n    }\r\n    // return classAnnotation;\r\n    // console.log(\"Current class annotation is \");\r\n    // if (pageName === \"2009–10_Premier_League\") {\r\n    //   console.log(\"TableData is \");\r\n    //   console.log(tempTable);\r\n    //   console.log(classAnnotation);\r\n    // }\r\n    // console.log(classAnnotation);\r\n\r\n    return Promise.resolve(classAnnotation);\r\n  });\r\n}\r\n\r\n// This function returns a 2D array of objects representing the data for tableDataExplore.\r\n\r\n// It taks two parameters:\r\n//  1) HTML \"selectedTableHTML\" storing the HTML of a table\r\n//  2) string \"urlOrigin\", storing which page this table is from\r\n\r\n// It returns a 2D array of objects representing the data for tableDataExplore.\r\nfunction setTableFromHTML(selecteTableHTML, urlOrigin) {\r\n  let selectedTable = selecteTableHTML;\r\n  let tempTable = [];\r\n\r\n  // We first fetch the plain, unprocessed version of the table.\r\n  // This is the part where we make the modification: use links instead of cell literals\r\n\r\n  for (let i = 0; i < selectedTable.rows.length; ++i) {\r\n    // console.log(selectedTable.rows[i]);\r\n    let tempRow = [];\r\n    for (let j = 0; j < selectedTable.rows[i].cells.length; ++j) {\r\n      let curCellText = HTMLCleanCell(selectedTable.rows[i].cells[j].innerText);\r\n      // Note: We want to use the href as data (if such href exists) instead of its innerText.\r\n      if (i > 0) {\r\n        // We get all the links from this current cell (there may be more than one)\r\n        let anchorArray = selectedTable.rows[i].cells[j].getElementsByTagName(\r\n          \"a\"\r\n        );\r\n        // we want to use the first valid link as the search element for this cell\r\n        // Definition of being valid: its associated innerText is not empty (thus not the link of a picture)\r\n        //                            and it is not a citation (so [0] is not \"[\")\r\n        for (let k = 0; k < anchorArray.length; ++k) {\r\n          if (\r\n            anchorArray[k].innerText !== \"\" &&\r\n            anchorArray[k].innerText[0] !== \"[\"\r\n          ) {\r\n            let hrefArray = anchorArray[k].href.split(\"/\");\r\n            // console.log(\"InnerText is \"+anchorArray[k].innerText);\r\n            // console.log(\"It exists in DBPedia as \"+hrefArray[hrefArray.length-1]);\r\n            curCellText = decodeURIComponent(hrefArray[hrefArray.length - 1]);\r\n            // if (curCellText.includes(\"UEFA\")) {\r\n            // console.log(curCellText);\r\n            // }\r\n          }\r\n        }\r\n      }\r\n      let curRowSpan = selectedTable.rows[i].cells[j].rowSpan;\r\n      let curColSpan = selectedTable.rows[i].cells[j].colSpan;\r\n      // console.log(curColSpan);\r\n      tempRow.push({\r\n        data: curCellText,\r\n        origin: urlOrigin,\r\n        rowSpan: curRowSpan,\r\n        colSpan: curColSpan,\r\n      });\r\n    }\r\n    tempTable.push(tempRow);\r\n  }\r\n\r\n  // We first deal with colspans.\r\n  for (let i = 0; i < tempTable.length; ++i) {\r\n    for (let j = 0; j < tempTable[i].length; ++j) {\r\n      let curCellText = tempTable[i][j].data;\r\n      if (tempTable[i][j].colSpan > 1) {\r\n        for (let k = 1; k < tempTable[i][j].colSpan; ++k) {\r\n          tempTable[i].splice(j + 1, 0, {\r\n            data: curCellText,\r\n            origin: urlOrigin,\r\n            rowSpan: tempTable[i][j].rowSpan,\r\n            colSpan: 1,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // We now deal with rowspans.\r\n  for (let i = 0; i < tempTable.length; ++i) {\r\n    for (let j = 0; j < tempTable[i].length; ++j) {\r\n      let curCellText = tempTable[i][j].data;\r\n      if (tempTable[i][j].rowSpan > 1) {\r\n        for (let k = 1; k < tempTable[i][j].rowSpan; ++k) {\r\n          // Note: the if condition is necessary to take care of error conditions (the original HTML table element has errors)\r\n          if (i + k < tempTable.length) {\r\n            tempTable[i + k].splice(j, 0, {\r\n              data: curCellText,\r\n              origin: urlOrigin,\r\n              rowSpan: 1,\r\n              colSpan: 1,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // We now add in an additional column: the originURL of the page\r\n  tempTable[0].splice(0, 0, {\r\n    data: \"OriginURL\",\r\n    origin: urlOrigin,\r\n    rowSpan: 1,\r\n    colSpan: 1,\r\n  });\r\n  for (let i = 1; i < tempTable.length; ++i) {\r\n    tempTable[i].splice(0, 0, {\r\n      data: urlOrigin,\r\n      origin: \"null\",\r\n      rowSpan: 1,\r\n      colSpan: 1,\r\n    });\r\n  }\r\n\r\n  // console.log(tempTable);\r\n  return tempTable; // tempTable is a 2D array of objects storing the table data. Object has two fields: data(string) and origin(string).\r\n}\r\n\r\n// This function takes in 1 parameter\r\n// 1) tableDataExplore, returned from setTableFromHTML.\r\n\r\n// And returns tableData (with no header rows) that can be unioned with the selected table.\r\n\r\nfunction setUnionData(tableDataExplore) {\r\n\r\n  // We first need to set the tableHeader, so that cells have the correct origins\r\n  let tableHeader = [];\r\n  for (let j=0;j<tableDataExplore[0].length;++j) {\r\n    tableHeader.push(\r\n      {\"value\":tableDataExplore[0][j].data\r\n      ,\"label\":tableDataExplore[0][j].data}\r\n    )\r\n  }\r\n  // We then need to handle both data and origin.\r\n  let tableData = [];\r\n  // console.log(tableDataExplore);\r\n  // This starts the loop for rows\r\n  for (let i=1;i<tableDataExplore.length;++i) {\r\n    let tempRow = [];\r\n    // This starts the loop for columns\r\n    let minLength = Math.min(tableDataExplore[i].length, tableHeader.length);\r\n    for (let j=0;j<minLength;++j) {\r\n      // First set the data\r\n      let data = tableDataExplore[i][j].data;\r\n      // Then set the origin\r\n      let origin = [];\r\n      let originText = tableDataExplore[i][j].origin+\": \"+tableHeader[j].value+\": \"+tableDataExplore[i][j].data;\r\n      origin.push(originText);\r\n      tempRow.push({\"data\":data,\"origin\":origin});\r\n    }\r\n    tableData.push(tempRow);\r\n  }\r\n  return tableData;\r\n}\r\n\r\n// This function takes in four parameters and return the CDF for hypergeometric distribution, for x\r\n// N: total number of elements (780 in our case)\r\n// K: total number of successful elements (length of selected column's class annotation)\r\n// n: number of trials (length of test column's class annotation)\r\n// x: (length of intersection of selected column and test column)\r\n\r\nfunction hyperCDF(x, N, K, n) {\r\n  let count = 0;\r\n  // console.log(combinations(5,2));\r\n  let denom = combinations(N, n);\r\n  for (let i = 0; i <= x; ++i) {\r\n    count += (combinations(K, i) * combinations(N - K, n - i)) / denom;\r\n  }\r\n  return count;\r\n}\r\n\r\n// This function renders this.props.tableData[i][j].data in a nicer way. \r\n// It changes\"_\" to \" \", and removes everything after the first occurence of (\r\n\r\nfunction niceRender(str) {\r\n  let resultStr = str;\r\n  let bracketIndex = str.indexOf(\"(\");\r\n  // If ( is present in a string, we want to remove it\r\n  // We include the -1 because usually ( is preceeded by _\r\n  if (bracketIndex !== -1) {\r\n    resultStr = resultStr.slice(0, bracketIndex-1);\r\n  }\r\n  // now we turn all \"_\" into \" \"\r\n  return resultStr.replace(/_/g, \" \");\r\n}\r\n\r\n// This function takes in four parameters: \r\n// 1) resultsBinding: an array of JSON values representing entities satisfying the first column\r\n// 2) tableData:      the tableData before update\r\n// 3) tableHeader:    this.state.tableHeader\r\n// 4) colIndex:       which column usersa are filling (usually 0)\r\n\r\n// and returns the updated tableData, after updates have been made to the first column.\r\n\r\nfunction setFirstColumnData(resultsBinding, tableData, tableHeader, colIndex) {\r\n  // First we get the correct number of rows, which is equal to min(values[0].results.bindings.length, initialRowNum)\r\n  let updatedRowCount = Math.min(resultsBinding.length, initialRowNum);\r\n  // console.log(\"Original length is \"+values[0].results.bindings.length);\r\n  // console.log(\"Row Count is: \"+updatedRowCount);\r\n\r\n  // If tableData currently has too many rows, we slice it.\r\n  if (tableData.length > updatedRowCount) {\r\n    tableData = tableData.slice(0,updatedRowCount);\r\n  }\r\n  // Else, if tableData currently has too few rows, we need to add some empty rows.\r\n  else if (tableData.length < updatedRowCount) {\r\n    let rowsToAdd = updatedRowCount - tableData.length;\r\n    for (let i = 0; i < rowsToAdd; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < initialColNum; ++j) {\r\n        tempRow.push({ data: \"\", origin: [] });\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n  }\r\n\r\n  let rowNum = tableData.length;\r\n  // console.log(\"Number of rows is \"+rowNum);\r\n\r\n  // We do not want to overwrite entries that users have filled in.\r\n  // Let's calculate how many entries we want to fill in.\r\n  let emptyEntryCount = rowNum;\r\n  for (let i = 0; i < rowNum; ++i) {\r\n    if (tableData[i][colIndex].data !== \"\") {\r\n      emptyEntryCount--;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  // console.log(\"number of empty entries is \"+emptyEntryCount);\r\n\r\n  let startingIndex = rowNum - emptyEntryCount;\r\n  // console.log(\"Starting index is\"+startingIndex);\r\n\r\n  for (let i = 0; i < emptyEntryCount; ++i) {\r\n    tableData[i + startingIndex][colIndex].data = \r\n      resultsBinding[i].somevar.value.slice(28);\r\n  }\r\n\r\n  // second part sets the origin for each cell\r\n  for (let i = 0; i < rowNum; ++i) {\r\n    // For the first column, let's just use its data as the origin\r\n    let tempOrigin = tableData[i][colIndex].data;\r\n    tableData[i][colIndex].origin.push(tempOrigin);\r\n  }\r\n\r\n  // Now we dedup by tableData by tableData[i][0].data\r\n  tableData = _.uniqBy(tableData, function(x) {return x[0].data;});\r\n\r\n  // console.log(tableData);\r\n  return tableData;\r\n}\r\n\r\n// The following function takes in 2D array recording information of neighbours for the search column\r\n\r\n// It return a desired oneD keyColNeighbours that we can give to selection Headers.\r\n\r\nfunction processAllNeighbours(allNeighboursArray) {\r\n  let keyColNeighbours = [];\r\n  // console.log(allNeighboursArray);\r\n  let allNeighboursArrayCopy = _.cloneDeep(allNeighboursArray);\r\n\r\n  for (let i = 0; i < allNeighboursArrayCopy.length; ++i) {\r\n    keyColNeighbours = keyColNeighbours.concat(allNeighboursArrayCopy[i]);\r\n  }\r\n\r\n  // Now we sort keyColNeighbours based on value\r\n  keyColNeighbours.sort((a,b) => a.value < b.value ? -1 : 1);\r\n  // console.log(keyColNeighbours);\r\n\r\n  // Now, we run a loop to remove duplicates, and update count and filledCount\r\n  if (keyColNeighbours.length > 0) {\r\n    for (let i = 1; i < keyColNeighbours.length; ++i) {\r\n      let prevEntry = keyColNeighbours[i-1];\r\n      let curEntry = keyColNeighbours[i];\r\n\r\n      // If the current entry's data is equal to the previous entry's data, we want to \r\n      // 1) delete curEntry\r\n      // 2) (maybe) update prevEntry's count\r\n      // 3) increment prevEntry's filledCount\r\n      if (prevEntry.value === curEntry.value) {\r\n        keyColNeighbours[i-1].filledCount = keyColNeighbours[i-1].filledCount + 1;\r\n        keyColNeighbours[i-1].count = Math.max(prevEntry.count, curEntry.count);\r\n        keyColNeighbours.splice(i,1);\r\n        --i;\r\n      }\r\n    }\r\n  }\r\n  // Now we want to sort (and potentially filter) keyColNeighbours, by filledCount \r\n  keyColNeighbours.sort((a,b) => a.filledCount < b.filledCount ? 1 : -1);\r\n\r\n  // Before we return, let's change the label to include filledCount\r\n  for (let i = 0; i < keyColNeighbours.length; ++i) {\r\n    let filledPercent = Math.round(keyColNeighbours[i].filledCount/allNeighboursArrayCopy.length * 100) / 100;\r\n    keyColNeighbours[i].filledPercent = filledPercent;\r\n    keyColNeighbours[i].label = keyColNeighbours[i].label + \" (\" + filledPercent + \")\";\r\n  }\r\n\r\n  // Take a look at keyColNeighbours\r\n  // console.log(keyColNeighbours);\r\n\r\n  return keyColNeighbours;\r\n}\r\n\r\n// The following function stores both predicate and object array for all entries in search column.\r\n// Its return value is an array, length is tableData.length\r\n\r\nfunction storeFirstDeg(neighbourArray) {\r\n  // console.log(neighbourArray);\r\n  let firstDegNeighbours = [];\r\n  let neighbourArrayCopy = _.cloneDeep(neighbourArray);\r\n  for (let i = 0; i < neighbourArrayCopy.length; ++i) {\r\n    let tempObj = {};\r\n    for (let j = 0; j < neighbourArrayCopy[i].length; ++j) {\r\n      // The following line creates a deduped version of neighbourArrayCopy[i][j].data, since some bug seems to exist in DBpedia\r\n      let dedupedData = _.uniq(neighbourArrayCopy[i][j].data.slice())\r\n      tempObj[neighbourArrayCopy[i][j].value] = dedupedData;\r\n      // console.log(neighbourArrayCopy[i][j].data.slice());\r\n      // console.log(_.uniq(neighbourArrayCopy[i][j].data.slice()));\r\n      // tempObj[neighbourArrayCopy[i][j].value] = neighbourArrayCopy[i][j].data;\r\n    }\r\n    firstDegNeighbours.push(tempObj);\r\n  } \r\n  // console.log(firstDegNeighbours);\r\n  return firstDegNeighbours;\r\n}\r\n\r\n// This function creates neighbourArrayText from neighbourArray\r\n\r\nfunction createNeighbourText(neighbourArray) {\r\n  let neighbourArrayText = \"\";\r\n  for (let i = 0; i < neighbourArray.length; ++i) {\r\n    if (i > 0) {\r\n      neighbourArrayText+=\" OR \";\r\n    }\r\n    let curNeighbourText = neighbourArray[i].type === \"object\" ? \"is \" + neighbourArray[i].value + \" of\" : neighbourArray[i].value ;\r\n    neighbourArrayText+=curNeighbourText;\r\n  }\r\n  return neighbourArrayText;\r\n}\r\n\r\n// This function add in the recommendNeighbours to objects in processedNeighbours.\r\n// It takes in processedSubject(object)Neighbours, and returns the updated version.\r\n\r\n// For each element from processedNeighbours, we want to add an attribute called recommendNeighbours\r\n// recommendNeighbours is an array of objects with three attributes\r\n// 1) value:        value of the recommend attribute\r\n// 2) type:         type of the recommend attribute\r\n// 3) relation:     how the recommend attribute is related to the original attribute: string, or semantic\r\n\r\nfunction addRecommendNeighbours(processedNeighboursCopy) {\r\n  // console.log(processedNeighboursCopy);\r\n  let processedNeighbours = _.cloneDeep(processedNeighboursCopy);\r\n\r\n\r\n  // To do this, we need to a double loop over the processedNeighbours\r\n  for (let i = 0; i < processedNeighbours.length; ++i) {\r\n\r\n    // Initialize the recommendNeighbours array\r\n    let recommendNeighbours = [];\r\n    \r\n    for (let j = 0; j < processedNeighbours.length; ++j) {\r\n      // We only look at cases where i !== j\r\n      if (i !== j) {\r\n        // We consider two types of matching\r\n\r\n        // 1st type is String Similarity: if X is a substring of Y, or Y is a substring of X \r\n        let upperStrOne = processedNeighbours[i].value.toUpperCase();\r\n        let upperStrTwo = processedNeighbours[j].value.toUpperCase();\r\n        if (upperStrOne.includes(upperStrTwo) || upperStrTwo.includes(upperStrOne)) {\r\n          recommendNeighbours.push(\r\n            {\r\n              \"value\": processedNeighbours[j].value,\r\n              \"type\": processedNeighbours[j].type,\r\n              \"relation\": \"string\"\r\n            }\r\n          )\r\n        }\r\n\r\n        // 2nd type is semantic: if X and Y has the same range, or same subPropertyOf \r\n        if ((processedNeighbours[i].range === processedNeighbours[j].range && processedNeighbours[i].range !== \"\") ||\r\n            (processedNeighbours[i].subPropertyOf === processedNeighbours[j].subPropertyOf && processedNeighbours[i].subPropertyOf !== \"\")) {\r\n          recommendNeighbours.push(\r\n            {\r\n              \"value\": processedNeighbours[j].value,\r\n              \"type\": processedNeighbours[j].type,\r\n              \"relation\": \"semantic\"\r\n            }\r\n          )\r\n        }\r\n\r\n        // updated on 9/13: hardcode \"starring\" to be in \"director\"'s attribute recommendations\r\n        if ((processedNeighbours[i].value === \"director\" && processedNeighbours[i].type === \"subject\") &&\r\n            (processedNeighbours[j].value === \"starring\" && processedNeighbours[j].type === \"subject\")) {\r\n          recommendNeighbours.push(\r\n            {\r\n              \"value\": processedNeighbours[j].value,\r\n              \"type\": processedNeighbours[j].type,\r\n              \"relation\": \"magic!\",\r\n            }\r\n          )\r\n        }\r\n      }\r\n    }\r\n    // We take a look at the recommendNeighbours\r\n    // console.log(\"Current neighbour is \"+processedNeighbours[i].value);\r\n    // if (recommendNeighbours.length > 0) {console.log(recommendNeighbours);}\r\n\r\n    // Now, we create the recommendNeighbours attributes for the current element in processedNeighbours\r\n    processedNeighbours[i][\"recommendNeighbours\"] = recommendNeighbours;\r\n  }\r\n  // console.log(processedNeighbours);\r\n  return processedNeighbours;\r\n}\r\n\r\n// The following function creates the list of recommend attributes passed to the ActionPanel.\r\n\r\n// It takes in one parameter: neighbourArray\r\n// returns an array: recommendArray\r\n\r\nfunction createRecommendArray(neighbourArray, keyColNeighbours) {\r\n  // We create the recommendArray variable using a simple rule:\r\n  // It should be union of recommendNeighbours of all neighbours from neighbourArray, minus the neighbours from neighbourArray\r\n  let recommendArray = [];\r\n\r\n  // First we run a loop to take the union of recommendNeighbours\r\n  for (let i = 0; i < neighbourArray.length; ++i) {\r\n    recommendArray = recommendArray.concat(neighbourArray[i].recommendNeighbours);\r\n  }\r\n\r\n  // console.log(neighbourArray);\r\n  // console.log(recommendArray);\r\n\r\n  // We then remove recommendations that are completely duplicated\r\n  recommendArray = _.uniqBy(recommendArray, function(x) {\r\n    return x.value || x.type || x.relation;\r\n  });\r\n  // We then remove recommendations that are already in neighbourArray\r\n  recommendArray = _.differenceBy(recommendArray, neighbourArray, function(x) {\r\n    return x.value || x.type;\r\n  });\r\n\r\n  // We want to do one more thing here: get the filledPercentage for the recommendation attributes\r\n\r\n  // console.log(recommendArray);\r\n  // console.log(keyColNeighbours);\r\n\r\n  for (let i = 0; i < recommendArray.length; ++i) {\r\n    for (let j = 0; j < keyColNeighbours.length; ++j) {\r\n      if (recommendArray[i].value === keyColNeighbours[j].value && recommendArray[i].type === keyColNeighbours[j].type) {\r\n        recommendArray[i][\"label\"] = keyColNeighbours[j].label;\r\n        recommendArray[i][\"filledPercent\"] = keyColNeighbours[j].filledPercent;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  // We now sort the recommendArray by filledPercent attribute\r\n  recommendArray.sort((a, b) =>\r\n    a.filledPercent < b.filledPercent ? 1 : -1\r\n  );\r\n  // console.log(recommendArray);\r\n\r\n  return recommendArray;\r\n}\r\n\r\n// The following function is a helper function for sorting used in updateFirstColSelection.\r\n\r\nfunction getPCount(str, myArray) {\r\n  let count = 0;\r\n  for (let i = 0; i < myArray.length; ++i) {\r\n    if (myArray[i].p.value === str) {\r\n      ++count\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\n// The following function scans through a string, and changes all \" \" to \"+\"\r\n\r\nfunction blankToPlus(str) {\r\n  return str.replace(/\\s/g, \"+\");\r\n}\r\n\r\n// The following function generates queryURL needed for Virtuoso, using information from neighbourArray (or tableHeader[0])\r\n\r\nfunction keyQueryGen(neighbourArray) {\r\n\r\n  // Following boolean is for error detection\r\n  let error = false;\r\n\r\n  // Following is a complete query.\r\n\r\n  // select ?somevar\r\n  // where {\r\n  // ?somevar dct:subject dbc:Obama_family.\r\n  // ?somevar dbp:district \"13\"^^<http://www.w3.org/2001/XMLSchema#integer>.\r\n  // ?somevar dbo:birthPlace dbr:Hawaii.\r\n  // ?somevar dbp:name \"Barack Obama\"^^<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString>.\r\n  // ?somevar dbo:activeYearsEndDate \"2004-11-04\"^^<http://www.w3.org/2001/XMLSchema#date>.\r\n  // }\r\n\r\n  let prefixURL = \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n  let suffixURL = \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n  let queryBody = \"select+%3Fsomevar%0D%0Awhere+%7B\";\r\n  for (let i = 0; i < neighbourArray.length; ++i) {\r\n    // There are 5 cases that we have to deal with in total\r\n    let textToAdd = \"\"\r\n    // Case 1: dct (%0D%0A%3Fsomevar+dct%3Asubject+dbc%3AObama_family.)\r\n    if (neighbourArray[i].pDataset === \"dct\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+dct%3Asubject+dbc%3A\" \r\n        + regexReplace(neighbourArray[i].oValue) \r\n        + \".\";\r\n    }\r\n    // Case 2: oType is date (%0D%0A%3Fsomevar+dbo%3AactiveYearsEndDate+%222004-11-04%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23date%3E.)\r\n    else if (neighbourArray[i].oType === \"http://www.w3.org/2001/XMLSchema#date\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+\" \r\n        + neighbourArray[i].pDataset\r\n        + \"%3A\"\r\n        + regexReplace(neighbourArray[i].pValue)\r\n        + \"+%22\"\r\n        + neighbourArray[i].oValue // Note no regexReplace here because it's in quotes\r\n        + \"%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23date%3E.\";\r\n    }\r\n    // Case 3: oType is integer (%0D%0A%3Fsomevar+dbp%3Adistrict+%2213%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23integer%3E.)\r\n    else if (neighbourArray[i].oType === \"http://www.w3.org/2001/XMLSchema#integer\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+\"\r\n        + neighbourArray[i].pDataset\r\n        + \"%3A\"\r\n        + regexReplace(neighbourArray[i].pValue)\r\n        + \"+%22\"\r\n        + neighbourArray[i].oValue // Note no regexReplace here because it's in quotes\r\n        + \"%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23integer%3E.\";\r\n    }\r\n    // Case 4: oType is string literal (%0D%0A%3Fsomevar+dbp%3Aname+%22Barack+Obama%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23langString%3E.)\r\n    else if (neighbourArray[i].oType === \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+\"\r\n        + neighbourArray[i].pDataset\r\n        + \"%3A\"\r\n        + regexReplace(neighbourArray[i].pValue)\r\n        + \"+%22\"\r\n        + blankToPlus(neighbourArray[i].oValue) // Note no regexReplace here, but blankToPlus is needed\r\n        + \"%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23langString%3E.\";\r\n    }\r\n    // Case 5: oType is nonnegative integer\r\n    else if (neighbourArray[i].oType === \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+\"\r\n        + neighbourArray[i].pDataset\r\n        + \"%3A\"\r\n        + regexReplace(neighbourArray[i].pValue)\r\n        + \"+%22\"\r\n        + neighbourArray[i].oValue // Note no regexReplace here because it's in quotes\r\n        + \"%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23nonNegativeInteger%3E.\";\r\n    }\r\n    // Case 6: oType is \"\", in this case the object value is some dbr\r\n    else if (neighbourArray[i].oType === \"\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+\"\r\n        + neighbourArray[i].pDataset\r\n        + \"%3A\"\r\n        + regexReplace(neighbourArray[i].pValue)\r\n        + \"+dbr%3A\"\r\n        + regexReplace(neighbourArray[i].oValue)\r\n        + \".\";\r\n    }\r\n    // Otherwise, we have run into some error potentially\r\n    else {\r\n      console.log(neighbourArray[i].oType);\r\n      error = true;\r\n    }\r\n    queryBody+=textToAdd;\r\n  }\r\n  // Finally we add in the last bit of text to queryBody\r\n  queryBody+=\"%0D%0A%7D%0D%0A&\";\r\n\r\n  // Create the queryURL and take a look\r\n  let queryURL = prefixURL + queryBody + suffixURL;\r\n  \r\n  // We now return. If error is true, we return error, else, we return queryURL\r\n  if (error === true) {\r\n    return \"ERROR\";\r\n  }\r\n  else {\r\n    return queryURL;\r\n  }\r\n}\r\n\r\n// The following is a helper function used to update firstDegNeighbours and keyColNeighbours.\r\n// It makes use of two query result arrays.\r\n\r\n// It return an object with two attributes: firstDegNeighbours and keyColNeighbours\r\n\r\n// This function should be called whenever number of rows are changed.\r\n\r\nfunction updateNeighbourInfo(valuesOne, valuesTwo) {\r\n  // console.log(valuesOne);\r\n  // console.log(valuesTwo);\r\n\r\n  // To support the firstDegNeighbours prefetching, let's store the first degree neighbours in state firstDegNeighbours\r\n  let firstDegNeighbours = {};\r\n\r\n  // First we deal with subject neighbours, so valuesOne\r\n  let subjectNeighbourArray = [];\r\n  for (let i = 0; i < valuesOne.length; ++i) {\r\n    let temp = updateKeyColNeighbours(\r\n      [],\r\n      valuesOne[i].results.bindings,\r\n      \"subject\"\r\n    )\r\n    subjectNeighbourArray.push(temp);\r\n  }\r\n  firstDegNeighbours[\"subject\"] = storeFirstDeg(subjectNeighbourArray);\r\n  let processedSubjectNeighbours = processAllNeighbours(subjectNeighbourArray);\r\n  processedSubjectNeighbours = addRecommendNeighbours(processedSubjectNeighbours);\r\n\r\n  // Then we deal with object neighbours, so valuesTwo\r\n  let objectNeighbourArray = [];\r\n  for (let i = 0; i < valuesTwo.length; ++i) {\r\n    let temp = updateKeyColNeighbours(\r\n      [],\r\n      valuesTwo[i].results.bindings,\r\n      \"object\"\r\n    )\r\n    objectNeighbourArray.push(temp);\r\n  }\r\n  firstDegNeighbours[\"object\"] = storeFirstDeg(objectNeighbourArray);\r\n  let processedObjectNeighbours = processAllNeighbours(objectNeighbourArray);\r\n  processedObjectNeighbours = addRecommendNeighbours(processedObjectNeighbours);\r\n\r\n  // we now concat subjectNeighbours and objectNeighbours together\r\n  let keyColNeighbours = processedSubjectNeighbours.concat(processedObjectNeighbours);\r\n\r\n  // console.log(keyColNeighbours);\r\n  // console.log(firstDegNeighbours);\r\n  return {\r\n    \"firstDegNeighbours\":firstDegNeighbours,\r\n    \"keyColNeighbours\":keyColNeighbours,\r\n  }\r\n}\r\n\r\n// Added on Sept 13: \r\n// The following is helper function to update the firstColSelection options to include all entities from first column\r\n// This function should just use something very similar to updateFirstColSelection in a loop. Then do some processing in the end.\r\n\r\nfunction updateUnionSelection(valuesOne) {\r\n\r\n  // initialize array to store the union of all firstColSelection\r\n  let unionSelection = [];\r\n\r\n  // the two following arrays store the dct neighbours and dbo/p neighbours respectively\r\n  let dctArray = [];\r\n  let dbopArray = [];\r\n\r\n  // We loop over the first degree neighbours for every entry in the first column\r\n  for (let i = 0; i < valuesOne.length; ++i) {\r\n\r\n    // We first filter out those in resultsBinding according to three criterias\r\n    // Note: the second criteria is a bit different from updateKeyColNeighbours and updatePreviewInfo\r\n\r\n    // 1) p.value.slice(28).length must > 1\r\n    // 2) p.value must include \"ontology\", \"property\", or \"dc/terms/subject\" (so it is one of dbo:XXXX, dbp:XXXX, or dct:subject)\r\n    // 3) p.value must not include certain strings (which likely correspond to meaningless attributes)\r\n\r\n    let resultsBinding = valuesOne[i].results.bindings;\r\n\r\n    let processedBinding = resultsBinding.filter(\r\n      a => a.p.value.slice(28).length > 1 \r\n          &&\r\n          (a.p.value.includes(\"ontology\") \r\n          || a.p.value.includes(\"property\")\r\n          || a.p.value.includes(\"dc/terms/subject\")\r\n          ) \r\n          &&\r\n          !(a.p.value.includes(\"wikiPage\") \r\n          || a.p.value.includes(\"align\") \r\n          || a.p.value.includes(\"abstract\") \r\n          || a.p.value.includes(\"caption\") \r\n          || a.p.value.includes(\"image\") \r\n          || a.p.value.includes(\"width\") \r\n          || a.p.value.includes(\"thumbnail\") \r\n          || a.p.value.includes(\"blank\")\r\n          || a.p.value.includes(\"fec\")\r\n          || a.p.value.includes(\"viaf\")\r\n          || a.p.value.includes(\"soundRecording\")\r\n          || a.p.value.includes(\"votesmart\")\r\n          || a.p.value.includes(\"wordnet\")\r\n          || a.p.value.includes(\"float\")\r\n          || a.p.value.includes(\"bbr\")\r\n          || a.p.value === \"http://dbpedia.org/property/alt\"\r\n          || a.p.value === \"http://dbpedia.org/property/by\"\r\n          || a.p.value === \"http://dbpedia.org/property/onlinebooks\"\r\n          || a.p.value === \"http://dbpedia.org/property/signature\"\r\n          || a.p.value === \"http://dbpedia.org/property/video\"\r\n          || a.p.value === \"http://dbpedia.org/property/logo\"\r\n          || a.p.value === \"http://dbpedia.org/property/shorts\"\r\n          || a.p.value === \"http://dbpedia.org/property/patternS\"\r\n          || a.p.value === \"http://dbpedia.org/property/patternB\"\r\n          || a.p.value === \"http://dbpedia.org/property/body\"\r\n          || a.p.value === \"http://dbpedia.org/property/hShorts\"\r\n          || a.p.value === \"http://dbpedia.org/property/hPatternS\"\r\n          || a.p.value === \"http://dbpedia.org/property/hPatternB\"\r\n          || a.p.value === \"http://dbpedia.org/property/hBody\"\r\n          || a.p.value === \"http://dbpedia.org/property/aShorts\"\r\n          || a.p.value === \"http://dbpedia.org/property/aPatternS\"\r\n          || a.p.value === \"http://dbpedia.org/property/aPatternB\"\r\n          || a.p.value === \"http://dbpedia.org/property/aBody\"\r\n          || a.p.value === \"http://dbpedia.org/property/3Shorts\"\r\n          || a.p.value === \"http://dbpedia.org/property/3PatternS\"\r\n          || a.p.value === \"http://dbpedia.org/property/3PatternB\"\r\n          || a.p.value === \"http://dbpedia.org/property/3Body\"\r\n          || a.p.value === \"http://dbpedia.org/property/nba\"\r\n          || a.p.value === \"http://dbpedia.org/ontology/termPeriod\"\r\n          )\r\n    );\r\n    // Now we run an inner loop to loop over each processedBinding\r\n    for (let j = 0; j < processedBinding.length; ++j) {\r\n      if (processedBinding[j].p.value === \"http://purl.org/dc/terms/subject\") {\r\n        dctArray.push(processedBinding[j]);\r\n      }\r\n      else {\r\n        dbopArray.push(processedBinding[j]);\r\n      }\r\n    } \r\n  }\r\n\r\n  // Now we deal with dctArray and dbopArray\r\n\r\n  // First is dctArray. We first dedup it based on o.value. Then sort by o.value.slice(37)\r\n  dctArray = _.uniqBy(dctArray, function(x) {return x.o.value});\r\n  dctArray.sort((a, b) => (a.o.value.slice(37) < b.o.value.slice(37) ? -1 : 1));\r\n\r\n  // Second is dbopArray. We first remove those entries with both p.value and o.value duplicated\r\n  dbopArray = _.uniqBy(dbopArray, function(x) {return x.p.value && x.o.value});\r\n  // Then we sort. Two sorting criterias: \r\n  // 1) Those that are dbr (so without a datatype) shows up higher.\r\n  // 2) Then in alphabetical order\r\n  dbopArray.sort(function (a, b) {\r\n    if (a.o.datatype === undefined && b.o.datatype !== undefined) {\r\n      return -1;\r\n    }\r\n    else if (b.o.datatype === undefined && a.o.datatype !== undefined) {\r\n      return 1;\r\n    }\r\n    else {\r\n      return a.p.value.slice(28) < b.p.value.slice(28) ? -1 : 1;\r\n    }\r\n  });\r\n\r\n  // Now that both dctArray and dbopArray have the corret elements, we push them onto unionSelection array\r\n  // console.log(dctArray);\r\n  // console.log(dbopArray);\r\n  for (let i = 0; i < dctArray.length; ++i) {\r\n    unionSelection.push(\r\n      {\r\n        \"pValue\":\"category\",\r\n        \"pDataset\":\"dct\",\r\n        \"oValue\":dctArray[i].o.value.slice(37),\r\n        \"oType\":\"\",\r\n        \"value\":\"category\",\r\n        \"label\":dctArray[i].o.value.slice(37),\r\n      }\r\n    )\r\n  }\r\n  for (let i = 0; i < dbopArray.length; ++i) {\r\n    unionSelection.push(\r\n      {\r\n        \"pValue\":dbopArray[i].p.value.slice(28),\r\n        \"pDataset\":dbopArray[i].p.value.includes(\"property\") ? \"dbp\" : \"dbo\",\r\n        \"oValue\":removePrefix(dbopArray[i].o.value),\r\n        \"oType\":dbopArray[i].o.datatype === undefined ? \"\" : dbopArray[i].o.datatype,\r\n        \"value\":dbopArray[i].p.value.slice(28),\r\n        \"label\":dbopArray[i].p.value.slice(28)+\":\"+removePrefix(dbopArray[i].o.value),\r\n      }\r\n    )\r\n  }\r\n  // console.log(unionSelection);\r\n\r\n  // Now we create unionChecked, which is an array of false, length === length of unionSelection\r\n  let unionChecked = [];\r\n  for (let i = 0; i < unionSelection.length; ++i) {\r\n    unionChecked.push(false);\r\n  }\r\n\r\n  // Now we create the return value\r\n  let selectionInfo = {\r\n    \"firstColSelection\":unionSelection,\r\n    \"firstColChecked\":unionChecked,\r\n  };\r\n\r\n  return selectionInfo;\r\n}\r\n\r\n","// import { Route, Switch, Link } from \"react-router-dom\";\r\nimport React, { Component } from \"react\";\r\n// import Header from \"../components/Header\";\r\n// import Footer from \"../components/Footer\";\r\nimport MainBody from \"../components/MainBody\";\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper \">\r\n        <div className=\"font-body\">\r\n          {/* <div className=\"header\">\r\n            <Header />\r\n          </div> */}\r\n          <div>\r\n            <MainBody />\r\n          </div>\r\n          {/* <div className=\"footer\">\r\n            <Footer />\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./assets/custom.css\";\r\nimport \"./assets/layout.css\";\r\n// import \"./assets/font-awesome.min.css\";\r\nimport App from \"./layouts/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}