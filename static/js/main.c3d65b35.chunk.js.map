{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/SettingModal.jsx","components/FilterModal.jsx","components/JoinModal.jsx","components/URLForm.jsx","components/LandingPage.jsx","components/TablePanel.jsx","components/TableSelection.jsx","components/TaskMenu.jsx","components/FirstColSelection.jsx","components/OtherColSelection.jsx","components/PreviewOrigin.jsx","components/ActionPanel.jsx","components/PagePanel.jsx","components/MainBody.jsx","layouts/App.jsx","index.js"],"names":["Header","state","className","href","class","title","onClick","props","copyTable","openModal","undoPreviousStep","Component","Footer","SettingModal","isOpen","this","showSetting","onChange","e","toggleSemantic","type","value","checked","semanticEnabled","unionCutOff","unionCutOffChange","min","max","step","closeModal","FilterModal","optionsEle","i","push","dataAndChecked","toggleChecked","data","replace","length","showFilter","checkAll","toggleAll","applyFilter","cancelFilter","JoinModal","showJoin","originColOptions","originJoinIndex","selectJoinColumn","placeholder","options","isMulti","joinColOptions","joinJoinIndex","runJoin","cancelJoin","URLForm","handleURLPaste","bind","preventDefault","urlPasted","clipboardData","window","getData","onPaste","LandingPage","TablePanel","showFullTitle","createSuperTable","createSelectedTableView","showPartialTitle","setState","colIndex","tableHeader","label","textLiteral","niceRender","firstColHeaderInfo","curText","j","onMouseEnter","onMouseLeave","textToAdd","rowNum","tableData","colNum","table","tempRow","tempHeader","buttonsEle","textEle","firstColFilled","columnHeaderGen","handlePlusClick","contextSetColumn","contextAddColumn","showFilterMethods","keyColIndex","buttonEle","getOtherOptions","contextDeleteColumn","rows","previewColIndex","style","backgroundColor","previewData","readOnly","cellColor","onCellChange","onDoubleClick","originPreviewPage","tableDataExplore","tableHeaderRow","tableRows","tableEle","border","str","TableSelection","createButtonArray","originTableArray","buttonArray","buttonText","headerCells","cells","headerData","removeNewLine","innerText","slice","tableContent","dangerouslySetInnerHTML","__html","outerHTML","selectButton","tableOpenList","listType","buttonFunction","toggleTable","Collapse","originTableArrayEle","TaskMenu","subject","resultStr","bracketIndex","indexOf","handleStartSubject","decodeURIComponent","toggleTableSelection","showTableSelection","CardBody","Card","handleStartTable","FirstColSelection","createFirstColSelection","keyCheckedIndex","firstColSelection","firstColChecked","populateEle","selectedNeighbours","alert","populateText","pDataset","oValue","pValue","Button","populateKeyColumn","confirmAddFirstCol","returnEle","additionEle","toggleFirstNeighbour","selectionEle","OtherColSelection","createOtherColSelection","otherColSelection","otherColChecked","otherCheckedIndex","console","log","populateOtherColumn","toggleOtherNeighbour","PreviewOrigin","createPreviewEle","createOriginEle","previewInfoExpanded","previewInfoArray","previewEle","key","togglePreviewElement","brEle","selectedCell","originEle","origin","ActionPanel","createPropertyArray","createSiblingArray","createTableArray","createRecommendArray","createStartRecommend","firstIndex","secondIndex","tableArray","propertyNeighbours","siblingArray","tableElement","thirdIndex","tableTitleText","toggleOtherTable","unionTable","colMapping","siblingElement","zeroDividerSet","tooltipText","name","listClassSib","toggleSibling","unionPage","propertyElement","predicate","object","propertyText","listClass","togglePropertyNeighbours","recommendArray","recommendEle","neighbourArray","recommendText","populateRecommendation","recommendationText","createNeighbourText","actionInfo","neighbourArrayText","sameNeighbourOneRow","sameNeighbourDiffRow","curActionInfo","populateStartRecommend","actionEle","wrapperEle","titleEle","usecaseSelected","selectedTableIndex","task","addToFirstCol","createSameNeighbour","sameNeighbourEle","contextSortColumn","openFilter","contextDedupColumn","curIndex","tabIndex","selectedIndex","onSelect","index","handleTabSwitch","toggleUnionJoin","showUnionTables","showJoinTables","handleJoinTable","PagePanel","pageEle","wikiPageClass","iframeURL","buttonhideShow","toggleWikiPage","aria-hidden","pageHidden","id","src","MainBody","optionsMap","tablePasted","lastAction","prevState","keyColNeighbours","firstDegNeighbours","selectedClassAnnotation","curFilterIndex","showJoinModal","joinTableIndex","joinTableData","cellChange","selectColHeader","getKeyOptions","getNeighbourPromise","getOtherColPromise","addAllNeighbour","getTableStates","unionProperty","document","body","classList","add","includes","promiseArray","fetchText","allPromiseReady","then","values","htmlText","DOMParser","parseFromString","getElementsByClassName","remove","textArea","createElement","copiedText","undefined","appendChild","select","execCommand","removeChild","taskSelected","_","cloneDeep","fetchJSON","regexReplace","resultsBinding","processedBinding","filter","a","p","dctArray","dbopArray","sort","b","o","count","getPCount","prevNeighbour","curNeighbour","datatype","concat","removePrefix","updateFirstColSelection","results","bindings","neighbourIndex","curColumnArray","curNeighbourData","otherColCheckedIndex","firstColCheckedUpdated","target","allSubject","queryBody","queryURL","myJson","keyColOptions","curValue","somevar","tempObj","neighbour","colEmpty","colFilled","nonEmptyInfo","tempSelection","scrollTo","selectedOptions","keyColLabel","ownLabel","cellValue","curPromise","keyQueryGen","updatedRowCount","Math","rowsToAdd","emptyEntryCount","startingIndex","tempOrigin","uniqBy","x","setFirstColumnData","promiseArrayOne","promiseArrayTwo","valuesOne","valuesTwo","updatedNeighbours","updateNeighbourInfo","numNewRows","hasMultiple","originToAdd","keyOrigin","lastIndex","dataArray","recommendNeighbours","relation","differenceBy","filledPercent","numCols","fillRecommendation","keyColIndexUpdated","tableDataUpdated","k","newTableHeader","tableHeaderUpdated","selectedClassAnnotationUpdated","optionsMapUpdated","curCol","requiredLength","subjectNeighbours","objectNeighbours","curRow","rowToAdd","firstDegNeighboursUpdated","curData","curRecommendation","sliceIndex","splice","numRecommend","order","numericCol","isNaN","Number","aValue","bValue","rowIndex","otherColPromiseSubject","otherColPromiseObject","subjectInfoArray","updatePreviewInfo","objectInfoArray","originText","Promise","resolve","tableIndex","queryPromise","queryOne","urlReplace","queryTwo","findClassAnnotation","queryResults","propertyNeighboursPO","bindingArray","urlOrigin","curSiblingArray","siblingName","s","setTableFromHTML","stateInfo","siblingNameArray","tableArrayPromise","pageHTML","findTableFromHTML","tableArrayValues","aTableLength","bTableLength","aName","bName","selectedSibling","selectedTable","otherTableHTML","otherTableData","setUnionData","tempMapping","tableConcat","otherTableOrigin","headerRow","sameTable","diffColFound","m","Set","checkIndex","allFalse","valuesToKeep","originTableHeader","joinTableHeader","joinTableDataUpdated","curJoinEntry","curEntryFound","bodyEle","bottomContentClass","topContentClass","url","fetch","response","ok","Error","json","catch","error","text","all","updateKeyColNeighbours","subPropertyOf","neighbourCount","neighbourToAdd","valuesToAdd","neighbourRange","range","neighbourSubPropertyOf","objLabel","categoryPreviewInfoArray","categoryBinding","dataToAdd","colInNew","HTMLCleanCell","trim","split","pageName","originCols","wikiTablesFound","tablesFound","tagName","tablePromise","findTableFromTable","unionScore","tableHTML","curHeaderCells","newCols","remainCols","searchCols","headerName","sameStructure","remainClassAnnotation","curSearchIndex","intersection","totalSuccess","numTrial","hyperCDF","tempTable","curCellText","anchorArray","getElementsByTagName","hrefArray","curRowSpan","rowSpan","curColSpan","colSpan","remainEntries","curColIndex","curEntry","classAnnotation","curColumnClass","curCellClass","selecteTableHTML","N","K","n","denom","combinations","processAllNeighbours","allNeighboursArray","allNeighboursArrayCopy","prevEntry","filledCount","round","storeFirstDeg","neighbourArrayCopy","dedupedData","uniq","addRecommendNeighbours","processedNeighboursCopy","processedNeighbours","upperStrOne","toUpperCase","upperStrTwo","myArray","oType","subjectNeighbourArray","temp","processedSubjectNeighbours","objectNeighbourArray","processedObjectNeighbours","App","ReactDOM","render","getElementById"],"mappings":"mUAuDeA,E,2MAlDbC,MAAQ,G,wEACE,IAAD,OACP,OACE,oCACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,YACb,uBAAGC,KAAK,aAAaC,MAAM,QACzB,2BACE,oCADF,cAKJ,yBAAKF,UAAU,4BACb,yBAAKA,UAAU,YACb,4BACEA,UAAU,kBACVG,MAAM,oBACNC,QAAS,kBAAM,EAAKC,MAAMC,cAE1B,kBAAC,IAAD,CAAQN,UAAU,sBAGtB,yBAAKA,UAAU,YACb,4BACEA,UAAU,kBACVG,MAAM,wBAEN,kBAAC,IAAD,CACEH,UAAU,kBACVI,QAAS,kBAAM,EAAKC,MAAME,iBAIhC,yBAAKP,UAAU,YACb,4BACEA,UAAU,kBACVG,MAAM,uBACNC,QAAS,kBAAM,EAAKC,MAAMG,qBAE1B,kBAAC,IAAD,CAAQR,UAAU,uBAK1B,wBAAIE,MAAM,mB,GA7CGO,aCWNC,E,2MAbbX,MAAQ,G,wEAEN,OACE,oCAEE,yBAAKC,UAAU,uBACb,qE,GAPWS,a,kCCkENE,G,iNA5DbZ,MAAQ,G,wEACE,IAAD,OACP,OACE,6BACE,kBAAC,IAAD,CACEa,OAAQC,KAAKR,MAAMS,YACnBd,UAAU,iBAEV,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wBACb,6DAGJ,6BACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YAAf,qBACA,yBAAKA,UAAU,YACb,yBAAKe,SAAU,SAACC,GAAD,OAAO,EAAKX,MAAMY,eAAeD,KAC9C,2BACAE,KAAK,QACLC,MAAM,UACNC,QAAwC,YAA/BP,KAAKR,MAAMgB,kBACjB,IALL,UAOE,2BACEH,KAAK,QACLC,MAAM,WACNC,QAAwC,aAA/BP,KAAKR,MAAMgB,kBACnB,IAXL,cAgBJ,6BACA,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,YAAf,mCACA,yBAAKA,UAAU,YACb,kBAAC,IAAD,CACEmB,MAAON,KAAKR,MAAMiB,YAClBP,SAAU,SAACC,GAAD,OAAO,EAAKX,MAAMkB,kBAAkBP,IAC9CQ,IAAK,EACLC,IAAK,EACLC,KAAM,QAIZ,6BACA,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,wBACb,4BAAQI,QAAS,kBAAM,EAAKC,MAAMsB,eAAlC,6B,GAnDWlB,cCwDZmB,E,2MA1Db7B,MAAQ,G,wEAKN,IAHQ,IAAD,OAEH8B,EAAa,GAFV,WAGEC,GACPD,EAAWE,KACT,6BACE,2BACEb,KAAK,WACLE,QAAS,EAAKf,MAAM2B,eAAeF,GAAGV,QACtCL,SAAU,SAACC,GAAD,OAAO,EAAKX,MAAM4B,cAAcjB,EAAGc,MAEnC,EAAKzB,MAAM2B,eAAeF,GAAGI,KAmDtCC,QAAQ,YAAa,IACrBA,QAAQ,KAAM,QA5DdL,EAAE,EAAEA,EAAEjB,KAAKR,MAAM2B,eAAeI,SAASN,EAAI,EAA7CA,GAcT,OACE,6BACE,kBAAC,IAAD,CACElB,OAAQC,KAAKR,MAAMgC,WACnBrC,UAAU,gBAEV,yBAAKA,UAAU,aACb,yFAGA,6BACA,yBAAKA,UAAU,iBACb,6BACE,2BACEkB,KAAK,WACLE,QAASP,KAAKR,MAAMiC,SACpBvB,SAAU,SAACC,GAAD,OAAO,EAAKX,MAAMkC,UAAUvB,MAJ1C,qBAQA,6BACCa,GAEH,6BACA,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,wBACb,4BAAQI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMmC,YAAYxB,KAA/C,OAEF,yBAAKhB,UAAU,YACb,4BAAQI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMoC,aAAazB,KAAhD,mB,GAjDUP,a,YC+DXiC,E,2MA7Db3C,MAAQ,G,wEAEE,IAAD,OASP,OACE,6BACE,kBAAC,IAAD,CACEa,OAAQC,KAAKR,MAAMsC,SACnB3C,UAAU,cAEV,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YAAf,uCAGA,yBAAKA,UAAU,wBAAf,2CAIF,6BACA,yBAAKA,UAAU,OACb,kBAAC,IAAD,CACEA,UAAU,WACVmB,MAAON,KAAKR,MAAMuC,iBAAiB/B,KAAKR,MAAMwC,iBAC9C9B,SAAU,SAACC,GAAD,OAAO,EAAKX,MAAMyC,iBAAiB9B,EAAG,gBAChD+B,YAAa,qBACbC,QAASnC,KAAKR,MAAMuC,iBACpBK,SAAS,IAEX,kBAAC,IAAD,CACEjD,UAAU,uBACVmB,MAAON,KAAKR,MAAM6C,eAAerC,KAAKR,MAAM8C,eAC5CpC,SAAU,SAACC,GAAD,OAAO,EAAKX,MAAMyC,iBAAiB9B,EAAG,cAChD+B,YAAa,qBACbC,QAASnC,KAAKR,MAAM6C,eACpBD,SAAS,KAGb,6BACA,yBAAKjD,UAAU,OACb,yBAAKA,UAAU,wBACb,4BAAQI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM+C,QAAQpC,KAA3C,OAEF,yBAAKhB,UAAU,YACb,4BAAQI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMgD,WAAWrC,KAA9C,mB,GApDQP,aC4BT6C,E,YA7Bb,WAAYjD,GAAQ,IAAD,8BACjB,4CAAMA,KACDN,MAAQ,GACb,EAAKwD,eAAiB,EAAKA,eAAeC,KAApB,gBAHL,E,4EAMJxC,GACbA,EAAEyC,iBACF,IAAIC,GAAa1C,EAAE2C,eAAiBC,OAAOD,eAAeE,QAAQ,QAClEhD,KAAKR,MAAMkD,eAAeG,K,+BAI1B,OACE,6BACE,yBAAK1D,UAAU,mBACb,yBAAKA,UAAU,wBACb,2BACE+C,YAAY,6CACZe,QAASjD,KAAK0C,eACdvD,UAAU,yB,GArBFS,aCyBPsD,E,YAvBb,WAAY1D,GAAQ,IAAD,8BACjB,4CAAMA,KACDN,MAAQ,GAFI,E,sEAMjB,OACE,oCACE,yBAAKG,MAAM,gBACT,yBAAKA,MAAM,oBACT,yBAAKA,MAAM,uBACT,wBAAIA,MAAM,IAAV,aACA,wBAAIF,UAAU,cACd,sFACA,kBAAC,EAAD,CAASuD,eAAgB1C,KAAKR,MAAMkD,yB,GAfxB9C,aCmdXuD,E,YA9cb,WAAY3D,GAAQ,IAAD,8BACjB,4CAAMA,KACDN,MAAQ,CACXkE,eAAe,GAEjB,EAAKC,iBAAmB,EAAKA,iBAAiBV,KAAtB,gBACxB,EAAKW,wBAA0B,EAAKA,wBAAwBX,KAA7B,gBAE/B,EAAKS,cAAgB,EAAKA,cAAcT,KAAnB,gBACrB,EAAKY,iBAAmB,EAAKA,iBAAiBZ,KAAtB,gBATP,E,6EAajB3C,KAAKwD,SAAS,CACZJ,eAAe,M,yCAKjBpD,KAAKwD,SAAS,CACZJ,eAAe,M,sCAOHK,GAAW,IAAD,OAMxB,GAAiB,IAAbA,EAAgB,CAElB,GAAIzD,KAAKR,MAAMkE,YAAYnC,OAAS,GACK,IAArCvB,KAAKR,MAAMkE,YAAY,GAAGnC,QACa,cAAvCvB,KAAKR,MAAMkE,YAAY,GAAG,GAAGC,MAAuB,CAEtD,IADA,IAAIC,EAAc,GACT3C,EAAI,EAAGA,EAAIjB,KAAKR,MAAMkE,YAAY,GAAGnC,SAAUN,EAAG,CAEzD2C,GADgB3C,EAAI,EAAI,SAAW4C,EAAW7D,KAAKR,MAAMkE,YAAY,GAAGzC,GAAG0C,OAASE,EAAW7D,KAAKR,MAAMkE,YAAY,GAAGzC,GAAG0C,OAO9H,OAHE,6BACGC,GAOL,IAAIE,EAAqB9D,KAAKR,MAAMsE,mBAGpC,GAAIA,EAAmBvC,OAAS,EAAG,CAEjC,IADA,IAAIqC,EAAc,GACT3C,EAAI,EAAGA,EAAI6C,EAAmBvC,SAAUN,EAAG,CAElD,IADA,IAAI8C,EAAU,GACLC,EAAI,EAAGA,EAAIF,EAAmB7C,GAAGM,SAAUyC,EAAG,CAErDD,GADgBC,EAAI,EAAI,SAAWH,EAAWC,EAAmB7C,GAAG+C,GAAGL,OAASE,EAAWC,EAAmB7C,GAAG+C,GAAGL,OAGtHC,EAAY1C,KACV,2BACG6C,IAQP,OAHE,6BACGH,GAYL,IAAsB,IAJF5D,KAAKd,MAAMkE,cAIF,CAG3B,IAFA,IAAIQ,EAAc,GACdG,EAAU,GACLC,EAAI,EAAGA,EAAIF,EAAmB,GAAGvC,SAAUyC,EAAG,CAErDD,GADgBC,EAAI,EAAI,SAAWH,EAAWC,EAAmB,GAAGE,GAAGL,OAASE,EAAWC,EAAmB,GAAGE,GAAGL,OAiBtH,OAdAC,EAAY1C,KACV,2BACG6C,EACA,OACD,kBAAC,IAAD,CACEE,aAAc,kBAAM,EAAKb,iBACzBc,aAAc,kBAAM,EAAKX,wBAK7B,6BACGK,GAOL,IADA,IAAIA,EAAc,GACT3C,EAAI,EAAGA,EAAI6C,EAAmBvC,SAAUN,EAAG,CAElD,IADA,IAAI8C,EAAU,GACLC,EAAI,EAAGA,EAAIF,EAAmB7C,GAAGM,SAAUyC,EAAG,CAErDD,GADgBC,EAAI,EAAI,SAAWH,EAAWC,EAAmB7C,GAAG+C,GAAGL,OAASE,EAAWC,EAAmB7C,GAAG+C,GAAGL,OAG5G,IAAN1C,EACF2C,EAAY1C,KACV,2BACG6C,EACA,OACD,kBAAC,IAAD,CACEE,aAAc,kBAAM,EAAKb,iBACzBc,aAAc,kBAAM,EAAKX,wBAM/BK,EAAY1C,KACV,2BACG6C,IAST,OAHE,6BACGH,GAUX,IADA,IAAIA,EAAc,GACT3C,EAAI,EAAGA,EAAIjB,KAAKR,MAAMkE,YAAYD,GAAUlC,SAAUN,EAAG,CAChE,IAAIkD,EAC2C,WAA7CnE,KAAKR,MAAMkE,YAAYD,GAAUxC,GAAGZ,KAAoB,MAAQL,KAAKR,MAAMkE,YAAYD,GAAUxC,GAAGX,MAAQ,MAC1GN,KAAKR,MAAMkE,YAAYD,GAAUxC,GAAGX,MAExCsD,GADAO,EAAYlD,EAAI,EAAI,QAAUkD,EAAYA,EAO5C,OAHE,6BACGP,K,yCAwBP,IAfkB,IAAD,OAOXQ,EAASpE,KAAKR,MAAM6E,UAAU9C,OAC9B+C,EAAStE,KAAKR,MAAM6E,UAAU,GAAG9C,OAEnCgD,EAAQ,GAIRC,EAAU,GAdG,WAeRf,GACP,IAAIgB,OAAU,EAEd,GAAiB,IAAbhB,EAAgB,CAClB,IAAIiB,EAAa,KACbC,EAAU,6BAAK,+BACe,IAA9B,EAAKnF,MAAMoF,iBAEbD,EAAU,EAAKE,gBAAgBpB,GAG7BiB,EADyC,cAAvC,EAAKlF,MAAMkE,YAAY,GAAG,GAAGpD,MAE7B,6BACE,4BACEnB,UAAU,kBACVG,MAAM,eACNC,QAAS,kBAAM,EAAKC,MAAMsF,oBAE1B,kBAAC,IAAD,OAEF,4BACE3F,UAAU,kBACVG,MAAM,oBACNC,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMuF,iBAAiB5E,EAAGsD,KAE/C,kBAAC,IAAD,OAEF,4BACEtE,UAAU,kBACVG,MAAM,0BACNC,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMwF,iBAAiB7E,EAAGsD,KAE/C,kBAAC,IAAD,OAEF,4BACEtE,UAAU,kBACVG,MAAM,qBACNC,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMyF,kBAAkB9E,EAAGsD,KAEhD,kBAAC,IAAD,QAaJ,6BACE,4BACEtE,UAAU,kBACVG,MAAM,0BACNC,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMwF,iBAAiB7E,EAAGsD,KAE/C,kBAAC,IAAD,SAKVgB,EACE,wBAAItF,UAAU,cACZ,yBACEA,UAAU,qBAGXuF,EACAC,QAKF,GAAIlB,IAAa,EAAKjE,MAAM0F,YAAa,CAC5C,IAAIP,EAAU,EAAKE,gBAAgBpB,GAC/B0B,EAAY,6BAAK,+BACa,IAA9B,EAAK3F,MAAMoF,iBACbO,EACE,6BACI,4BACEhG,UAAU,kBACVG,MAAM,0BACNC,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMwF,iBAAiB7E,EAAGsD,KAE/C,kBAAC,IAAD,OAEF,4BACEtE,UAAU,kBACVG,MAAM,qBACNC,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMyF,kBAAkB9E,EAAGsD,KAEhD,kBAAC,IAAD,SAIVgB,EACE,wBAAItF,UAAU,cACXgG,EACAR,OAKF,CACH,IAAIA,EAAU,EAAKE,gBAAgBpB,GAC/B0B,EAAY,6BAAK,+BACa,IAA9B,EAAK3F,MAAMoF,iBACbO,EACE,6BACE,4BACEhG,UAAU,kBACVG,MAAM,eACNC,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM4F,gBAAgBjF,EAAGsD,KAE9C,kBAAC,IAAD,OAEF,4BACItE,UAAU,kBACVG,MAAM,oBACNC,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMuF,iBAAiB5E,EAAGsD,KAE/C,kBAAC,IAAD,OAEF,4BACEtE,UAAU,kBACVG,MAAM,0BACNC,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMwF,iBAAiB7E,EAAGsD,KAE/C,kBAAC,IAAD,OAEF,4BACEtE,UAAU,kBACVG,MAAM,qBACNC,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM6F,oBAAoBlF,EAAGsD,KAElD,kBAAC,IAAD,OAEF,4BACEtE,UAAU,kBACVG,MAAM,qBACNC,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMyF,kBAAkB9E,EAAGsD,KAEhD,kBAAC,IAAD,SAIVgB,EACE,wBAAItF,UAAU,cACXgG,EACAR,GAIPH,EAAQtD,KAAKuD,IA3JNhB,EAAW,EAAGA,EAAWa,IAAUb,EAAW,EAA9CA,GA6JTc,EAAMrD,KACJ,2BAAO/B,UAAU,cACf,4BAAKqF,KAQT,IADA,IAAIc,EAAO,GArLM,WAsLRrE,GAGP,IAFA,IAAIuD,EAAU,GAvLC,WAyLNR,GAIP,GAAIA,IAAM,EAAKxE,MAAM+F,gBAAiB,CAEpCf,EAAQtD,KACN,wBAAIsE,MAFU,CAACC,gBAAiB,cAG9B,2BACEtG,UAAU,iCACVkB,KAAK,OACLC,MAAOuD,EAAW,EAAKrE,MAAM6E,UAAUpD,GAAG+C,GAAG0B,aAC7CC,UAAQ,UAMX,CACH,IAAIC,EAGFA,EADE5B,IAAM,EAAKxE,MAAM0F,YACP,CAAEO,gBAAiB,aAInB,CAAEA,gBAAiB,SAGjCjB,EAAQtD,KACN,wBAAIsE,MAAOI,GACT,2BACEzG,UAAU,YACVkB,KAAK,OACLC,MAAOuD,EAAW,EAAKrE,MAAM6E,UAAUpD,GAAG+C,GAAG3C,MAC7C/B,MAAOuE,EAAW,EAAKrE,MAAM6E,UAAUpD,GAAG+C,GAAG3C,MAC7CnB,SAAU,SAACC,GAAD,OAAO,EAAKX,MAAMqG,aAAa1F,EAAGc,EAAG+C,IAC/C8B,cAAe,SAAC3F,GAAD,OAAO,EAAKX,MAAMuG,kBAAkB5F,EAAGc,EAAG+C,UArC1DA,EAAI,EAAGA,EAAIM,EAAQN,IAAM,EAAzBA,GA4CTsB,EAAKpE,KAAK,4BAAKsD,KA/CRvD,EAAI,EAAGA,EAAImD,EAAQnD,IAAM,EAAzBA,GAkDT,OADAsD,EAAMrD,KAAK,+BAAQoE,IACZf,I,gDAiBP,IAPA,IAAMH,EAASpE,KAAKR,MAAMwG,iBAAiBzE,OACrC+C,EAAStE,KAAKR,MAAMwG,iBAAiB,GAAGzE,OAE1CgD,EAAQ,GAGRC,EAAU,GACLR,EAAI,EAAGA,EAAIM,IAAUN,EAAG,CAC/B,IAAIS,EACF,wBAAItF,UAAU,wBACXa,KAAKR,MAAMwG,iBAAiB,GAAGhC,GAAG3C,MAGvCmD,EAAQtD,KAAKuD,GAEf,IAAIwB,EAAiB,wBAAI9G,UAAU,wBAAwBqF,GAC3DD,EAAMrD,KAAK,+BAAQ+E,IAInB,IADA,IAAIC,EAAY,GACPjF,EAAI,EAAGA,EAAImD,EAAQnD,IAAK,CAG/B,IAFA,IAAIuD,EAAU,GAELR,EAAI,EAAGA,EAAIM,EAAQN,IAE1BQ,EAAQtD,KACN,wBAAI/B,UAAU,aACXa,KAAKR,MAAMwG,iBAAiB/E,GAAG+C,GAAG3C,OAKzC6E,EAAUhF,KAAK,4BAAKsD,IAGtB,OADAD,EAAMrD,KAAK,+BAAQgF,IACZ3B,I,+BAIP,IAAI4B,EAYJ,OATAA,EAEE,6BACE,2BAAO9G,OAAK,EAAC+G,OAAO,IAAIjH,UAAU,iCAC/Ba,KAAKqD,qBAKL,6BAAM8C,O,GA3cQvG,aAodzB,SAASiE,EAAWwC,GAClB,OAAOA,EAAI/E,QAAQ,YAAa,IACrBA,QAAQ,KAAM,K,4BClYZgF,E,YA7Eb,WAAY9G,GAAQ,IAAD,8BACjB,4CAAMA,KACDN,MAAQ,GACb,EAAKqH,kBAAoB,EAAKA,kBAAkB5D,KAAvB,gBAHR,E,iFASjB,IAHmB,IAAD,OACZ6D,EAAmBxG,KAAKR,MAAMgH,iBAChCC,EAAc,GAFA,WAGTxF,GAKP,IAFA,IAAIyF,EAAa,SAAWzF,EAAI,KAC5B0F,EAAcH,EAAiBvF,GAAGqE,KAAK,GAAGsB,MACrC5C,EAAI,EAAGA,EAAI2C,EAAYpF,SAAUyC,EAAG,CAC3C,IAAI6C,EAAaC,EAAcH,EAAY3C,GAAG+C,WACJ,OAAtCF,EAAWA,EAAWtF,OAAS,KACjCsF,EAAaA,EAAWG,MAAM,GAAI,IAEpCN,EAAaA,EAAaG,EAAa,KAGzC,IAAII,EACF,yBACEC,wBAAyB,CACvBC,OAAQ,EAAK3H,MAAMgH,iBAAiBvF,GAAGmG,aAIzCC,OAAY,EAChB,IAAoC,IAAhC,EAAK7H,MAAM8H,cAAcrG,GAAa,CACxC,IAAIyF,EAAa,GAEfA,EAD0B,WAAxB,EAAKlH,MAAM+H,SACA,SAGA,OAEfF,EACE,4BACE9H,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMgI,eAAerH,EAAGc,KAE5CyF,GAGPD,EAAYvF,KACV,wBACE/B,UAAU,mBAEZ,0BACEI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMiI,YAAYtH,EAAGc,KAEzCyF,EAHH,IAIE,kBAAC,IAAD,OAEDW,EACC,kBAACK,EAAA,EAAD,CAAU3H,OAAQ,EAAKP,MAAM8H,cAAcrG,IACzC,6BAAMgG,OAhDLhG,EAAI,EAAGA,EAAIuF,EAAiBjF,SAAUN,EAAI,EAA1CA,GAqDT,OACE,wBAAI9B,UAAU,wCAAwCsH,K,+BAKxD,IACIkB,EAAsB,KAI1B,OAHkB,IAFA3H,KAAKR,MAAMgH,iBAAiBjF,SAG5CoG,EAAsB,6BAAM3H,KAAKuG,sBAE5B,6BAAMoB,O,GA1EY/H,aAgF7B,SAASkH,EAAcT,GACrB,MAA4B,OAAxBA,EAAIA,EAAI9E,OAAS,GACZ8E,EAAIW,MAAM,GAAI,GAEdX,E,IC1CIuB,E,YAjDb,WAAYpI,GAAQ,IAAD,8BACjB,4CAAMA,KACDN,MAAQ,GAFI,E,sEAKT,IAAD,OACD2I,EAsDR,SAAoBxB,GAClB,IAAIyB,EAAYzB,EACZ0B,EAAe1B,EAAI2B,QAAQ,MAGT,IAAlBD,IACFD,EAAYA,EAAUd,MAAM,EAAGe,EAAa,IAG9C,OAAOD,EAAUxG,QAAQ,KAAM,KA/DfuC,CAA0B7D,KAAKR,MAAMqD,UAAUmE,MAAM,IAgD5D1F,QAAQ,YAAa,WA/C9B,OACE,6BACE,wBAAIjC,MAAM,wCACR,wBAAIF,UAAU,QACd,wBACEA,UAAU,kBACVI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMyI,mBAAmB9H,EAAG,kBAFnD,gCAIgC+H,mBAAmBL,IAEnD,wBACE1I,UAAU,mBAEV,0BACEI,QAAS,kBAAM,EAAKC,MAAM2I,yBAD5B,0CAGyC,kBAAC,IAAD,OAGzC,kBAACT,EAAA,EAAD,CAAU3H,OAAQC,KAAKR,MAAM4I,oBAC3B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,6BACE,kBAAC,EAAD,CACE9B,iBAAkBxG,KAAKR,MAAMgH,iBAC7Bc,cAAetH,KAAKR,MAAM8H,cAC1BG,YAAazH,KAAKR,MAAMiI,YACxBD,eAAgBxH,KAAKR,MAAM+I,iBAC3BhB,SAAU,gBAOtB,wBAAIpI,UAAU,c,GA3CDS,a,oBCwHR4I,G,kBAxHb,WAAYhJ,GAAQ,IAAD,8BACjB,4CAAMA,KACDN,MAAQ,GACb,EAAKuJ,wBAA0B,EAAKA,wBAAwB9F,KAA7B,gBAHd,E,uFAMQ,IAAD,OACpB+F,EAAkB1I,KAAKR,MAAMkJ,gBAC7BC,EAAoB3I,KAAKR,MAAMmJ,kBAC/BC,EAAkB5I,KAAKR,MAAMoJ,gBAE7BC,EAAc,KAEdC,EAAqB,GAErBF,EAAgBrH,SAAWoH,EAAkBpH,QAC/CwH,MAAM,qBAER,IAAK,IAAI9H,EAAI,EAAGA,EAAI2H,EAAgBrH,SAAUN,GACjB,IAAvB2H,EAAgB3H,IAClB6H,EAAmB5H,KAAKyH,EAAkB1H,IAO9C,IAAyB,IAArByH,GAA0BI,EAAmBvH,OAAS,EAAG,CAI3D,IAHA,IAAIyH,GAC4B,IAA9BhJ,KAAKR,MAAMoF,eAA2B,2CACpC,yCACK3D,EAAI,EAAGA,EAAI6H,EAAmBvH,SAAUN,EAAG,CAClD,IAAI8C,EAAU9C,EAAI,EAAI,QAAU,GAOhC+H,GALEjF,EADqC,QAAnC+E,EAAmB7H,GAAGgI,SACdlF,EAAU,QAAUF,EAAWiF,EAAmB7H,GAAGiI,QAGrDnF,EAAU,SAAW+E,EAAmB7H,GAAGkI,OAAS,IAAMtF,EAAWiF,EAAmB7H,GAAGiI,QAIzGF,GAAc,IAId,IAAI7D,GAC4B,IAA9BnF,KAAKR,MAAMoF,eAA2B,kBAACwE,EAAA,EAAD,CAAQ7J,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM6J,kBAAkBlJ,EAAG,EAAG2I,KAA3D,MACpC,kBAACM,EAAA,EAAD,CAAQ7J,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM8J,mBAAmBnJ,EAAG2I,KAAzD,MACJD,EACE,6BACE,6BAAK,2BAAIG,IACR7D,GAMP,IAFA,IAAIoE,EAAY,GAjDQ,WAmDftI,GAEP,IAAIuI,EAAcvI,IAAMyH,EAAkBG,EAAa,KACnB,aAAhCF,EAAkB1H,GAAGkI,OACvBI,EAAUrI,KACR,6BACE,6BACE,2BACE,2BACEb,KAAK,WACLE,QAASqI,EAAgB3H,GACzBf,SAAU,SAACC,GAAD,OAAO,EAAKX,MAAMiK,qBAAqBtJ,EAAGc,MAErD,OAAU,OACV4C,EAAW8E,EAAkB1H,GAAGiI,UAGpCM,IAKLD,EAAUrI,KACR,6BACE,6BACE,2BACE,2BACEb,KAAK,WACLE,QAASqI,EAAgB3H,GACzBf,SAAU,SAACC,GAAD,OAAO,EAAKX,MAAMiK,qBAAqBtJ,EAAGc,MAErD,OAAU,OACV0H,EAAkB1H,GAAGkI,OACrB,IAAK,OAAU,OAAU,OAAU,OAAU,OAAU,OAAU,OAAU,OAC3EtF,EAAW8E,EAAkB1H,GAAGiI,UAGpCM,KArCAvI,EAAI,EAAGA,EAAI0H,EAAkBpH,SAAUN,EAAI,EAA3CA,GA0CT,OAAOsI,I,+BAKP,IAAIG,EAAe1J,KAAKyI,0BAExB,OACE,6BACE,6BACE,2BAAG,2DAAH,mDAEF,6BACA,6BACGiB,Q,GAnHqB9J,cA+HhC,SAASiE,EAAWwC,GAClB,OAAOA,EAAI/E,QAAQ,YAAa,IACrBA,QAAQ,KAAM,K,ICxCZqI,E,YAvFb,WAAYnK,GAAQ,IAAD,8BACjB,4CAAMA,KACDN,MAAQ,GACb,EAAK0K,wBAA0B,EAAKA,wBAAwBjH,KAA7B,gBAHd,E,uFAMQ,IAAD,OACpBkH,EAAoB7J,KAAKR,MAAMqK,kBAC/BC,EAAkB9J,KAAKR,MAAMsK,gBAC7BC,EAAoB/J,KAAKR,MAAMuK,kBAO/BD,EAAgBvI,SAAWsI,EAAkBtI,QAC/CyI,QAAQC,IAAI,qBAKd,IADA,IAAInB,EAAqB,GAChB7H,EAAI,EAAGA,EAAI6I,EAAgBvI,SAAUN,GACjB,IAAvB6I,EAAgB7I,IAClB6H,EAAmB5H,KAAK2I,EAAkB5I,IAK9C,IAAI4H,EAAc,KAClB,IAA2B,IAAvBkB,GAA4BjB,EAAmBvH,OAAS,EAAG,CAE7D,IADA,IAAIyH,EAAe,wCACV/H,EAAI,EAAGA,EAAI6H,EAAmBvH,SAAUN,EAAG,CAClD,IAAI8C,EAAyC,WAA/B+E,EAAmB7H,GAAGZ,KAAoB,MAAQyI,EAAmB7H,GAAGX,MAAQ,MAAQwI,EAAmB7H,GAAGX,MAE5H0I,GADAjF,EAAU9C,EAAI,EAAI,OAAS8C,EAAUA,EAGvCiF,GAAc,IACdH,EACE,6BACE,6BAAK,2BAAIG,IACT,kBAACI,EAAA,EAAD,CAAQ7J,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM0K,oBAAoB/J,EAAG,EAAKX,MAAMiE,SAAUqF,KAA/E,OAMN,IAFA,IAAIS,EAAY,GAvCQ,WAyCftI,GACP,IAAIuI,EAAcvI,IAAM8I,EAAoBlB,EAAc,KAC1DU,EAAUrI,KACR,6BACE,6BACE,2BACE,2BACEb,KAAK,WACLE,QAASuJ,EAAgB7I,GACzBf,SAAU,SAACC,GAAD,OAAO,EAAKX,MAAM2K,qBAAqBhK,EAAGc,EAAG,EAAKzB,MAAMiE,aAEnE,OAAU,OACVoG,EAAkB5I,GAAG0C,QAGzB6F,KAfEvI,EAAI,EAAGA,EAAI4I,EAAkBtI,SAAUN,EAAI,EAA3CA,GAmBT,OAAOsI,I,+BAKP,IAAIG,EAAe1J,KAAK4J,0BAExB,OACE,6BACE,6BACE,2BAAG,2DAAH,8CAEF,6BACA,6BACGF,Q,GAlFqB9J,aCmJjBwK,E,YAjJb,WAAY5K,GAAQ,IAAD,8BACjB,4CAAMA,KACDN,MAAQ,GACb,EAAKmL,iBAAmB,EAAKA,iBAAiB1H,KAAtB,gBACxB,EAAK2H,gBAAkB,EAAKA,gBAAgB3H,KAArB,gBAJN,E,gFAOC,IAAD,OACb4H,EAAsBvK,KAAKR,MAAM+K,oBACjCC,EAAmBxK,KAAKR,MAAMgL,iBAE9BD,EAAoBhJ,SAAWiJ,EAAiBjJ,QAClDwH,MAAM,sBAKR,IADA,IAAI0B,EAAa,GATA,WAURxJ,GAEP,GAAyC,IAArCuJ,EAAiBvJ,GAAGX,MAAMiB,OAC5BkJ,EAAWvJ,KACT,6BACE,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,YACb,2BAAIqL,EAAiBvJ,GAAGyJ,IAAxB,MAEF,yBAAKvL,UAAU,YACZ0E,EAAW2G,EAAiBvJ,GAAGX,MAAM,MAG1C,oCAQJ,IAA+B,IAA3BiK,EAAoBtJ,GACtBwJ,EAAWvJ,KACT,6BACE,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,YACb,2BAAIqL,EAAiBvJ,GAAGyJ,IAAxB,MAEF,yBAAKvL,UAAU,YACZ0E,EAAW2G,EAAiBvJ,GAAGX,MAAM,KAExC,yBAAKnB,UAAU,YACb,4BACEA,UAAU,kBACVI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMmL,qBAAqBxK,EAAGc,KAEnD,kBAAC,IAAD,SAIN,mCAMD,CAEHwJ,EAAWvJ,KACT,6BACE,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,YACb,2BAAIqL,EAAiBvJ,GAAGyJ,IAAxB,MAEF,yBAAKvL,UAAU,YACZ0E,EAAW2G,EAAiBvJ,GAAGX,MAAM,KAExC,yBAAKnB,UAAU,YACb,4BACEA,UAAU,kBACVI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMmL,qBAAqBxK,EAAGc,KAEnD,kBAAC,IAAD,WAOV,IAAK,IAAI+C,EAAI,EAAGA,EAAIwG,EAAiBvJ,GAAGX,MAAMiB,SAAUyC,EAAG,CACzD,IAAI4G,EAAQ5G,IAAMwG,EAAiBvJ,GAAGX,MAAMiB,OAAS,EAAI,6BAAS,KAClEkJ,EAAWvJ,KACT,6BACE,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,wBACZ0E,EAAW2G,EAAiBvJ,GAAGX,MAAM0D,MAGzC4G,OA9EJ3J,EAAI,EAAGA,EAAIuJ,EAAiBjJ,SAAUN,EAAI,EAA1CA,GA2FT,OALE,6BACE,yCAAc,2BAAI4C,EAAW7D,KAAKR,MAAMqL,aAAaxJ,OAArD,QACCoJ,K,wCAQL,IADA,IAAIK,EAAY,GACP7J,EAAI,EAAGA,EAAIjB,KAAKR,MAAMqL,aAAaE,OAAOxJ,SAAUN,EAC3D6J,EAAU5J,KACR,2BACG2C,EAAW7D,KAAKR,MAAMqL,aAAaE,OAAO9J,MAUjD,OALE,6BACE,wCAAa,2BAAI4C,EAAW7D,KAAKR,MAAMqL,aAAaxJ,OAApD,QACCyJ,K,+BAUL,IAAIL,EAAazK,KAAKqK,mBAClBS,EAAY9K,KAAKsK,kBACrB,OACE,6BACGG,EACD,wBAAItL,UAAU,2BACb2L,O,GA7ImBlL,aAwJ5B,SAASiE,EAAWwC,GAClB,OAAOA,EAAI/E,QAAQ,YAAa,IACrBA,QAAQ,KAAM,K,ICyrBZ0J,E,YAr0Bb,WAAYxL,GAAQ,IAAD,8BACjB,4CAAMA,KACDN,MAAQ,GACb,EAAK+L,oBAAsB,EAAKA,oBAAoBtI,KAAzB,gBAC3B,EAAKuI,mBAAqB,EAAKA,mBAAmBvI,KAAxB,gBAC1B,EAAKwI,iBAAmB,EAAKA,iBAAiBxI,KAAtB,gBACxB,EAAKyI,qBAAuB,EAAKA,qBAAqBzI,KAA1B,gBAC5B,EAAK0I,qBAAuB,EAAKA,qBAAqB1I,KAA1B,gBAPX,E,8EAUF2I,EAAYC,GAK3B,IALyC,IAAD,OAClCC,EAAaxL,KAAKR,MAAMiM,mBAAmBH,GAAYI,aAC3DH,GACAC,WACEG,EAAe,GAJqB,WAK/BC,GAIP,IADA,IAAIC,EAAiB,SAAWD,EAAa,KACpC3K,EAAI,EAAGA,EAAIuK,EAAWI,GAAYtM,MAAMiC,SAAUN,EACzD4K,EAAiBA,EAAiBL,EAAWI,GAAYtM,MAAM2B,GAAK,IAEtE0K,EAAazK,KACX,6BACE,kBAACkI,EAAA,EAAD,CACE7J,QAAS,SAACY,GAAD,OACP,EAAKX,MAAMsM,iBACT3L,EACAmL,EACAC,EACAK,KAIHC,EACD,kBAAC,IAAD,OAEF,kBAACnE,EAAA,EAAD,CAAU3H,OAAQyL,EAAWI,GAAY7L,QACvC,kBAACuI,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,KACE,6BACE,wBAAIlJ,UAAU,uBACZ,wBACEA,UAAU,kEACVI,QAAS,SAACY,GAAD,OACP,EAAKX,MAAMuM,WACTT,EACAC,EACAC,EAAWI,GAAYvK,KACvBmK,EAAWI,GAAYI,cAP7B,gBAaF,yBACE9E,wBAAyB,CACvBC,OAAQqE,EAAWI,GAAYvK,KAAK+F,oBA1C7CwE,EAAa,EAAGA,EAAaJ,EAAWjK,SAAUqK,EAAa,EAA/DA,GAoDT,OAAOD,I,yCAGUL,GAIjB,IAJ8B,IAAD,OACvBI,EAAe1L,KAAKR,MAAMiM,mBAAmBH,GAAYI,aAC3DO,EAAiB,GACjBC,GAAiB,EAHQ,WAKvBX,GAIJ,IAAIY,EACF,0BAA4BT,EAAaH,GAAaa,KAEpDC,EAAe,kBACfX,EAAaH,GAAaxL,SAC5BsM,EAAe,yCAGI,IAAnBH,GACgD,IAAhDR,EAAaH,GAAaC,WAAWjK,SAErC2K,GAAiB,EASjBD,EAAe/K,KACb,wBAAI/B,UAAU,mBACZ,6BACA,6FAGA,gCAKN8M,EAAe/K,KACb,wBACE/B,UAAWkN,EACX/M,MAAO6M,GAKP,0BACE5M,QAAS,SAACY,GAAD,OACP,EAAKX,MAAM8M,cAAcnM,EAAGmL,EAAYC,KAGzC1H,EAAW6H,EAAaH,GAAaa,MAAQ,IAC9C,kBAAC,IAAD,OAGF,kBAAC1E,EAAA,EAAD,CAAU3H,OAAQ2L,EAAaH,GAAaxL,QAC1C,6BACE,wBAAIZ,UAAU,uBACZ,wBACEA,UAAU,uCACVI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM+M,UAAUjB,EAAYC,KAFnD,oBAOD,EAAKJ,iBAAiBG,EAAYC,QA9DvCA,EAAc,EAClBA,EAAcG,EAAanK,SACzBgK,EACD,EAHGA,GAoEN,OACE,wBAAIpM,UAAU,wCACX,IACA8M,EAAgB,O,4CAUrB,IALqB,IAAD,OAEdR,EAAqBzL,KAAKR,MAAMiM,mBAElCe,EAAkB,GAJF,WAKXvL,GAEP,IAAMwL,EAAYhB,EAAmBxK,GAAGwL,UAClCC,EAASjB,EAAmBxK,GAAGyL,OACjCC,EAA6B,YAAdF,EAA0BA,EAAY,KAAOC,EAAS,IAAMA,EAAS,IACpFP,EAAc,yBAA2BM,EAAY,KAAOC,EAE5DE,EAAY,kBACZ,EAAKpN,MAAMiM,mBAAmBxK,GAAGlB,SACnC6M,EAAY,wCAGdJ,EAAgBtL,KACd,wBAAI7B,MAAOuN,EAAWtN,MAAO6M,GAC3B,0BAAM5M,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMqN,yBAAyB1M,EAAGc,KAC1D4C,EAAW8I,GACZ,kBAAC,IAAD,OAGF,kBAACjF,EAAA,EAAD,CAAU3H,OAAQ,EAAKP,MAAMiM,mBAAmBxK,GAAGlB,QACjD,6BACE,6BASC,EAAKmL,mBAAmBjK,QA9B1BA,EAAI,EAAGA,EAAIwK,EAAmBlK,SAAUN,EAAI,EAA5CA,GAoCT,OACE,wBAAI9B,UAAU,wCACXqN,K,2CAOc/I,EAAUqJ,GAI7B,IAJ8C,IAAD,OAEzCC,EAAe,GAF0B,WAIpC9L,GACP,IAAI+L,EAAiB,CACnB,CACE,MAAQF,EAAe7L,GAAGX,MAC1B,KAAOwM,EAAe7L,GAAGZ,OAGzB4M,EAAgBH,EAAe7L,GAAG0C,MACtCoJ,EAAa7L,KACX,6BACE,2BACE,kBAACkI,EAAA,EAAD,CACE7J,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM0N,uBAAuB/M,EACAsD,EACAuJ,KACjDC,OAfFhM,EAAI,EAAGA,EAAI6L,EAAevL,SAAUN,EAAI,EAAxCA,GAsBT,IAAIkM,EAAqB,GACzB,IAAgC,IAA5BnN,KAAKR,MAAM0F,YAAoB,CACjC,IAAI8H,EAAiBhN,KAAKR,MAAMkE,YAAY1D,KAAKR,MAAM0F,aACvDiI,EAAgD,IAA3BnN,KAAKR,MAAM0F,YAAoBkI,EAAoBJ,GAAkB,eAY5F,OATE,yBAAK7N,UAAU,aACb,yDAGA,qDACyB,2BAAIgO,IAE5BJ,K,0CAMaM,GAAa,IAAD,OAC1BC,EAAqBF,EAAoBC,EAAWL,gBAkCxD,OAhCE,yBAAK7N,UAAU,aACb,iFACA,oEACA,2BAAG,2BAAImO,GAAP,MACA,yBAAKnO,UAAU,OACb,kBAACiK,EAAA,EAAD,CACEjK,UAAU,WACVI,QAAS,SAACY,GAAD,OACP,EAAKX,MAAM+N,oBACTpN,EACAkN,EAAW5J,SACX4J,EAAWL,kBANjB,cAYA,kBAAC5D,EAAA,EAAD,CACEjK,UAAU,uBACVI,QAAS,SAACY,GAAD,OACP,EAAKX,MAAMgO,qBACTrN,EACAkN,EAAW5J,SACX4J,EAAWL,kBANjB,wB,6CAmBgB,IAAD,OACrBhD,QAAQC,IAAIjK,KAAKR,MAAMiO,eAGvB,IAFA,IAAIV,EAAe,GACfD,EAAiB9M,KAAKR,MAAMiO,cAAcX,eAHzB,WAIZ7L,GACP,IAAI+L,EAAiB,CACnB,CACE,MAAQF,EAAe7L,GAAGX,MAC1B,KAAOwM,EAAe7L,GAAGZ,OAGzB4M,EAAgBH,EAAe7L,GAAG0C,MACtCoJ,EAAa7L,KACX,6BACE,2BACE,kBAACkI,EAAA,EAAD,CACE7J,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMkO,uBAAuBvN,EAAG,EAAKX,MAAMiO,cAAchK,SAAUuJ,KAEvFC,OAdFhM,EAAI,EAAGA,EAAI6L,EAAevL,SAAUN,EAAI,EAAxCA,GAqBT,IAAIkM,EAAqB,GACzB,IAAgC,IAA5BnN,KAAKR,MAAM0F,YAAoB,CACjC,IAAI8H,EAAiBhN,KAAKR,MAAMkE,YAAY1D,KAAKR,MAAM0F,aACvDiI,EAAgD,IAA3BnN,KAAKR,MAAM0F,YAAoBkI,EAAoBJ,GAAkB,eAY5F,OATE,yBAAK7N,UAAU,aACb,yDAGA,qDACyB,2BAAIgO,IAE5BJ,K,+BAKG,IACJY,EACAC,EACAC,EAHG,OA4CP,GAhCEA,EAL+B,KAA/B7N,KAAKR,MAAMsO,gBAMT,yBAAK3O,UAAU,OACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,mBAAd,UAEE,mCACA,0BAAMA,UAAU,2BAAhB,kCAUN,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,mBAAd,UAEE,mCACA,0BAAMA,UAAU,2BAAhB,8BAWyB,KAA/Ba,KAAKR,MAAMsO,gBACbF,EACE,kBAAC,EAAD,CACE3F,mBAAoBjI,KAAKR,MAAMyI,mBAC/BpF,UAAW7C,KAAKR,MAAMqD,UACtBuF,mBAAoBpI,KAAKR,MAAM4I,mBAC/BD,qBAAsBnI,KAAKR,MAAM2I,qBACjC3B,iBAAkBxG,KAAKR,MAAMgH,iBAC7Bc,cAAetH,KAAKR,MAAM8H,cAC1BG,YAAazH,KAAKR,MAAMiI,YACxBsG,mBAAoB/N,KAAKR,MAAMuO,mBAC/BxF,iBAAkBvI,KAAKR,MAAM+I,wBAI9B,GAAiC,OAA7BvI,KAAKR,MAAMiO,cAAwB,CAC1C,IAAMJ,EAAarN,KAAKR,MAAMiO,cAG9B,GAAwB,sBAApBJ,EAAWW,KACbL,EACE,kBAAC,EAAD,CACEhF,kBAAmB3I,KAAKR,MAAMmJ,kBAC9BC,gBAAiB5I,KAAKR,MAAMoJ,gBAC5BhE,eAAgB5E,KAAKR,MAAMoF,eAC3B6E,qBAAsBzJ,KAAKR,MAAMiK,qBACjC/F,YAAa1D,KAAKR,MAAMkE,YACxBgF,gBAAiB1I,KAAKR,MAAMkJ,gBAC5BW,kBAAmBrJ,KAAKR,MAAM6J,kBAC9BC,mBAAoBtJ,KAAKR,MAAM8J,0BAMhC,GAAwB,0BAApB+D,EAAWW,KAClBL,EACE,kBAAC,EAAD,CACE9D,kBAAmB7J,KAAKR,MAAMqK,kBAC9BC,gBAAiB9J,KAAKR,MAAMsK,gBAC5BC,kBAAmB/J,KAAKR,MAAMuK,kBAC9BI,qBAAsBnK,KAAKR,MAAM2K,qBACjCD,oBAAqBlK,KAAKR,MAAM0K,oBAChCzG,SAAU4J,EAAW5J,gBAMtB,GAAwB,gBAApB4J,EAAWW,KAGhBL,EAD6B,IAA3B3N,KAAKR,MAAM0F,YAEX,6BACE,2BACE,oHASJ,6BACE,qEACA,kBAACkE,EAAA,EAAD,CACE7J,QAAS,kBAAM,EAAKC,MAAMyO,kBAD5B,YAUH,GAAwB,wBAApBZ,EAAWW,KAClBL,EACE,6BACE,2BACE,mDADF,uBACiD,yCAEjD,iCAGA,2BACE,+CADF,8BACoD,+CAMrD,GAAwB,sBAApBN,EAAWW,KAA8B,CAEhD,IADA,IAAIV,EAAqB,GAChBrM,EAAI,EAAGA,EAAIoM,EAAWL,eAAezL,SAAUN,EAClDA,EAAI,IACNqM,GAAsB,OAExBA,GAAsBD,EAAWL,eAAe/L,GAAG0C,MAGnDgK,EADyB,KAAvBL,EAEA,6BACE,qDACA,2BAAG,2BAAIA,GAAP,MACA,kBAAClE,EAAA,EAAD,CACE7J,QAAS,SAACY,GAAD,OACP,EAAKX,MAAM6J,kBACTlJ,EACAkN,EAAW5J,SACX4J,EAAWL,kBALjB,OAgBF,6BACE,uBAAG7N,UAAU,mBAAb,YACW,kDADX,yBAC2D,gDAO9D,GAAwB,wBAApBkO,EAAWW,KAAgC,CAClD,IAAIV,EAAqBF,EAAoBC,EAAWL,gBACxDW,EACE,6BACE,qDACA,2BAAG,2BAAIL,GAAP,MACA,kBAAClE,EAAA,EAAD,CACE7J,QAAS,SAACY,GAAD,OACP,EAAKX,MAAM0K,oBACT/J,EACAkN,EAAW5J,SACX4J,EAAWL,kBALjB,YAeD,GAAwB,0BAApBK,EAAWW,KAClBL,EAAY3N,KAAKkO,oBAAoBb,QAGlC,GAAwB,2BAApBA,EAAWW,KAAmC,CACrD,IAAIlB,EAAiB9M,KAAKoL,qBAAqBiC,EAAW5J,SAAU4J,EAAWP,gBAC/Ea,EACE,6BACGb,QAKF,GAAwB,mCAApBO,EAAWW,KAA2C,CAC7D,IAAIG,EAAmBnO,KAAKkO,oBAAoBb,GAC5CN,EAAe/M,KAAKoL,qBAAqBiC,EAAW5J,SAAU4J,EAAWP,gBAC7Ea,EACE,6BACE,kBAACrF,EAAA,EAAD,CAAMnJ,UAAU,qBACb4N,GAEH,6BACA,kBAACzE,EAAA,EAAD,CAAMnJ,UAAU,qBACbgP,SAMJ,GAAwB,sBAApBd,EAAWW,KAA8B,CAChD,IAAIrJ,EAAU,KAEZA,EAD0B,IAAxB0I,EAAW5J,SAEX,2BAAG,+EAIH,2BAAG,mEAAyC2J,EAAoBpN,KAAKR,MAAMkE,YAAY2J,EAAW5J,WAA/F,OAGPkK,EACE,6BACE,6BACGhJ,GAEH,6BACE,kBAACyE,EAAA,EAAD,CACE7J,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM4O,kBAAkBjO,EAAGkN,EAAW5J,SAAU,eADvE,mBAMF,6BACA,6BACE,kBAAC2F,EAAA,EAAD,CACE7J,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM4O,kBAAkBjO,EAAGkN,EAAW5J,SAAU,gBADvE,oBAMF,6BACA,6BACE,kBAAC2F,EAAA,EAAD,CACE7J,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM6O,WAAWlO,EAAGkN,EAAW5J,YADtD,uBAMF,6BACA,6BACE,kBAAC2F,EAAA,EAAD,CACE7J,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAM8O,mBAAmBnO,EAAGkN,EAAW5J,YAD9D,4BAUH,GAAwB,sBAApB4J,EAAWW,KAClBL,EACE,6BACE,0DACA,6BAAMN,EAAWtC,cAKlB,GAAwB,sBAApBsC,EAAWW,KAClBL,EAcE,kBAAC,EAAD,CACEnD,iBAAkBxK,KAAKR,MAAMgL,iBAC7BD,oBAAqBvK,KAAKR,MAAM+K,oBAChCM,aAAc7K,KAAKR,MAAMqL,aACzBF,qBAAsB3K,KAAKR,MAAMmL,4BAKlC,GAAwB,uBAApB0C,EAAWW,KAA+B,CACjD,IAAIjB,EAAe/M,KAAKqL,uBACxBsC,EACE,6BACGZ,QAKF,GAAwB,mCAApBM,EAAWW,KAA2C,CAC7D,IAAIG,EAAmBnO,KAAKkO,oBAAoBb,GAC5CN,EAAe/M,KAAKqL,uBACxBsC,EACE,6BACE,kBAACrF,EAAA,EAAD,CAAMnJ,UAAU,qBACb4N,GAEH,6BACA,kBAACzE,EAAA,EAAD,CAAMnJ,UAAU,qBACbgP,KAmBX,GAAmC,iBAA/BnO,KAAKR,MAAMsO,gBAAoC,CACjD,IAAIS,EAAWvO,KAAKR,MAAMgP,SAC1BZ,EACE,6BACE,kBAAC,IAAD,CACEa,cAAeF,EACfG,SAAU,SAACC,GAAD,OAAW,EAAKnP,MAAMoP,gBAAgBD,KAEhD,kBAAC,IAAD,KACE,kBAAC,IAAD,0BACA,kBAAC,IAAD,uBAEA,kBAAC,IAAD,KACGhB,GAEH,kBAAC,IAAD,KACE,6BACE,wBAAItO,MAAM,wCACR,wBAAIF,UAAU,QACd,wBACEA,UAAU,mBAEV,0BACEI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMqP,gBAAgB1O,EAAG,WADhD,+BAMA,kBAACuH,EAAA,EAAD,CAAU3H,OAAQC,KAAKR,MAAMsP,iBAC3B,kBAACzG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,sFAMN,wBACEnJ,UAAU,mBAEV,0BACEI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMqP,gBAAgB1O,EAAG,UADhD,8BAMA,kBAACuH,EAAA,EAAD,CAAU3H,OAAQC,KAAKR,MAAMuP,gBAC3B,kBAAC1G,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kEACsC,2BAAIJ,mBAAmBlI,KAAKR,MAAMqD,UAAUmE,MAAM,OAExF,kBAAC,EAAD,CACER,iBAAkBxG,KAAKR,MAAMgH,iBAC7Bc,cAAetH,KAAKR,MAAM8H,cAC1BG,YAAazH,KAAKR,MAAMiI,YACxBD,eAAgBxH,KAAKR,MAAMwP,gBAC3BzH,SAAU,aAMpB,wBAAIpI,UAAU,kBAQzB,GAAmC,eAA/Ba,KAAKR,MAAMsO,gBAElB,IAAuC,IAAnC9N,KAAKR,MAAMuO,mBAA2B,CACxC,IAAIQ,EAAWvO,KAAKR,MAAMgP,SAC1BZ,EACE,6BACE,kBAAC,IAAD,CACEa,cAAeF,EACfG,SAAU,SAACC,GAAD,OAAW,EAAKnP,MAAMoP,gBAAgBD,KAEhD,kBAAC,IAAD,KACE,kBAAC,IAAD,0BACA,kBAAC,IAAD,uBAEF,kBAAC,IAAD,KACGhB,GAEH,kBAAC,IAAD,KACE,6BACE,wBAAItO,MAAM,wCACR,wBAAIF,UAAU,QACd,wBACEA,UAAU,mBAEV,0BACEI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMqP,gBAAgB1O,EAAG,WADhD,+BAMA,kBAACuH,EAAA,EAAD,CAAU3H,OAAQC,KAAKR,MAAMsP,iBAC3B,kBAACzG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,0EAGE,6BAAM,6BACLtI,KAAKiL,0BAKd,wBACE9L,UAAU,mBAEV,0BACEI,QAAS,SAACY,GAAD,OAAO,EAAKX,MAAMqP,gBAAgB1O,EAAG,UADhD,8BAMA,kBAACuH,EAAA,EAAD,CAAU3H,OAAQC,KAAKR,MAAMuP,gBAC3B,kBAAC1G,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kEACsC,2BAAIJ,mBAAmBlI,KAAKR,MAAMqD,UAAUmE,MAAM,OAExF,kBAAC,EAAD,CACER,iBAAkBxG,KAAKR,MAAMgH,iBAC7Bc,cAAetH,KAAKR,MAAM8H,cAC1BG,YAAazH,KAAKR,MAAMiI,YACxBD,eAAgBxH,KAAKR,MAAMwP,gBAC3BzH,SAAU,aAMpB,wBAAIpI,UAAU,kBAU1ByO,EAAaD,EAGjB,OACE,6BACE,6BACGE,GAEH,6BACGD,Q,GA/zBehO,aAy2B1B,SAASwN,EAAoBJ,GAE3B,IADA,IAAIM,EAAqB,GAChBrM,EAAI,EAAGA,EAAI+L,EAAezL,SAAUN,EAAG,CAC1CA,EAAI,IACNqM,GAAoB,QAGtBA,GADkD,WAA3BN,EAAe/L,GAAGZ,KAAoB,MAAQ2M,EAAe/L,GAAGX,MAAQ,MAAQ0M,EAAe/L,GAAGX,MAG3H,OAAOgN,EAMT,SAASzJ,EAAWwC,GAClB,OAAOA,EAAI/E,QAAQ,YAAa,IACrBA,QAAQ,KAAM,K,ICn1BZ2N,E,YApDb,WAAYzP,GAAQ,IAAD,8BACjB,4CAAMA,KACDN,MAAQ,GAFI,E,sEAKT,IAAD,OACHgQ,EAAU,KACVC,EAAgB,iCAEpB,GAA6B,KAAzBnP,KAAKR,MAAM4P,UAAkB,CAC/B,IAAIC,EACF,4BACElQ,UAJY,oCAKZI,QAAS,kBAAM,EAAKC,MAAM8P,mBAE1B,uBAAGjQ,MAAM,mBAAmBkQ,cAAY,SAJ1C,QAQGvP,KAAKR,MAAMgQ,aACdL,EAAgB,0BAChBE,EACE,6BACE,wBAAIlQ,UAAU,QACd,4BACEA,UAjBQ,oCAkBRI,QAAS,kBAAM,EAAKC,MAAM8P,mBAE1B,uBAAGjQ,MAAM,qBAAqBkQ,cAAY,SAJ5C,UAUNL,EACE,yBAAK/P,UAAU,yBACZkQ,EACD,yBAAKlQ,UAAWgQ,GACd,4BACEM,GAAG,SACHnQ,MAAM,UACNoQ,IAAK1P,KAAKR,MAAM4P,UAChBjQ,UAAU,iBAMpB,OAAO,6BAAM+P,O,GAjDOtP,a,iBCwiJT+P,E,YAthJb,WAAYnQ,GAAQ,IAAD,sBACjB,4CAAMA,IAIN,IAHA,IAAI6E,EAAY,GACZX,EAAc,GACdkM,EAAa,GACR3O,EAAI,EAAGA,EARE,KAQmBA,EAAG,CAEtC,IADA,IAAIuD,EAAU,GACLR,EAAI,EAAGA,EAXA,IAWqBA,EAInCQ,EAAQtD,KAAK,CAAEG,KAAM,GAAI0J,OAAQ,KAEnC1G,EAAUnD,KAAKsD,GAEjB,IAAK,IAAIR,EAAI,EAAGA,EAnBE,IAmBmBA,EAAG,CAEtC4L,EAAW1O,KADQ,IAEnBwC,EAAYxC,KAAK,IAlBF,OAoBjB,EAAKhC,MAAQ,CAEX2D,UAAW,GACXgN,YAAa,GACb/B,gBAAiB,GACjB0B,YAAY,EACZJ,UAAW,GACX3B,cAAe,KACfqC,WAAY,GACZC,UAAW,GACX9P,aAAa,EACbmI,oBAAoB,EACpBoG,SAAU,EACVM,iBAAiB,EACjBC,gBAAgB,EAGhB7J,YAAa,EAMbxB,YAAaA,EACbW,UAAWA,EACXuL,WAAYA,EACZI,iBAAkB,GAKlBC,mBAAoB,GAGpBtH,kBAAmB,GACnBC,gBAAiB,GACjBhE,gBAAgB,EAEhB8D,iBAAkB,EAClB5E,mBAAoB,GAGpB+F,kBAAmB,GACnBC,gBAAiB,GACjBC,mBAAoB,EAGpBvD,iBAAkB,GAClBc,cAAe,GACfyG,oBAAqB,EACrBmC,wBAAyB,GAGzBlK,iBAAkB,GAalByF,mBAAoB,GACpBjL,gBAAiB,WACjBC,YAAa,IAGbe,YAAY,EACZC,UAAU,EAEV0O,gBAAiB,EACjBhP,eAAgB,GAGhBiP,eAAe,EACfC,gBAAiB,EACjBC,cAAe,GACfvO,iBAAkB,GAClBM,eAAgB,GAChBL,iBAAkB,EAClBM,eAAgB,EAGhBiD,iBAAkB,EAIlBsF,aAAc,KAEdL,iBAAkB,GAElBD,oBAAqB,IAKvB,EAAK7H,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKsF,mBAAqB,EAAKA,mBAAmBtF,KAAxB,gBAC1B,EAAK4F,iBAAmB,EAAKA,iBAAiB5F,KAAtB,gBAGxB,EAAK4N,WAAa,EAAKA,WAAW5N,KAAhB,gBAClB,EAAK6N,gBAAkB,EAAKA,gBAAgB7N,KAArB,gBACvB,EAAK8N,cAAgB,EAAKA,cAAc9N,KAAnB,gBACrB,EAAKyC,gBAAkB,EAAKA,gBAAgBzC,KAArB,gBACvB,EAAK+N,oBAAsB,EAAKA,oBAAoB/N,KAAzB,gBAC3B,EAAK0G,kBAAoB,EAAKA,kBAAkB1G,KAAvB,gBACzB,EAAKgO,mBAAqB,EAAKA,mBAAmBhO,KAAxB,gBAE1B,EAAKuH,oBAAsB,EAAKA,oBAAoBvH,KAAzB,gBAC3B,EAAKiO,gBAAkB,EAAKA,gBAAgBjO,KAArB,gBACvB,EAAKkO,eAAiB,EAAKA,eAAelO,KAApB,gBACtB,EAAK6K,qBAAuB,EAAKA,qBAAqB7K,KAA1B,gBAC5B,EAAK4K,oBAAsB,EAAKA,oBAAoB5K,KAAzB,gBAG3B,EAAKqC,iBAAmB,EAAKA,iBAAiBrC,KAAtB,gBACxB,EAAK0C,oBAAsB,EAAKA,oBAAoB1C,KAAzB,gBAC3B,EAAKoC,iBAAmB,EAAKA,iBAAiBpC,KAAtB,gBACxB,EAAKoD,kBAAoB,EAAKA,kBAAkBpD,KAAvB,gBACzB,EAAKyL,kBAAoB,EAAKA,kBAAkBzL,KAAvB,gBACzB,EAAK2L,mBAAqB,EAAKA,mBAAmB3L,KAAxB,gBAC1B,EAAKsC,kBAAoB,EAAKA,kBAAkBtC,KAAvB,gBAGzB,EAAK8E,YAAc,EAAKA,YAAY9E,KAAjB,gBACnB,EAAKkK,yBAA2B,EAAKA,yBAAyBlK,KAA9B,gBAChC,EAAK2J,cAAgB,EAAKA,cAAc3J,KAAnB,gBACrB,EAAKmJ,iBAAmB,EAAKA,iBAAiBnJ,KAAtB,gBACxB,EAAKoJ,WAAa,EAAKA,WAAWpJ,KAAhB,gBAClB,EAAK4J,UAAY,EAAKA,UAAU5J,KAAf,gBACjB,EAAKmO,cAAgB,EAAKA,cAAcnO,KAAnB,gBACrB,EAAKvC,eAAiB,EAAKA,eAAeuC,KAApB,gBACtB,EAAKjC,kBAAoB,EAAKA,kBAAkBiC,KAAvB,gBAGzB,EAAKlD,UAAY,EAAKA,UAAUkD,KAAf,gBACjB,EAAK2M,eAAiB,EAAKA,eAAe3M,KAApB,gBACtB,EAAKhD,iBAAmB,EAAKA,iBAAiBgD,KAAtB,gBACxB,EAAKiM,gBAAkB,EAAKA,gBAAgBjM,KAArB,gBACvB,EAAKjD,UAAY,EAAKA,UAAUiD,KAAf,gBACjB,EAAK7B,WAAa,EAAKA,WAAW6B,KAAhB,gBAClB,EAAKwF,qBAAuB,EAAKA,qBAAqBxF,KAA1B,gBAC5B,EAAKkM,gBAAkB,EAAKA,gBAAgBlM,KAArB,gBAGvB,EAAK0L,WAAa,EAAKA,WAAW1L,KAAhB,gBAClB,EAAKf,aAAe,EAAKA,aAAae,KAAlB,gBACpB,EAAKvB,cAAgB,EAAKA,cAAcuB,KAAnB,gBACrB,EAAKjB,UAAY,EAAKA,UAAUiB,KAAf,gBACjB,EAAKhB,YAAc,EAAKA,YAAYgB,KAAjB,gBAGnB,EAAKqM,gBAAkB,EAAKA,gBAAgBrM,KAArB,gBACvB,EAAKH,WAAa,EAAKA,WAAWG,KAAhB,gBAClB,EAAKV,iBAAmB,EAAKA,iBAAiBU,KAAtB,gBACxB,EAAKJ,QAAU,EAAKA,QAAQI,KAAb,gBAGf,EAAK8G,qBAAuB,EAAKA,qBAAqB9G,KAA1B,gBAC5B,EAAKmC,gBAAkB,EAAKA,gBAAgBnC,KAArB,gBACvB,EAAKsL,cAAgB,EAAKA,cAActL,KAAnB,gBACrB,EAAK2G,mBAAqB,EAAKA,mBAAmB3G,KAAxB,gBAG1B,EAAKwH,qBAAuB,EAAKA,qBAAqBxH,KAA1B,gBAG5B,EAAKgI,qBAAuB,EAAKA,qBAAqBhI,KAA1B,gBAG5B,EAAKuK,uBAAyB,EAAKA,uBAAuBvK,KAA5B,gBAC9B,EAAK0I,qBAAuB,EAAKA,qBAAqB1I,KAA1B,gBAC5B,EAAK+K,uBAAyB,EAAKA,uBAAuB/K,KAA5B,gBArMb,E,4EA2MJE,GAAY,IAAD,OAKxB,GAJAkO,SAASC,KAAKC,UAAUC,IAAI,WAIvBrO,EAAUsO,SAAS,kCAMnB,CACH,IAAIC,EAAe,GACnBA,EAAalQ,KAAKmQ,EAAUxO,IAC5ByO,EAAgBF,GAAcG,MAAK,SAACC,GAMlC,IAJA,IAAIC,EAAWD,EAAO,GAElBhL,GADM,IAAIkL,WAAYC,gBAAgBF,EAAU,aACzBG,uBAAuB,aAC9CtK,EAAgB,GACXrG,EAAI,EAAGA,EAAIuF,EAAiBjF,SAAUN,EAC7CqG,EAAcpG,MAAK,GAIrB6P,SAASC,KAAKC,UAAUY,OAAO,WAW/B,EAAKrO,SAAS,CACZgD,iBAAkBA,EAClBc,cAAeA,EACfzE,UAAWA,EACXuM,UAAWvM,EACXiN,WAde,iBAefC,UAbA,CACE,UAAY,GACZ,UAAY,GACZ,iBAAmB,GACnB,cAAgB,cA3BtBgB,SAASC,KAAKC,UAAUY,OAAO,WAC/B9I,MAAM,0C,kCA4CR,IAAM+I,EAAWf,SAASgB,cAAc,YACpCC,EAAa,GAmBjB,GAAmC,iBAA/BhS,KAAKd,MAAM4O,iBAAqE,eAA/B9N,KAAKd,MAAM4O,gBAAkC,CAGhG,IADA,IAAIpK,EAAc1D,KAAKd,MAAMwE,YACpBzC,EAAI,EAAGA,EAAIyC,EAAYnC,SAAUN,EAAG,CAC3C,IAAI8C,EAAUL,EAAYzC,GAAG0C,MAE7B,QAAgBsO,IAAZlO,GAAyBL,EAAYzC,GAAGM,OAAS,EAAG,CACtDwC,EAAU,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAYzC,GAAGM,SAAUyC,EACvCA,EAAI,IAEJD,GADQ,IAAN9C,EACS,QAGA,QAGf8C,GAAWF,GAAWH,EAAYzC,GAAG+C,GAAGL,YAG5BsO,IAAZlO,GAAqC,KAAZA,IAC3BiO,EAAaA,EAAajO,EAAU,MAGxCiO,GAAc,KAKd,IAHA,IAAI3N,EAAYrE,KAAKd,MAAMmF,UACrBD,EAASC,EAAU9C,OACnB+C,EAASD,EAAU,GAAG9C,OACnBN,EAAI,EAAGA,EAAImD,IAAUnD,EAAG,CAC/B,IAAK,IAAI+C,EAAI,EAAGA,EAAIM,IAAUN,EAAG,CAC/B,IAAID,EAAUF,GAAWQ,EAAUpD,GAAG+C,GAAG3C,WACzB4Q,IAAZlO,GAAqC,KAAZA,IAC3BiO,EAAaA,EAAajO,EAAU,MAGxCiO,GAAc,MAGlBF,EAASxR,MAAQ0R,EACjBjB,SAASC,KAAKkB,YAAYJ,GAC1BA,EAASK,SACTpB,SAASqB,YAAY,QACrBrB,SAASC,KAAKqB,YAAYP,GAC1B/I,MAAM,oC,uCAMN,IAAIyG,EAAaxP,KAAKd,MAAMsQ,WAC5BxP,KAAKwD,SAAS,CACZgM,YAAaA,M,yCAMErP,EAAGmS,GAAe,IAAD,OAElC,GAAqB,iBAAjBA,EAAiC,CAGnCvB,SAASC,KAAKC,UAAUC,IAAI,WAG5B,IAAMrJ,EAAUK,mBAAmBlI,KAAKd,MAAM2D,UAAUmE,MAAM,KAC1D3C,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WACvCA,EAAU,GAAG,GAAGhD,KAAOwG,EAwBvByJ,EAFmB,CAACmB,EATpB,gFAIE,8CACAC,GAAa7K,GACb,yBAJA,sIAS4B0J,MAAK,SAACC,GAMlC,IAHA,IAAI7I,EA8mJZ,SAAiCgK,GAkE/B,IAzDA,IAAIC,EAAmBD,EAAeE,QACpC,SAAAC,GAAC,OAAIA,EAAEC,EAAEzS,MAAM0G,MAAM,IAAIzF,OAAS,IAE5BuR,EAAEC,EAAEzS,MAAM6Q,SAAS,aACjB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,aACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,wBAGpB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,aAClB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,aACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,YACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,cACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,QACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,SACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,mBACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,cACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,YACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,QACL,oCAAd2B,EAAEC,EAAEzS,OACU,mCAAdwS,EAAEC,EAAEzS,OACU,4CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,qCAAdwS,EAAEC,EAAEzS,OACU,uCAAdwS,EAAEC,EAAEzS,OACU,yCAAdwS,EAAEC,EAAEzS,OACU,yCAAdwS,EAAEC,EAAEzS,OACU,qCAAdwS,EAAEC,EAAEzS,OACU,wCAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,wCAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,wCAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,oCAAdwS,EAAEC,EAAEzS,OACU,2CAAdwS,EAAEC,EAAEzS,UASV0S,EAAW,GACXC,EAAY,GACPhS,EAAI,EAAGA,EAAI2R,EAAiBrR,SAAUN,EACT,qCAAhC2R,EAAiB3R,GAAG8R,EAAEzS,MACxB0S,EAAS9R,KAAK0R,EAAiB3R,IAG/BgS,EAAU/R,KAAK0R,EAAiB3R,IAMpC+R,EAASE,MAAK,SAACJ,EAAGK,GAAJ,OAAWL,EAAEM,EAAE9S,MAAM0G,MAAM,IAAMmM,EAAEC,EAAE9S,MAAM0G,MAAM,KAAO,EAAI,KAQ1EiM,EAAUC,MAAK,SAACJ,EAAGK,GAAJ,OAAWL,EAAEC,EAAEzS,MAAM0G,MAAM,IAAMmM,EAAEJ,EAAEzS,MAAM0G,MAAM,KAAO,EAAI,KACvEiM,EAAU1R,OAAS,IACrB0R,EAAU,GAAGF,EAAEM,MAAQC,GAAUL,EAAU,GAAGF,EAAEzS,MAAO2S,IAEzD,IAAK,IAAIhS,EAAI,EAAGA,EAAIgS,EAAU1R,SAAUN,EAAG,CACzC,IAAIsS,EAAgBN,EAAUhS,EAAE,GAC5BuS,EAAeP,EAAUhS,GACzBsS,EAAcR,EAAEzS,QAAUkT,EAAaT,EAAEzS,MAC3CkT,EAAaT,EAAEM,MAAQE,EAAcR,EAAEM,MAGvCG,EAAaT,EAAEM,MAAQC,GAAUL,EAAUhS,GAAG8R,EAAEzS,MAAO2S,GAK3DA,EAAUC,MAAK,SAAUJ,EAAGK,GAC1B,YAAqBlB,IAAjBa,EAAEM,EAAEK,eAA2CxB,IAAjBkB,EAAEC,EAAEK,UAC5B,OAEgBxB,IAAjBkB,EAAEC,EAAEK,eAA2CxB,IAAjBa,EAAEM,EAAEK,SAClC,EAGHX,EAAEC,EAAEM,QAAUF,EAAEJ,EAAEM,MACbP,EAAEC,EAAEzS,MAAM0G,MAAM,IAAMmM,EAAEJ,EAAEzS,MAAM0G,MAAM,KAAO,EAAI,EAGjD8L,EAAEC,EAAEM,MAAQF,EAAEJ,EAAEM,OAAS,EAAI,KAO1CT,EAAmBI,EAASU,OAAOT,GAiBnC,IAFA,IAAItK,EAAoB,GAEf1H,EAAI,EAAGA,EAAI2R,EAAiBrR,SAAUN,EAET,qCAAhC2R,EAAiB3R,GAAG8R,EAAEzS,MACxBqI,EAAkBzH,KAChB,CACE,OAAS,WACT,SAAW,MACX,OAAS0R,EAAiB3R,GAAGmS,EAAE9S,MAAM0G,MAAM,IAC3C,MAAQ,GACR,MAAQ,WACR,MAAQ4L,EAAiB3R,GAAGmS,EAAE9S,MAAM0G,MAAM,MAM9C2B,EAAkBzH,KAChB,CACE,OAAS0R,EAAiB3R,GAAG8R,EAAEzS,MAAM0G,MAAM,IAC3C,SAAW4L,EAAiB3R,GAAG8R,EAAEzS,MAAM6Q,SAAS,YAAc,MAAQ,MACtE,OAASwC,GAAaf,EAAiB3R,GAAGmS,EAAE9S,OAC5C,WAA2C2R,IAAnCW,EAAiB3R,GAAGmS,EAAEK,SAAyB,GAAKb,EAAiB3R,GAAGmS,EAAEK,SAClF,MAAQb,EAAiB3R,GAAG8R,EAAEzS,MAAM0G,MAAM,IAC1C,MAAQ4L,EAAiB3R,GAAG8R,EAAEzS,MAAM0G,MAAM,IAAI,IAAI2M,GAAaf,EAAiB3R,GAAGmS,EAAE9S,SAK7F,OAAOqI,EAnxJuBiL,CAAwBpC,EAAO,GAAGqC,QAAQC,UAC9DlL,EAAkB,GAEb3H,EAAI,EAAGA,EAAI0H,EAAkBpH,SAAUN,EAC9C2H,EAAgB1H,MAAK,GAMvB,IAMI6O,EACF,CACE,gBAAkB,EAAK7Q,MAAM4O,gBAC7B,UAAY,EAAK5O,MAAMmF,UACvB,SAAW,EAAKnF,MAAMsP,SACtB,cAAgB,EAAKtP,MAAMuO,cAC3B,kBAAoB,EAAKvO,MAAMyJ,kBAC/B,gBAAkB,EAAKzJ,MAAM0J,iBAIjCmI,SAASC,KAAKC,UAAUY,OAAO,WAE/B,EAAKrO,SAAS,CACZsK,gBAAiBwE,EACjBjO,UAAWA,EACXsE,kBAAmBA,EACnBC,gBAAiBA,EACjB6E,cAxBY,CACZ,KAAO,qBAwBPe,SAAU,EACVsB,WArBe,qBAsBfC,UAAWA,U,2CAUE5P,EAAGwO,GAItB,IAAI/F,EAAkB5I,KAAKd,MAAM0J,gBAAgB5B,QAG7C0B,EAAkBiG,EAGtB/F,EAAgB+F,IAAU/F,EAAgB+F,GAG1C3O,KAAKwD,SAAS,CACZoF,gBAAgBA,EAChBF,gBAAgBA,M,2CAQCvI,EAAG4T,EAAgBtQ,GAEtC,IAAI8B,EACAlB,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WACnCyF,EAAkByI,IAAEC,UAAUxS,KAAKd,MAAM4K,iBAGzCC,EAAoBgK,EACxBjK,EAAgBiK,IAAmBjK,EAAgBiK,GAOnD,IADA,IAAIjL,EAAqB,GAChB7H,EAAI,EAAGA,EAAI6I,EAAgBvI,SAAUN,GACjB,IAAvB6I,EAAgB7I,IAClB6H,EAAmB5H,KAAKlB,KAAKd,MAAM2K,kBAAkB5I,IAOzD,GAAI6H,EAAmBvH,OAAS,EAAG,CAEjC,IAAK,IAAIN,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EAAG,CAIzC,IAFA,IAAI+S,EAAiB,GAEZhQ,EAAI,EAAGA,EAAI8E,EAAmBvH,SAAUyC,EAAG,CAClD,IAAIwP,EAAe1K,EAAmB9E,GAGlCiQ,GADoB,YAAtBT,EAAanT,KAAqBL,KAAKd,MAAM+Q,mBAAmBpI,QAAU7H,KAAKd,MAAM+Q,mBAAmBvD,QAChEzL,GAAGuS,EAAalT,YACjC2R,IAArBgC,IACFD,EAAiBA,EAAeN,OAAOO,IAKb,IAA1BD,EAAezS,OACjB8C,EAAUpD,GAAGwC,GAAUiC,YAAc,MAIrCrB,EAAUpD,GAAGwC,GAAUiC,YAAcsO,EAAe,GAKxDzO,EAAkB9B,OAIlB8B,GAAmB,EAIrB,IACIwK,EACJ,CACEjG,gBAAiB9J,KAAKd,MAAM4K,gBAC5BoK,qBAAsBlU,KAAKd,MAAM6K,kBACjC1F,UAAWrE,KAAKd,MAAMmF,UACtBkB,gBAAiBvF,KAAKd,MAAMqG,iBAG9BvF,KAAKwD,SAAS,CACZsG,gBAAiBA,EACjBC,kBAAmBA,EACnB1F,UAAWA,EACXkB,gBAAiBA,EACjBuK,WAde,uBAefC,UAAWA,M,wCAMb/P,KAAKwD,SAAS,CACZiK,cAAc,CAAC,KAAO,eACtBe,SAAU,M,sCAYZ,IADA,IAAI2F,EAAyB,GACpBlT,EAAI,EAAGA,EAAIjB,KAAKd,MAAM0J,gBAAgBrH,SAAUN,EACvDkT,EAAuBjT,MAAK,GAY9BlB,KAAKwD,SAAS,CACZoF,gBAAgBuL,EAChBzL,iBAV4B,EAW5B+E,cARY,CACZ,KAAO,yB,iCAaAtN,EAAGc,EAAG+C,GACf7D,EAAEyC,iBACF,IAAIyB,EAAYrE,KAAKd,MAAMmF,UAAU2C,QACrC3C,EAAUpD,GAAG+C,GAAG3C,KAAOlB,EAAEiU,OAAO9T,MAChCN,KAAKwD,SAAS,CACZa,UAAWA,M,oCAODlE,EAAGsD,GAAW,IAAD,OACzB,GAAIA,IAAazD,KAAKd,MAAMgG,YAAa,CAIvC,IADA,IAAImP,EAAa,GACRpT,EAAI,EAAGA,EAAIjB,KAAKd,MAAMmF,UAAU9C,QACQ,KAA3CvB,KAAKd,MAAMmF,UAAUpD,GAAGwC,GAAUpC,OADWJ,EAI/CoT,EAAWnT,KAAKwR,GAAa1S,KAAKd,MAAMmF,UAAUpD,GAAGwC,GAAUpC,OAYnE,IAHA,IAEIiT,EAAY,mCACPrT,EAAI,EAAGA,EAAIoT,EAAW9S,SAAUN,EACvCqT,GACE,uBAAyBD,EAAWpT,GAAK,gDAE7C,IAEIsT,EARF,+EAQyBD,EADzB,mJAEElD,EAAe,GACnBA,EAAalQ,KAAKuR,EAAU8B,IAC5BjD,EAAgBF,GAAcG,MAAK,SAACC,GAKlC,IAJA,IAAIgD,EAAShD,EAAO,GAChBiD,EAAgB,GAGXxT,EAAI,EAAGA,EAAIuT,EAAOX,QAAQC,SAASvS,SAAUN,EAAG,CACvD,IAAIyT,EAAWF,EAAOX,QAAQC,SAAS7S,GAAG0T,QAAQrU,MAElD,GAAIoU,EAASvD,SAAS,kCAAmC,CACvD,IAAIyD,EAAU,GACVC,EAAYH,EAAS1N,MAAM,IAC/B4N,EAAO,MAAYC,EACnBD,EAAO,MAAYC,EACnBD,EAAO,QAAc,MACrBH,EAAcvT,KAAK0T,QAGhB,GAAIF,EAASvD,SAAS,2BAA6BuD,EAASvD,SAAS,YAAa,CACrF,IAAIyD,EAAU,GACVC,EAAYH,EAAS1N,MAAM,IAC/B4N,EAAO,MAAYC,EACnBD,EAAO,MAAYC,EACnBD,EAAO,QAAc,MACrBH,EAAcvT,KAAK0T,IAOvB,IAAIhF,EAAa,EAAK1Q,MAAM0Q,WAAW5I,QACvC4I,EAAW,EAAK1Q,MAAMgG,aAAeuP,EACrC,EAAKjR,SAAS,CACZoM,WAAYA,U,sCAcJzP,EAAGsD,GAWjB,IAX4B,IAAD,OAKvBoG,EAAoB,GAGpBiL,GAAW,EACXC,GAAY,EACZC,EAAe,GACV/T,EAAI,EAAGA,EAAIjB,KAAKd,MAAMmF,UAAU9C,SAAUN,EAEF,KAA3CjB,KAAKd,MAAMmF,UAAUpD,GAAGwC,GAAUpC,MACpCyT,GAAW,EACXE,EAAa9T,KAAK,CAACD,EAAGjB,KAAKd,MAAMmF,UAAUpD,GAAGwC,GAAUpC,QAIxD0T,GAAY,EAMhB,IAAiB,IAAbD,IAAoC,IAAdC,EAAqB,CAC7ChE,SAASC,KAAKC,UAAUC,IAAI,WAQ5B,IAPA,IAIIoD,EAAY,mCAGPrT,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAK1BqT,GACE,uBALkB5B,GAClB1S,KAAKd,MAAMmF,UAAU2Q,EAAa/T,GAAG,IAAIjB,KAAKd,MAAMgG,aAAa7D,MAMjE,qBAJsBqR,GAAasC,EAAa/T,GAAG,IAMnD,IAEJ,IAAIsT,EAlBF,+EAkByBD,EAhBzB,yJAiBElD,EAAe,GACnBA,EAAalQ,KAAKuR,EAAU8B,IAC5BjD,EAAgBF,GAAcG,MAAK,SAACC,GAIpC,IAHA,IAAIgD,EAAShD,EAAO,GAEhByD,EAAgB,GACXhU,EAAI,EAAGA,EAAIuT,EAAOX,QAAQC,SAASvS,SAAUN,EAAG,CACvD,IAAI2T,EAAU,GACVC,EAAYL,EAAOX,QAAQC,SAAS7S,GAAG0T,QAAQrU,MAAM0G,MAAM,IAC/D4N,EAAO,MAAYC,EACnBD,EAAO,MAAYC,EACnBD,EAAO,KAAW,UAClBK,EAAc/T,KAAK0T,GAKrB,IAAK,IAAI3T,EAAI,EAAGA,EAAIgU,EAAc1T,SAAUN,EAC1C,IAAK,IAAI+C,EAAI,EAAGA,EAAI,EAAK9E,MAAM8Q,iBAAiBzO,SAAUyC,EACxD,GAAIiR,EAAchU,GAAGX,QAAU,EAAKpB,MAAM8Q,iBAAiBhM,GAAG1D,OACvD2U,EAAchU,GAAGZ,OAAS,EAAKnB,MAAM8Q,iBAAiBhM,GAAG3D,KAAM,CACpEwJ,EAAkB3I,KAAK,EAAKhC,MAAM8Q,iBAAiBhM,IACnD,MAM2B,IAA7B6F,EAAkBtI,SACpBsI,EAAoB,EAAK3K,MAAM8Q,kBASjC,IADA,IAAIlG,EAAkB,GACb7I,EAAI,EAAGA,EAAI4I,EAAkBtI,SAAUN,EAC9C6I,EAAgB5I,MAAK,GAEvB,IAEI0T,EACF,CACE,KAAO,wBACP,SAAWnR,GAGfsN,SAASC,KAAKC,UAAUY,OAAO,WAC/B,EAAKrO,SAAS,CACZqG,kBAAkBA,EAClBC,gBAAgBA,EAChBC,mBAZuB,EAavB0D,cAAcmH,WAOb,CACH/K,EAAoB7J,KAAKd,MAAM8Q,iBAS/B,IADA,IAAIlG,EAAkB,GACb7I,EAAI,EAAGA,EAAI4I,EAAkBtI,SAAUN,EAC9C6I,EAAgB5I,MAAK,GAEvB,IAEI0T,EACF,CACE,KAAO,wBACP,SAAWnR,GAGfV,OAAOmS,SAAS,EAAG,GACnBlV,KAAKwD,SAAS,CACZqG,kBAAkBA,EAClBC,gBAAgBA,EAChBC,mBAZuB,EAavB0D,cAAcmH,O,sCAQJzU,EAAGsD,GAEjB,IAAIC,EAAc1D,KAAKd,MAAMwE,YAAYsD,QAEzC,GAAU,OAAN7G,EAAY,CAGd,IAAIgV,EAAkB5C,IAAEC,UAAUrS,GAKlC,GAHAuD,EAAYD,GAAY0R,EAGpB1R,IAAazD,KAAKd,MAAMgG,YAAa,CACvC,IAAI0P,EAAU,CACdA,KAAkB,qBAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB,GAE5B,IAAK,IAAI3T,EAAI,EAAGA,EAAIkU,EAAgB5T,SAAUN,EAC5C2T,EAAQ5H,eAAe9L,KAAKiU,EAAgBlU,IAG9CjB,KAAKwD,SAAS,CACZE,YAAaA,EACb+J,cAAemH,QAKd,CAIH,IADA,IAAIQ,EAAc,GACTnU,EAAI,EAAGA,EAAIyC,EAAY1D,KAAKd,MAAMgG,aAAa3D,SAAUN,EAAG,CAEnEmU,GADiBnU,EAAI,EAAI,IAAMyC,EAAY1D,KAAKd,MAAMgG,aAAajE,GAAG0C,MAAQD,EAAY1D,KAAKd,MAAMgG,aAAajE,GAAG0C,MAIvH,IAAK,IAAI1C,EAAI,EAAGA,EAAIkU,EAAgB5T,SAAUN,EAAG,CAC/C,IAAIoU,EAA6C,YAAlC3R,EAAYD,GAAUxC,GAAGZ,KAAqBqD,EAAYD,GAAUxC,GAAGX,MAAQ,MAAQoD,EAAYD,GAAUxC,GAAGX,MAAQ,MACvIoD,EAAYD,GAAUxC,GAAG0C,MAAQ0R,EAAW,KAAOD,EAKrD,IAAIR,EAAU,CACdA,KAAkB,uBAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB,GAE5B,IAAK,IAAI3T,EAAI,EAAGA,EAAIkU,EAAgB5T,SAAUN,EAC5C2T,EAAQ5H,eAAe9L,KAAKiU,EAAgBlU,IAK9CjB,KAAKwD,SAAS,CACZE,YAAaA,EACb+J,cAAemH,Q,0CAiGHvQ,EAAWhE,EAAMoD,GA4CnC,IALA,IAAI2N,EAAe,GAKVnQ,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EAAG,CACzC,IAAIqU,EAA4C,QAAhCjR,EAAUpD,GAAGwC,GAAUpC,KAAiB,oBAAsBqR,GAAarO,EAAUpD,GAAGwC,GAAUpC,MA0B9GkU,EAAa9C,EA9BjB,gFAOa,YAATpS,EAEA,wEACAiV,EACA,wIAUA,kFACAA,EACA,sNACAA,EACA,qGAvBJ,oIA6BAlE,EAAalQ,KAAKqU,GAEpB,OAAOnE,I,wCAUSjR,EAAGsD,EAAUuJ,GAAiB,IAAD,OAMzCuH,EAAWiB,GAAYxI,GAIV,UAAbuH,EACFxL,MAAM,sFAMNgI,SAASC,KAAKC,UAAUC,IAAI,WAI5BI,EAFmB,CAACmB,EAAU8B,KAEAhD,MAAK,SAACC,GAOlC,IAAI9N,EAAc6O,IAAEC,UAAU,EAAKtT,MAAMwE,aACzCA,EAAY,GAAKsJ,EAGjB,IAAIlJ,EAAqB,GACzBA,EAAmB5C,KAAK8L,GAGxB,IAAI3I,EAAYkO,IAAEC,UAAU,EAAKtT,MAAMmF,WAEE,IAArC,EAAKnF,MAAMwE,YAAY,GAAGnC,SAC5B8C,EAu7JV,SAA4BsO,EAAgBtO,EAAWX,EAAaD,GAElE,IAAIgS,EAAkBC,KAAK/U,IAAIgS,EAAepR,OAp+L1B,IAy+LpB,GAAI8C,EAAU9C,OAASkU,EACrBpR,EAAYA,EAAU2C,MAAM,EAAEyO,QAG3B,GAAIpR,EAAU9C,OAASkU,EAE1B,IADA,IAAIE,EAAYF,EAAkBpR,EAAU9C,OACnCN,EAAI,EAAGA,EAAI0U,IAAa1U,EAAG,CAElC,IADA,IAAIuD,EAAU,GACLR,EAAI,EAAGA,EAl/LA,IAk/LqBA,EACnCQ,EAAQtD,KAAK,CAAEG,KAAM,GAAI0J,OAAQ,KAEnC1G,EAAUnD,KAAKsD,GAUnB,IANA,IAAIJ,EAASC,EAAU9C,OAKnBqU,EAAkBxR,EACbnD,EAAI,EAAGA,EAAImD,GACkB,KAAhCC,EAAUpD,GAAGwC,GAAUpC,OADCJ,EAE1B2U,IAUJ,IAHA,IAAIC,EAAgBzR,EAASwR,EAGpB3U,EAAI,EAAGA,EAAI2U,IAAmB3U,EACrCoD,EAAUpD,EAAI4U,GAAepS,GAAUpC,KACrCsR,EAAe1R,GAAG0T,QAAQrU,MAAM0G,MAAM,IAI1C,IAAK,IAAI/F,EAAI,EAAGA,EAAImD,IAAUnD,EAAG,CAE/B,IAAI6U,EAAazR,EAAUpD,GAAGwC,GAAUpC,KACxCgD,EAAUpD,GAAGwC,GAAUsH,OAAO7J,KAAK4U,GAOrC,OAHAzR,EAAYkO,IAAEwD,OAAO1R,GAAW,SAAS2R,GAAI,OAAOA,EAAE,GAAG3U,QA5+JrC4U,CACVzE,EAAO,GAAGqC,QAAQC,SAClBzP,EACAX,EACAD,IAQJ,IAAIyS,EAAkB,EAAKxF,oBAAoBrM,EAAW,UAAWZ,GACjE0S,EAAkB,EAAKzF,oBAAoBrM,EAAW,SAAUZ,GACpE6N,EAAgB4E,GAAiB3E,MAAK,SAAC6E,GACvC9E,EAAgB6E,GAAiB5E,MAAK,SAAC8E,GAGrC,IAAIC,EAAoBC,GAAoBH,EAAWC,GACnDrG,EAAmBsG,EAAkBtG,iBACrCC,EAAqBqG,EAAkBrG,mBAGvC2E,EAAU,CACdA,KAAkB,sBAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB,EAAKvJ,qBAAqB2E,GAItD,IACID,EACF,CACE,YAAc,EAAK7Q,MAAMgG,YACzB,iBAAmB,EAAKhG,MAAM8Q,iBAC9B,mBAAqB,EAAK9Q,MAAM+Q,mBAChC,cAAgB,EAAK/Q,MAAMuO,cAC3B,UAAY,EAAKvO,MAAMmF,UACvB,YAAc,EAAKnF,MAAMwE,YACzB,eAAiB,EAAKxE,MAAM0F,eAC5B,mBAAqB,EAAK1F,MAAM4E,oBAGpCiN,SAASC,KAAKC,UAAUY,OAAO,WAE/B,EAAKrO,SAAS,CACZ0B,YAAazB,EACbuM,iBAAkBA,EAClBC,mBAAoBA,EAEpBxC,cAAemH,EACfvQ,UAAWA,EACXX,YAAaA,EACbkB,gBAAgB,EAChBd,mBAAoBA,EACpBgM,WAzBe,oBA0BfC,UAAWA,gB,yCAWF5P,EAAG6M,GAAiB,IAAD,OAEhCuH,EAAWiB,GAAYxI,GAGV,UAAbuH,EACFxL,MAAM,sFAINgI,SAASC,KAAKC,UAAUC,IAAI,WAI5BI,EAFmB,CAACmB,EAAU8B,KAEAhD,MAAK,SAACC,GAMlC,IAHA,IAAIgF,EAAad,KAAK/U,IAAI6Q,EAAO,GAAGqC,QAAQC,SAASvS,OA/nCvC,IAgoCV8C,EAAY,GAEPpD,EAAI,EAAGA,EAAIuV,IAAcvV,EAAG,CAEnC,IADA,IAAIuD,EAAU,GACLR,EAAI,EAAGA,EAAI,EAAK9E,MAAMwE,YAAYnC,SAAUyC,EACzC,IAANA,EACFQ,EAAQtD,KAAK,CACXG,KAAMmQ,EAAO,GAAGqC,QAAQC,SAAS7S,GAAG0T,QAAQrU,MAAM0G,MAAM,IACxD+D,OAAQ,CAACyG,EAAO,GAAGqC,QAAQC,SAAS7S,GAAG0T,QAAQrU,MAAM0G,MAAM,OAI7DxC,EAAQtD,KAAK,CAAEG,KAAM,GAAI0J,OAAQ,KAGrC1G,EAAUnD,KAAKsD,GAGjBH,EAAYkO,IAAEC,UAAU,EAAKtT,MAAMmF,WAAWqP,OAAOrP,GACrDA,EAAYkO,IAAEwD,OAAO1R,GAAW,SAAS2R,GAAI,OAAOA,EAAE,GAAG3U,QAIzD,IAAI6U,EAAkB,EAAKxF,oBAAoBrM,EAAW,UAAW,GACjE8R,EAAkB,EAAKzF,oBAAoBrM,EAAW,SAAU,GACpEiN,EAAgB4E,GAAiB3E,MAAK,SAAC6E,GACvC9E,EAAgB6E,GAAiB5E,MAAK,SAAC8E,GAGrC,IAAIC,EAAoBC,GAAoBH,EAAWC,GACnDrG,EAAmBsG,EAAkBtG,iBACrCC,EAAqBqG,EAAkBrG,mBAE3Cc,SAASC,KAAKC,UAAUY,OAAO,WAE/B,IAAI/N,EAAqByO,IAAEC,UAAU,EAAKtT,MAAM4E,oBAChDA,EAAmB5C,KAAK8L,GAGxB,IACI+C,EACF,CACE,UAAa,EAAK7Q,MAAMmF,UACxB,iBAAoB,EAAKnF,MAAM8Q,iBAC/B,mBAAsB,EAAK9Q,MAAM+Q,mBACjC,mBAAsB,EAAK/Q,MAAM4E,mBACjC,gBAAmB,EAAK5E,MAAMqG,iBAGlC,EAAK/B,SAAS,CACZa,UAAWA,EACX2L,iBAAkBA,EAClBC,mBAAoBA,EACpBnM,mBAAoBA,EACpB2J,cAAe,CAAC,KAAO,uBACvBlI,iBAAkB,EAClBuK,WAjBe,qBAkBfC,UAAWA,gB,yCAgEF8E,EAAWxU,GAM5B,IALA,IAAI+Q,EAAe,GAKVnQ,EAAI,EAAGA,EAAIjB,KAAKd,MAAMmF,UAAU9C,SAAUN,EAAG,CACpD,IAAIqU,EAAY5C,GACd1S,KAAKd,MAAMmF,UAAUpD,GAAGjB,KAAKd,MAAMgG,aAAa7D,MAGhC,QAAdiU,IACFA,EAAY,qBAEd,IAqBIC,EAAa9C,EAhCjB,gFAYa,YAATpS,EAEA,uDACAiV,EACA,aACA5C,GAAamC,GACb,YACAnC,GAAamC,GACb,wCAGA,sEACAnC,GAAamC,GACb,YACAnC,GAAamC,GACb,aACAS,EACA,oBA3BJ,oIA+BAlE,EAAalQ,KAAKqU,GAEpB,OAAOnE,I,0CA6CWjR,EAAGsD,EAAUuJ,GAS/B,IAJA,IAAI3I,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WAEnCoS,GAAc,EAETxV,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EAAG,CAIzC,IAFA,IAAI+S,EAAiB,GAEZhQ,EAAI,EAAGA,EAAIgJ,EAAezL,SAAUyC,EAAG,CAE9C,IAAIwP,EAAexG,EAAehJ,GAI9BiQ,GAFoB,YAAtBT,EAAanT,KAAqBL,KAAKd,MAAM+Q,mBAAmBpI,QAAU7H,KAAKd,MAAM+Q,mBAAmBvD,QAEhEzL,GAAGuS,EAAalT,YAGjC2R,IAArBgC,IACFD,EAAiBA,EAAeN,OAAOO,IAI3C,GAA8B,IAA1BD,EAAezS,OACjB8C,EAAUpD,GAAGwC,GAAUpC,KAAO,UAG3B,CAEHgD,EAAUpD,GAAGwC,GAAUpC,KAAO2S,EAAe,GAE7C,IAAI0C,EAActJ,GAAoBJ,GAAkB,IAAMgH,EAAe,GACzE2C,EAAYtS,EAAUpD,GAAGjB,KAAKd,MAAMgG,aAAa6F,OAAO/D,QAO5D,GANA2P,EAAUzV,KAAKwV,GACfrS,EAAUpD,GAAGwC,GAAUsH,OAAS4L,EAK5B3C,EAAezS,OAAS,EAAG,CAC7BkV,GAAc,EACd,IAAIG,EAAYlB,KAAK/U,IAAIqT,EAAezS,OA53CxB,IA63ChB8C,EAAUpD,GAAGwC,GAAUoT,UAAY7C,EAAehN,MAAM,EAAG4P,KAMjE,IAAIlT,EAAc6O,IAAEC,UAAUxS,KAAKd,MAAMwE,aACzCA,EAAYD,GAAYuJ,EAIxB,IAAIF,EAkzJR,SAA8BE,EAAgBgD,GAM5C,IAHA,IAAIlD,EAAiB,GAGZ7L,EAAI,EAAGA,EAAI+L,EAAezL,SAAUN,EAC3C6L,EAAiBA,EAAe4G,OAAO1G,EAAe/L,GAAG6V,qBAO3DhK,EAAiByF,IAAEwD,OAAOjJ,GAAgB,SAASkJ,GACjD,OAAOA,EAAE1V,OAAS0V,EAAE3V,MAAQ2V,EAAEe,YAGhCjK,EAAiByF,IAAEyE,aAAalK,EAAgBE,GAAgB,SAASgJ,GACvE,OAAOA,EAAE1V,OAAS0V,EAAE3V,QAQtB,IAAK,IAAIY,EAAI,EAAGA,EAAI6L,EAAevL,SAAUN,EAC3C,IAAK,IAAI+C,EAAI,EAAGA,EAAIgM,EAAiBzO,SAAUyC,EAC7C,GAAI8I,EAAe7L,GAAGX,QAAU0P,EAAiBhM,GAAG1D,OAASwM,EAAe7L,GAAGZ,OAAS2P,EAAiBhM,GAAG3D,KAAM,CAChHyM,EAAe7L,GAAf,MAA6B+O,EAAiBhM,GAAGL,MACjDmJ,EAAe7L,GAAf,cAAqC+O,EAAiBhM,GAAGiT,cACzD,MAUN,OALAnK,EAAeoG,MAAK,SAACJ,EAAGK,GAAJ,OAClBL,EAAEmE,cAAgB9D,EAAE8D,cAAgB,GAAK,KAIpCnK,EA51JgB1B,CAAqB4B,EAAgBhN,KAAKd,MAAM8Q,kBAIjE4E,EAAU,IAGM,IAAhB6B,GAAwB3J,EAAevL,OAAS,GAClDqT,EAAO,KAAW,iCAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB5H,EAC5B4H,EAAO,eAAqB9H,IAGL,IAAhB2J,GACP7B,EAAO,KAAW,wBAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB5H,GAGrBF,EAAevL,OAAS,GAC/BqT,EAAO,KAAW,yBAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB9H,GAI5B8H,EAAO,KAAW,sBAKpB,IACI7E,EACF,CACE,cAAgB/P,KAAKd,MAAMuO,cAC3B,UAAYzN,KAAKd,MAAMmF,UACvB,YAAcrE,KAAKd,MAAMwE,YACzB,gBAAkB1D,KAAKd,MAAMqG,iBAGjCvF,KAAKwD,SAAS,CACZiK,cAAemH,EACfvQ,UAAWA,EACXX,YAAaA,EACb6B,iBAAkB,EAClBuK,WAde,sBAefC,UAAWA,M,sCAmIbtM,EACAuJ,EACAkK,EACAhS,EACAxB,EACAW,EACAuL,EACAM,EACAiH,GAoBA,IAAM/S,EAASC,EAAU9C,OACnB+C,EAASD,EAAU,GAAG9C,OAIxB6V,EAAqBlS,EACrBzB,EAAWyB,IACbkS,GAAoBF,GAMtB,IADA,IAAIG,EAAmB,GACdpW,EAAI,EAAGA,EAAImD,IAAUnD,EAAG,CAE/B,IADA,IAAIuD,EAAU,GACLR,EAAI,EAAGA,EAAIP,EAAW,IAAKO,EAClCQ,EAAQtD,KAAKmD,EAAUpD,GAAG+C,IAG5B,IAAK,IAAIA,EAAI,EAAGA,EAAIkT,IAAWlT,EAC7BQ,EAAQtD,KAAK,CAAEG,KAAM,GAAI0J,OAAQ,KAEnC,IAAK,IAAIuM,EAAI7T,EAAW,EAAG6T,EAAIhT,IAAUgT,EACvC9S,EAAQtD,KAAKmD,EAAUpD,GAAGqW,IAE5BD,EAAiBnW,KAAKsD,GAOxB,IADA,IAKI+S,EALAC,EAAqB,GAChBxT,EAAI,EAAGA,EAAIP,EAAW,IAAKO,EAClCwT,EAAmBtW,KAAKwC,EAAYM,IAKtC,IAA2B,IAAvBmT,EACFI,EAAiB7T,EAAYD,OAG1B,CAGH,IADA,IAAI2R,EAAc,GACTnU,EAAI,EAAGA,EAAIyC,EAAYwB,GAAa3D,SAAUN,EAAG,CAExDmU,GADiBnU,EAAI,EAAI,IAAMyC,EAAYwB,GAAajE,GAAG0C,MAAQD,EAAYwB,GAAajE,GAAG0C,MAGjG,IAAI0R,EAAsC,YAA3BrI,EAAe,GAAG3M,KAAqB2M,EAAe,GAAG1M,MAAQ,MAAQ0M,EAAe,GAAG1M,MAAQ,MAClHiX,EAAiB,CACf,CACE,MAAUvK,EAAe,GAAG1M,MAC5B,MAAU+U,EAAW,KAAOD,EAC5B,KAAUpI,EAAe,GAAG3M,OAIlC,IAAK,IAAI2D,EAAI,EAAGA,EAAIkT,IAAWlT,EAC7BwT,EAAmBtW,KAAKqW,GAE1B,IAAK,IAAID,EAAI7T,EAAW,EAAG6T,EAAIhT,IAAUgT,EACvCE,EAAmBtW,KAAKwC,EAAY4T,IAOtC,IADA,IAAIG,EAAiC,GAC5BzT,EAAI,EAAGA,EAAIP,IAAYO,EAC9ByT,EAA+BvW,KAAKgP,EAAwBlM,IAE9D,IAAK,IAAIA,EAAI,EAAGA,EAAIkT,IAAWlT,EAC7ByT,EAA+BvW,KAAK,IAEtC,IAAK,IAAIoW,EAAI7T,EAAU6T,EAAIhT,EAAO,IAAKgT,EACrCG,EAA+BvW,KAAKgP,EAAwBoH,IAO9D,IADA,IAAII,EAAoB,GACf1T,EAAI,EAAGA,EAAIP,EAAW,IAAKO,EAClC0T,EAAkBxW,KAAK0O,EAAW5L,IAEpC,IAAK,IAAIA,EAAI,EAAGA,EAAIkT,IAAWlT,EAC7B0T,EAAkBxW,KAAK,IAEzB,IAAK,IAAIoW,EAAI7T,EAAW,EAAG6T,EAAIhT,IAAUgT,EACvCI,EAAkBxW,KAAK0O,EAAW0H,IAQpC,IAAK,IAAIrW,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EAAG,CAIzC,IAFA,IAAI+S,EAAiB,GAEZhQ,EAAI,EAAGA,EAAIgJ,EAAezL,SAAUyC,EAAG,CAE9C,IAAIwP,EAAexG,EAAehJ,GAG9BiQ,GADoB,YAAtBT,EAAanT,KAAqBL,KAAKd,MAAM+Q,mBAAmBpI,QAAU7H,KAAKd,MAAM+Q,mBAAmBvD,QAChEzL,GAAGuS,EAAalT,YAEjC2R,IAArBgC,IACFD,EAAiBA,EAAeN,OAAOO,IAI3C,IAAK,IAAI0D,EAASlU,EAAW,EAAGkU,EAASlU,EAAW,EAAIyT,IAAWS,EAAQ,CAEzE,IAAIC,GAAwC,IAAvBT,EAA8BQ,EAASlU,EAAWkU,EAASlU,EAAW,EAE3F,GAAIuQ,EAAezS,OAASqW,EAC1BP,EAAiBpW,GAAG0W,GAAQtW,KAAO,UAEhC,CAEH,IAAIf,EAAQ0T,EAAe4D,EAAiB,GAC5CP,EAAiBpW,GAAG0W,GAAQtW,KAAOf,EAEnC,IAAIoW,EAActJ,GAAoBJ,GAAkB,IAAM1M,EAC1DqW,EAAYU,EAAiBpW,GAAGmW,GAAoBrM,OAAO/D,QAC/D2P,EAAUzV,KAAKwV,GACfW,EAAiBpW,GAAG0W,GAAQ5M,OAAS4L,IAK3C,MAAO,CACLjT,YAAa8T,EACbnT,UAAWgT,EACXzH,WAAY8H,EACZxH,wBAAyBuH,EACzBvS,YAAakS,K,2CAQIjX,EAAEsD,EAASuJ,GAc9B,IAPA,IAAIqK,EAAmB,GACnBQ,EAAoB,GACpBC,EAAmB,GACnBzT,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WACnC4L,EAAqBsC,IAAEC,UAAUxS,KAAKd,MAAM+Q,oBAGvChP,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EAAG,CAEzC,IAAI8W,EAASxF,IAAEC,UAAUnO,EAAUpD,IAEnC,QAAmCgR,IAA/B8F,EAAOtU,GAAUoT,UACnBQ,EAAiBnW,KAAK6W,OAInB,CAEHV,EAAiBnW,KAAK6W,GAEtB,IAAK,IAAI/T,EAAI,EAAGA,EAAI+T,EAAOtU,GAAUoT,UAAUtV,SAAUyC,EAAG,CAC1D,IAAIgU,EAAWzF,IAAEC,UAAUuF,GAE3BC,EAASvU,GAAUpC,KAAO0W,EAAOtU,GAAUoT,UAAU7S,GAErD,IAAI0S,EAActJ,GAAoBJ,GAAkB,IAAM+K,EAAOtU,GAAUoT,UAAU7S,GACrF2S,EAAYtS,EAAUpD,GAAGjB,KAAKd,MAAMgG,aAAa6F,OAAO/D,QAC5D2P,EAAUzV,KAAKwV,GACfsB,EAASvU,GAAUsH,OAAS4L,SAErBqB,EAASvU,GAAUoT,UAC1BQ,EAAiBnW,KAAK8W,KAM5B,IAAK,IAAI/W,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EAAG,CAEzC,IAAI8W,EAASxF,IAAEC,UAAUnO,EAAUpD,IAGnC,QAAmCgR,IAA/B8F,EAAOtU,GAAUoT,UACnBgB,EAAkB3W,KAAK+O,EAAkB,QAAYhP,IACrD6W,EAAiB5W,KAAK+O,EAAkB,OAAWhP,SAInD,IAAK,IAAI+C,EAAI,EAAGA,EAAI,EAAI+T,EAAOtU,GAAUoT,UAAUtV,SAAUyC,EAC3D6T,EAAkB3W,KAAK+O,EAAkB,QAAYhP,IACrD6W,EAAiB5W,KAAK+O,EAAkB,OAAWhP,IAIzD,IAAIgX,EACF,CACE,QAAUJ,EACV,OAASC,GAQTlD,EAAU,GACVnH,EAAgB8E,IAAEC,UAAUxS,KAAKd,MAAMuO,eAGhB,mCAAvBA,EAAcO,MAChB4G,EAAO,KAAW,yBAClBA,EAAO,SAAenH,EAAchK,SACpCmR,EAAO,eAAqBnH,EAAcX,gBAGZ,mCAAvBW,EAAcO,MACrB4G,EAAO,KAAW,qBAClBA,EAAO,SAAenH,EAAchK,SACpCmR,EAAO,eAAqBnH,EAAcX,gBAI1C8H,EAAO,KAAW,sBAKpB,IACI7E,EACF,CACE,cAAgB/P,KAAKd,MAAMuO,cAC3B,UAAYzN,KAAKd,MAAMmF,UACvB,mBAAqBrE,KAAKd,MAAM+Q,oBAGpCjQ,KAAKwD,SAAS,CACZiK,cAAemH,EACfvQ,UAAWgT,EACXpH,mBAAoBgI,EACpBnI,WAZe,uBAafC,UAAWA,M,0CAMK5P,EAAGsD,EAAUuJ,GAQ/B,IAHA,IAAI3I,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WAG9BpD,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EAAG,CAIzC,IAFA,IAAI+S,EAAiB,GAEZhQ,EAAI,EAAGA,EAAIgJ,EAAezL,SAAUyC,EAAG,CAE9C,IAAIwP,EAAexG,EAAehJ,GAI9BiQ,GADoB,YAAtBT,EAAanT,KAAqBL,KAAKd,MAAM+Q,mBAAmBpI,QAAU7H,KAAKd,MAAM+Q,mBAAmBvD,QAChEzL,GAAGuS,EAAalT,YAGjC2R,IAArBgC,IAEFD,EAAiBA,EAAeN,OAAOO,IAK3C,GAA8B,IAA1BD,EAAezS,OACjB8C,EAAUpD,GAAGwC,GAAUpC,KAAO,UAG3B,CAGH,IADA,IAAI6W,EAAU,GACLZ,EAAI,EAAGA,EAAItD,EAAezS,SAAU+V,EAAG,CAE9CY,GADgBZ,EAAI,EAAI,IAAMtD,EAAesD,GAAKtD,EAAesD,GAKnEjT,EAAUpD,GAAGwC,GAAUpC,KAAO6W,EAE9B,IAAIxB,EAActJ,GAAoBJ,GAAkB,IAAMkL,EAC1DvB,EAAYtS,EAAUpD,GAAGjB,KAAKd,MAAMgG,aAAa6F,OAAO/D,QAC5D2P,EAAUzV,KAAKwV,GACfrS,EAAUpD,GAAGwC,GAAUsH,OAAS4L,GAMpC,IAAI/B,EAAU,GACVnH,EAAgB8E,IAAEC,UAAUxS,KAAKd,MAAMuO,eAGhB,mCAAvBA,EAAcO,MAChB4G,EAAO,KAAW,yBAClBA,EAAO,SAAenH,EAAchK,SACpCmR,EAAO,eAAqBnH,EAAcX,gBAGZ,mCAAvBW,EAAcO,MACrB4G,EAAO,KAAW,qBAClBA,EAAO,SAAenH,EAAchK,SACpCmR,EAAO,eAAqBnH,EAAcX,gBAI1C8H,EAAO,KAAW,sBAIpB,IACI7E,EACF,CACE,cAAgB/P,KAAKd,MAAMuO,cAC3B,UAAYzN,KAAKd,MAAMmF,WAG3BrE,KAAKwD,SAAS,CACZiK,cAAemH,EACfvQ,UAAWA,EACXyL,WAVe,sBAWfC,UAAWA,M,6CAKQ5P,EAAGsD,EAAUuJ,GAUlC,IALA,IAAM5I,EAASpE,KAAKd,MAAMmF,UAAU9C,OAC9B+C,EAAStE,KAAKd,MAAMmF,UAAU,GAAG9C,OAGnC8C,EAAY,GACPpD,EAAI,EAAGA,EAAImD,IAAUnD,EAAG,CAE/B,IADA,IAAIuD,EAAU,GACLR,EAAI,EAAGA,EAAIP,EAAW,IAAKO,EAClCQ,EAAQtD,KAAKlB,KAAKd,MAAMmF,UAAUpD,GAAG+C,IAGvCQ,EAAQtD,KAAK,CAAEG,KAAM,GAAI0J,OAAQ,KACjC,IAAK,IAAIuM,EAAI7T,EAAW,EAAG6T,EAAIhT,IAAUgT,EACvC9S,EAAQtD,KAAKlB,KAAKd,MAAMmF,UAAUpD,GAAGqW,IAEvCjT,EAAUnD,KAAKsD,GAMjB,IADA,IAAId,EAAc,GACTM,EAAI,EAAGA,EAAIP,EAAW,IAAKO,EAClCN,EAAYxC,KAAKlB,KAAKd,MAAMwE,YAAYM,IAE1CN,EAAYxC,KAAK,IACjB,IAAK,IAAIoW,EAAI7T,EAAW,EAAG6T,EAAIhT,IAAUgT,EACvC5T,EAAYxC,KAAKlB,KAAKd,MAAMwE,YAAY4T,IAM1C,IADA,IAAIpH,EAA0B,GACrBlM,EAAI,EAAGA,EAAIP,IAAYO,EAC9BkM,EAAwBhP,KAAKlB,KAAKd,MAAMgR,wBAAwBlM,IAElEkM,EAAwBhP,KAAK,IAC7B,IAAK,IAAIoW,EAAI7T,EAAU6T,EAAIhT,EAAO,IAAKgT,EACrCpH,EAAwBhP,KAAKlB,KAAKd,MAAMgR,wBAAwBoH,IAKlE,IAAIpS,EAAclF,KAAKd,MAAMgG,YACzBzB,EAAWyB,KACXA,IAQFzB,EAKF,IAFA,IAAIgT,GAAc,EAETxV,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EAAG,CAIzC,IAFA,IAAI+S,EAAiB,GAEZhQ,EAAI,EAAGA,EAAIgJ,EAAezL,SAAUyC,EAAG,CAE9C,IAAIwP,EAAexG,EAAehJ,GAI9BiQ,GAFoB,YAAtBT,EAAanT,KAAqBL,KAAKd,MAAM+Q,mBAAmBpI,QAAU7H,KAAKd,MAAM+Q,mBAAmBvD,QAEhEzL,GAAGuS,EAAalT,YAGjC2R,IAArBgC,IACFD,EAAiBA,EAAeN,OAAOO,IAI3C,GAA8B,IAA1BD,EAAezS,OACjB8C,EAAUpD,GAAGwC,GAAUpC,KAAO,UAG3B,CAEHgD,EAAUpD,GAAGwC,GAAUpC,KAAO2S,EAAe,GAE7C,IAAI0C,EAActJ,GAAoBJ,GAAkB,IAAMgH,EAAe,GACzE2C,EAAYtS,EAAUpD,GAAGiE,GAAa6F,OAAO/D,QAOjD,GANA2P,EAAUzV,KAAKwV,GACfrS,EAAUpD,GAAGwC,GAAUsH,OAAS4L,EAK5B3C,EAAezS,OAAS,EAAG,CAC7BkV,GAAc,EACd,IAAIG,EAAYlB,KAAK/U,IAAIqT,EAAezS,OArhExB,IAshEhB8C,EAAUpD,GAAGwC,GAAUoT,UAAY7C,EAAehN,MAAM,EAAG4P,KAMjElT,EAAYD,GAAYuJ,EAWxB,IALA,IAAIF,EAAiByF,IAAEC,UAAUxS,KAAKd,MAAMuO,cAAcX,gBACtDqL,EAAoBnL,EAAe,GACnCoL,GAAc,EAGTnX,EAAI,EAAGA,EAAI6L,EAAevL,SAAUN,EAC3C,GAAI6L,EAAe7L,GAAGX,QAAU6X,EAAkB7X,OAASwM,EAAe7L,GAAGZ,OAAS8X,EAAkB9X,KAAM,CAC5G+X,EAAanX,EACb,OASgB,IAAhBmX,GACFtL,EAAeuL,OAAOD,EAAY,GAIpC,IAAIxD,EAAU,IAEM,IAAhB6B,GAAwB3J,EAAevL,OAAS,GAClDqT,EAAO,KAAW,iCAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB5H,EAC5B4H,EAAO,eAAqB9H,IAEL,IAAhB2J,GAAyB3J,EAAevL,OAAS,GACxDqT,EAAO,KAAW,yBAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB9H,IAEL,IAAhB2J,GACP7B,EAAO,KAAW,wBAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB5H,GAG5B4H,EAAO,KAAW,sBAUpB,IACI7E,EACF,CACE,UAAa/P,KAAKd,MAAMmF,UACxB,YAAerE,KAAKd,MAAMwE,YAC1B,cAAiB1D,KAAKd,MAAMuO,cAC5B,YAAezN,KAAKd,MAAMgG,YAC1B,wBAA2BlF,KAAKd,MAAMgR,wBACtC,SAAYlQ,KAAKd,MAAMsP,SACvB,gBAAmBxO,KAAKd,MAAMqG,iBAGlCvF,KAAKwD,SAAS,CACZa,UAAWA,EACXX,YAAaA,EACbwM,wBAAyBA,EACzBhL,YAAaA,EACbuI,cAAemH,EACfpG,SAAU,EACVjJ,iBAAkB,EAClBwK,UAAWA,EACXD,WArBe,6B,2CA2BEE,GAGnB,IAFA,IAAIlD,EAAiB,GACjBwL,EAAe5C,KAAK/U,IAAI,EAAGqP,EAAiBzO,QACvCN,EAAI,EAAGA,EAAIqX,IAAgBrX,EAClC6L,EAAe5L,KAAK8O,EAAiB/O,IAEvC,OAAO6L,I,6CAKc3M,EAAGsD,EAAUuJ,GAWlC,IALA,IAAM5I,EAASpE,KAAKd,MAAMmF,UAAU9C,OAC9B+C,EAAStE,KAAKd,MAAMmF,UAAU,GAAG9C,OAGnC8C,EAAY,GACPpD,EAAI,EAAGA,EAAImD,IAAUnD,EAAG,CAE/B,IADA,IAAIuD,EAAU,GACLR,EAAI,EAAGA,EAAIP,EAAW,IAAKO,EAClCQ,EAAQtD,KAAKlB,KAAKd,MAAMmF,UAAUpD,GAAG+C,IAGvCQ,EAAQtD,KAAK,CAAEG,KAAM,GAAI0J,OAAQ,KACjC,IAAK,IAAIuM,EAAI7T,EAAW,EAAG6T,EAAIhT,IAAUgT,EACvC9S,EAAQtD,KAAKlB,KAAKd,MAAMmF,UAAUpD,GAAGqW,IAEvCjT,EAAUnD,KAAKsD,GAMjB,IADA,IAAId,EAAc,GACTM,EAAI,EAAGA,EAAIP,EAAW,IAAKO,EAClCN,EAAYxC,KAAKlB,KAAKd,MAAMwE,YAAYM,IAE1CN,EAAYxC,KAAK,IACjB,IAAK,IAAIoW,EAAI7T,EAAW,EAAG6T,EAAIhT,IAAUgT,EACvC5T,EAAYxC,KAAKlB,KAAKd,MAAMwE,YAAY4T,IAM1C,IADA,IAAIpH,EAA0B,GACrBlM,EAAI,EAAGA,EAAIP,IAAYO,EAC9BkM,EAAwBhP,KAAKlB,KAAKd,MAAMgR,wBAAwBlM,IAElEkM,EAAwBhP,KAAK,IAC7B,IAAK,IAAIoW,EAAI7T,EAAU6T,EAAIhT,EAAO,IAAKgT,EACrCpH,EAAwBhP,KAAKlB,KAAKd,MAAMgR,wBAAwBoH,IAKlE,IAAIpS,EAAclF,KAAKd,MAAMgG,YACzBzB,EAAWyB,KACXA,IAQFzB,EAKF,IAFA,IAAIgT,GAAc,EAETxV,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EAAG,CAIzC,IAFA,IAAI+S,EAAiB,GAEZhQ,EAAI,EAAGA,EAAIgJ,EAAezL,SAAUyC,EAAG,CAE9C,IAAIwP,EAAexG,EAAehJ,GAI9BiQ,GAFoB,YAAtBT,EAAanT,KAAqBL,KAAKd,MAAM+Q,mBAAmBpI,QAAU7H,KAAKd,MAAM+Q,mBAAmBvD,QAEhEzL,GAAGuS,EAAalT,YAGjC2R,IAArBgC,IACFD,EAAiBA,EAAeN,OAAOO,IAI3C,GAA8B,IAA1BD,EAAezS,OACjB8C,EAAUpD,GAAGwC,GAAUpC,KAAO,UAG3B,CAEHgD,EAAUpD,GAAGwC,GAAUpC,KAAO2S,EAAe,GAE7C,IAAI0C,EAActJ,GAAoBJ,GAAkB,IAAMgH,EAAe,GACzE2C,EAAYtS,EAAUpD,GAAGiE,GAAa6F,OAAO/D,QAOjD,GANA2P,EAAUzV,KAAKwV,GACfrS,EAAUpD,GAAGwC,GAAUsH,OAAS4L,EAK5B3C,EAAezS,OAAS,EAAG,CAC7BkV,GAAc,EACd,IAAIG,EAAYlB,KAAK/U,IAAIqT,EAAezS,OA9tExB,IA+tEhB8C,EAAUpD,GAAGwC,GAAUoT,UAAY7C,EAAehN,MAAM,EAAG4P,KAMjElT,EAAYD,GAAYuJ,EAWxB,IALA,IAAIF,EAAiByF,IAAEC,UAAUxS,KAAKd,MAAMuO,cAAcX,gBACtDqL,EAAoBnL,EAAe,GACnCoL,GAAc,EAGTnX,EAAI,EAAGA,EAAI6L,EAAevL,SAAUN,EAC3C,GAAI6L,EAAe7L,GAAGX,QAAU6X,EAAkB7X,OAASwM,EAAe7L,GAAGZ,OAAS8X,EAAkB9X,KAAM,CAC5G+X,EAAanX,EACb,OASgB,IAAhBmX,GACFtL,EAAeuL,OAAOD,EAAY,GAIpC,IAAIxD,EAAU,IAEM,IAAhB6B,GAAwB3J,EAAevL,OAAS,GAClDqT,EAAO,KAAW,iCAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB5H,EAC5B4H,EAAO,eAAqB9H,IAEL,IAAhB2J,GAAyB3J,EAAevL,OAAS,GACxDqT,EAAO,KAAW,qBAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB9H,IAEL,IAAhB2J,GACP7B,EAAO,KAAW,wBAClBA,EAAO,SAAenR,EACtBmR,EAAO,eAAqB5H,GAG5B4H,EAAO,KAAW,sBAUpB,IACI7E,EACF,CACE,UAAa/P,KAAKd,MAAMmF,UACxB,YAAerE,KAAKd,MAAMwE,YAC1B,cAAiB1D,KAAKd,MAAMuO,cAC5B,YAAezN,KAAKd,MAAMgG,YAC1B,wBAA2BlF,KAAKd,MAAMgR,wBACtC,SAAYlQ,KAAKd,MAAMsP,SACvB,gBAAmBxO,KAAKd,MAAMqG,iBAGlCvF,KAAKwD,SAAS,CACZa,UAAWA,EACXX,YAAaA,EACbwM,wBAAyBA,EACzBhL,YAAaA,EACbuI,cAAemH,EACfpG,SAAU,EACVjJ,iBAAkB,EAClBwK,UAAWA,EACXD,WArBe,6B,uCA4BF3P,EAAGsD,GAMlB,IALA,IAAMW,EAASpE,KAAKd,MAAMmF,UAAU9C,OAC9B+C,EAAStE,KAAKd,MAAMmF,UAAU,GAAG9C,OAGnC8C,EAAY,GACPpD,EAAI,EAAGA,EAAImD,IAAUnD,EAAG,CAE/B,IADA,IAAIuD,EAAU,GACLR,EAAI,EAAGA,EAAIP,EAAW,IAAKO,EAClCQ,EAAQtD,KAAKlB,KAAKd,MAAMmF,UAAUpD,GAAG+C,IAGvCQ,EAAQtD,KAAK,CAAEG,KAAM,GAAI0J,OAAQ,KACjC,IAAK,IAAIuM,EAAI7T,EAAW,EAAG6T,EAAIhT,IAAUgT,EACvC9S,EAAQtD,KAAKlB,KAAKd,MAAMmF,UAAUpD,GAAGqW,IAEvCjT,EAAUnD,KAAKsD,GAKjB,IADA,IAAId,EAAc,GACTM,EAAI,EAAGA,EAAIP,EAAW,IAAKO,EAClCN,EAAYxC,KAAKlB,KAAKd,MAAMwE,YAAYM,IAE1CN,EAAYxC,KAAK,IACjB,IAAK,IAAIoW,EAAI7T,EAAW,EAAG6T,EAAIhT,IAAUgT,EACvC5T,EAAYxC,KAAKlB,KAAKd,MAAMwE,YAAY4T,IAK1C,IADA,IAAIpH,EAA0B,GACrBlM,EAAI,EAAGA,EAAIP,IAAYO,EAC9BkM,EAAwBhP,KAAKlB,KAAKd,MAAMgR,wBAAwBlM,IAElEkM,EAAwBhP,KAAK,IAC7B,IAAK,IAAIoW,EAAI7T,EAAU6T,EAAIhT,EAAO,IAAKgT,EACrCpH,EAAwBhP,KAAKlB,KAAKd,MAAMgR,wBAAwBoH,IAIlE,IAAIpS,EAAclF,KAAKd,MAAMgG,YACzBzB,EAAWyB,KACXA,EAOJ,IACI6K,EACA,CACE,UAAa/P,KAAKd,MAAMmF,UACxB,YAAerE,KAAKd,MAAMwE,YAC1B,cAAiB1D,KAAKd,MAAMuO,cAC5B,YAAezN,KAAKd,MAAMgG,YAC1B,wBAA2BlF,KAAKd,MAAMgR,wBACtC,SAAYlQ,KAAKd,MAAMsP,SACvB,gBAAmBxO,KAAKd,MAAMqG,iBAGpCvF,KAAKwD,SAAS,CACZa,UAAWA,EACXX,YAAaA,EACb+J,cAAe,CAAC,KAAO,uBACvBvI,YAAaA,EACbgL,wBAAyBA,EACzB1B,SAAU,EACVjJ,iBAAkB,EAClBuK,WApBe,mBAqBfC,UAAWA,M,0CAOK5P,EAAGsD,GAIrB,GAAIA,IAAazD,KAAKd,MAAMgG,YAC1B6D,MAAM,yHAIH,GAAiB,IAAbtF,EACPsF,MAAM,uGAIH,CAQH,IANA,IAAI1E,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WACnCX,EAAc1D,KAAKd,MAAMwE,YAAYsD,QACrC4I,EAAa5P,KAAKd,MAAM0Q,WAAW5I,QACnCkJ,EAA0BlQ,KAAKd,MAAMgR,wBAAwBlJ,QAGxD/F,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EACtCoD,EAAUpD,GAAGoX,OAAO5U,EAAU,GAGhCC,EAAY2U,OAAO5U,EAAU,GAC7BmM,EAAWyI,OAAO5U,EAAU,GACxBA,EAAW,GACbyM,EAAwBmI,OAAO5U,EAAS,EAAG,GAG7C,IAAIyB,EAAclF,KAAKd,MAAMgG,YACzBzB,EAAWyB,KACXA,EAKJ,IAAIuG,EAAqB8G,IAAEC,UAAUxS,KAAKd,MAAMuM,oBAChD,GAA4B,IAAxBzL,KAAKd,MAAMsP,SACb,IAAK,IAAIvN,EAAI,EAAGA,EAAIwK,EAAmBlK,SAAUN,EAC/CwK,EAAmBxK,GAAGlB,QAAS,EAKnC,IACIgQ,EACA,CACE,UAAa/P,KAAKd,MAAMmF,UACxB,YAAerE,KAAKd,MAAMwE,YAC1B,wBAA2B1D,KAAKd,MAAMgR,wBACtC,YAAelQ,KAAKd,MAAMgG,YAC1B,gBAAmBlF,KAAKd,MAAMqG,gBAC9B,mBAAsBvF,KAAKd,MAAMuM,mBACjC,cAAiBzL,KAAKd,MAAMuO,eAGlCzN,KAAKwD,SAAS,CACZa,UAAWA,EACXX,YAAaA,EACbwM,wBAAyBA,EACzBhL,YAAaA,EACbK,iBAAkB,EAClBkG,mBAAoBA,EACpBgC,cAAe,CAAC,KAAO,uBACvBqC,WApBe,sBAqBfC,UAAWA,O,wCAQC5P,EAAGsD,EAAU8U,GAAQ,IAAD,OAEpCxH,SAASC,KAAKC,UAAUC,IAAI,WAK5B,IAJA,IAAI7M,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WAGnCmU,GAAa,EACRvX,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EAEtC,GAAoC,QAAhCoD,EAAUpD,GAAGwC,GAAUpC,MACrBoX,MAAMC,OAAOrU,EAAUpD,GAAGwC,GAAUpC,OAAQ,CAC9CmX,GAAa,EACb,MAMFA,EACFnU,EAAU6O,MAAK,SAAUJ,EAAGK,GAC1B,IAAIwF,EAAS7F,EAAErP,GAAUpC,KACrBuX,EAASzF,EAAE1P,GAAUpC,KAEzB,MAAe,QAAXsX,EACK,EAEW,QAAXC,GACC,EAIM,cAAVL,EACKG,OAAOC,GAAUD,OAAOE,GAGxBF,OAAOE,GAAUF,OAAOC,MAOrCtU,EAAU6O,MAAK,SAAUJ,EAAGK,GAC1B,IAAIwF,EAAS7F,EAAErP,GAAUpC,KACrBuX,EAASzF,EAAE1P,GAAUpC,KAEzB,MAAe,QAAXsX,EACK,EAEW,QAAXC,GACC,EAIM,cAAVL,EACKI,EAASC,GAAU,EAAI,EAGvBD,EAASC,EAAS,GAAK,KAiBtC,IAAI1C,EAAkBlW,KAAK0Q,oBAAoBrM,EAAW,UAAWrE,KAAKd,MAAMgG,aAC5EiR,EAAkBnW,KAAK0Q,oBAAoBrM,EAAW,SAAUrE,KAAKd,MAAMgG,aAC/EoM,EAAgB4E,GAAiB3E,MAAK,SAAC6E,GACvC9E,EAAgB6E,GAAiB5E,MAAK,SAAC8E,GAGrC,IACIpG,EADoBsG,GAAoBH,EAAWC,GACZpG,mBAE3Cc,SAASC,KAAKC,UAAUY,OAAO,WAG/B,IACI9B,EACA,CACE,UAAa,EAAK7Q,MAAMmF,UACxB,mBAAsB,EAAKnF,MAAM+Q,mBACjC,gBAAmB,EAAK/Q,MAAMqG,iBAGpC,EAAK/B,SAAS,CACZa,UAAWA,EACX4L,mBAAoBA,EACpB1K,iBAAkB,EAClBuK,WAZe,oBAafC,UAAWA,Y,yCASE5P,EAAGsD,GAAW,IAAD,OAC9BsN,SAASC,KAAKC,UAAUC,IAAI,WAC5B,IAAI7M,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WAKvCA,EAAYkO,IAAEwD,OAAO1R,GAAW,SAAS2R,GAAI,OAAOA,EAAEvS,GAAUpC,QAOhE,IAAI6U,EAAkBlW,KAAK0Q,oBAAoBrM,EAAW,UAAWrE,KAAKd,MAAMgG,aAC5EiR,EAAkBnW,KAAK0Q,oBAAoBrM,EAAW,SAAUrE,KAAKd,MAAMgG,aAC/EoM,EAAgB4E,GAAiB3E,MAAK,SAAC6E,GACvC9E,EAAgB6E,GAAiB5E,MAAK,SAAC8E,GAGrC,IAAIC,EAAoBC,GAAoBH,EAAWC,GACnDrG,EAAmBsG,EAAkBtG,iBACrCC,EAAqBqG,EAAkBrG,mBAE3Cc,SAASC,KAAKC,UAAUY,OAAO,WAG/B,IACI9B,EACF,CACE,UAAa,EAAK7Q,MAAMmF,UACxB,iBAAoB,EAAKnF,MAAM8Q,iBAC/B,mBAAsB,EAAK9Q,MAAM+Q,mBACjC,cAAiB,EAAK/Q,MAAMuO,cAC5B,SAAY,EAAKvO,MAAMsP,SACvB,gBAAmB,EAAKtP,MAAMqG,iBAGlC,EAAK/B,SAAS,CACZa,UAAWA,EACX2L,iBAAkBA,EAClBC,mBAAoBA,EACpBxC,cAAe,CAAC,KAAO,uBACvBe,SAAU,EACVjJ,iBAAkB,EAClBuK,WAlBe,qBAmBfC,UAAWA,Y,wCAaC5P,EAAGsD,GAInB,IAAImR,EAAU,CACdA,KAAkB,qBAClBA,EAAO,SAAenR,EAEtBzD,KAAKwD,SAAS,CACZiK,cAAemH,EACfpG,SAAU,M,uCAMGrO,EAAGsD,GAMlB,IAN6B,IAAD,OAKxBqR,GAAW,EACN7T,EAAI,EAAGA,EAAIjB,KAAKd,MAAMmF,UAAU9C,SAAUN,EACjD,GAA+C,KAA3CjB,KAAKd,MAAMmF,UAAUpD,GAAGwC,GAAUpC,KAAa,CACjDyT,GAAW,EACX,MAKJ,IAAiB,IAAbA,EACF/L,MAAM,gHAEH,CACHgI,SAASC,KAAKC,UAAUC,IAAI,WAI5B,IAAI7M,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WAInC6R,EAAkBlW,KAAK0Q,oBAAoBrM,EAAW,UAAWZ,GACjE0S,EAAkBnW,KAAK0Q,oBAAoBrM,EAAW,SAAUZ,GAEpE6N,EAAgB4E,GAAiB3E,MAAK,SAAC6E,GACvC9E,EAAgB6E,GAAiB5E,MAAK,SAAC8E,GAGrC,IAAIC,EAAoBC,GAAoBH,EAAWC,GACnDrG,EAAmBsG,EAAkBtG,iBACrCC,EAAqBqG,EAAkBrG,mBAE3Cc,SAASC,KAAKC,UAAUY,OAAO,WAG/B,IACI9B,EACA,CACE,YAAe,EAAK7Q,MAAMgG,YAC1B,iBAAoB,EAAKhG,MAAM8Q,iBAC/B,mBAAsB,EAAK9Q,MAAM+Q,mBACjC,cAAiB,EAAK/Q,MAAMuO,cAC5B,SAAY,EAAKvO,MAAMsP,SACvB,gBAAmB,EAAKtP,MAAMqG,iBAGpC,EAAK/B,SAAS,CACZ0B,YAAazB,EACbuM,iBAAkBA,EAClBC,mBAAoBA,EACpBxC,cAAe,CAAC,KAAO,uBACvBe,SAAU,EACVjJ,iBAAkB,EAClBuK,WAlBe,mBAmBfC,UAAWA,a,wCA8CD5P,EAAG0Y,EAAUpV,GAAW,IAAD,OACvCsN,SAASC,KAAKC,UAAUC,IAAI,WAS5B,IAAIE,EAAe,GAkBf0H,EAAyBrG,EAR3B,gFAIA,kDACAC,GAAa1S,KAAKd,MAAMmF,UAAUwU,GAAUpV,GAAUpC,MACtD,6BAJA,oIAOF+P,EAAalQ,KAAK4X,GASlB,IASIC,EAAwBtG,EAR1B,gFAIA,gEACAC,GAAa1S,KAAKd,MAAMmF,UAAUwU,GAAUpV,GAAUpC,MACtD,eAJA,oIAOF+P,EAAalQ,KAAK6X,GAElBzH,EAAgBF,GAAcG,MAAK,SAACC,GAoBlC,IAhBA,IAAIwH,EACFC,GACEzH,EAAO,GAAGqC,QAAQC,SAClB,WAEAoF,EACFD,GACEzH,EAAO,GAAGqC,QAAQC,SAClB,UAMAtJ,EAAmBwO,EAAiBtF,OAAOwF,GAC3C3O,EAAsB,GACjBtJ,EAAI,EAAGA,EAAIuJ,EAAiBjJ,SAAUN,EAC7CsJ,EAAoBrJ,MAAK,GAE3B,IAAI2J,EAAe0H,IAAEC,UAAU,EAAKtT,MAAMmF,UAAUwU,GAAUpV,IAC1D2L,EAAY,iCAAmC,EAAKlQ,MAAMmF,UAAUwU,GAAUpV,GAAUpC,KAExFuT,EAAU,CACdA,KAAkB,qBAuBlB7D,SAASC,KAAKC,UAAUY,OAAO,WAC/B,IACI9B,EACA,CACE,cAAiB,EAAK7Q,MAAMuO,cAC5B,SAAY,EAAKvO,MAAMsP,SACvB,WAAc,EAAKtP,MAAMsQ,WACzB,UAAa,EAAKtQ,MAAMkQ,UACxB,iBAAoB,EAAKlQ,MAAMsL,iBAC/B,oBAAuB,EAAKtL,MAAMqL,oBAClC,aAAgB,EAAKrL,MAAM2L,aAC3B,gBAAmB,EAAK3L,MAAMqG,iBAGpC,EAAK/B,SAAS,CACZiK,cAAemH,EACfpG,SAAU,EACVjJ,iBAAkB,EAClBiK,YAAY,EACZJ,UAAWA,EACX5E,iBAAkBA,EAClBD,oBAAqBA,EACrBM,aAAcA,EACdiF,WAtBe,oBAuBfC,UAAWA,S,kCAKL5P,EAAGwO,GACb,IAAIrH,EAAgBtH,KAAKd,MAAMoI,cAAcN,QAC7CM,EAAcqH,IAAUrH,EAAcqH,GAEtC,IAAK,IAAI1N,EAAI,EAAGA,EAAIqG,EAAc/F,SAAUN,EACtCA,IAAM0N,IACRrH,EAAcrG,IAAK,GAGvBjB,KAAKwD,SAAS,CACZ8D,cAAeA,M,qCAmBJtB,EAAkBkK,GAc/B,IADA,IAAIhL,GAAe,EACVjE,EAAE,EAAEA,EAAEiP,EAAwB3O,SAASN,EAC9C,GAAIiP,EAAwBjP,GAAGM,OAAS,IACO,IAAtC2O,EAAwBjP,GAAGM,QAAkD,WAAlC2O,EAAwBjP,GAAG,MAChC,IAAtCiP,EAAwBjP,GAAGM,QAAkD,cAAlC2O,EAAwBjP,GAAG,IAC3E,CACFiE,EAAcjE,EAAE,EAChB,OAGiB,IAAjBiE,IACFA,EAAc,GAQhB,IADA,IAAIxB,EAAc,GACTM,EAAE,EAAEA,EAAEgC,EAAiB,GAAGzE,SAASyC,EAC1CN,EAAYxC,KACV,CACE,CAAC,MAAQ8E,EAAiB,GAAGhC,GAAG3C,KAC/B,MAAQ2E,EAAiB,GAAGhC,GAAG3C,QAWtC,IAHA,IAAIgD,EAAY,GAGPpD,EAAE,EAAEA,EAAE+E,EAAiBzE,SAASN,EAAG,CAG1C,IAFA,IAAIuD,EAAU,GAELR,EAAE,EAAEA,EAAEgC,EAAiB/E,GAAGM,SAASyC,EAAG,CAE7C,IAAI3C,EAAO2E,EAAiB/E,GAAG+C,GAAG3C,KAE9B0J,EAAS,GACToO,EAAanT,EAAiB/E,GAAG+C,GAAG+G,OAAO,KAAKrH,EAAYM,GAAG,GAAG1D,MAAM,KAAK0F,EAAiB/E,GAAG+C,GAAG3C,KACxG0J,EAAO7J,KAAKiY,GACZ3U,EAAQtD,KAAK,CAAC,KAAOG,EAAK,OAAS0J,IAErC1G,EAAUnD,KAAKsD,GAQjB,IAAI0R,EAAkBlW,KAAK0Q,oBAAoBrM,EAAW,UAAWa,GACjEiR,EAAkBnW,KAAK0Q,oBAAoBrM,EAAW,SAAUa,GACpE,OAAOoM,EAAgB4E,GAAiB3E,MAAK,SAAC6E,GAC9C,OAAO9E,EAAgB6E,GAAiB5E,MAAK,SAAC8E,GAG5C,IAAIC,EAAoBC,GAAoBH,EAAWC,GACnDrG,EAAmBsG,EAAkBtG,iBACrCC,EAAqBqG,EAAkBrG,mBAE3C,OAAOmJ,QAAQC,QACb,CACE,YAAcnU,EACd,YAAcxB,EACd,UAAYW,EACZ,iBAAmB2L,EACnB,mBAAqBC,Y,uCASZ9P,EAAGmZ,GAAa,IAAD,OAC9BvI,SAASC,KAAKC,UAAUC,IAAI,WAQ5B,IAAIqI,EAAe,GAUfC,EAAW/G,EARb,gFAIA,oDACAgH,GAAWzZ,KAAKd,MAAM2D,UAAUmE,MAAM,KACtC,+OAJA,oIAOFuS,EAAarY,KAAKsY,GAGlB,IAUIE,EAAWjH,EATb,gFAIA,+CACAgH,GAAWzZ,KAAKd,MAAM2D,UAAUmE,MAAM,KACtC,iCAJA,oIAQFuS,EAAarY,KAAKwY,GAGlBH,EAAarY,KACXyY,GAAoB3Z,KAAKd,MAAMsH,iBAAiB8S,KAIlDhI,EAAgBiI,GAAchI,MAAK,SAACqI,GAIlC,IAAI1J,EAA0B0J,EAAa,GAC3C5P,QAAQC,IAAIiG,GAMZ,IAAI2J,EAAuB,GACvBzI,EAAe,GACf0I,EAAe,GAGnBA,EAAeF,EAAa,GAAG/F,QAAQC,SACvC,IAAK,IAAI7S,EAAI,EAAGA,EAAI6Y,EAAavY,SAAUN,EAAG,CAC5C,IAAIwL,EAAYqN,EAAa7Y,GAAG8R,EAAEzS,MAAM0G,MAAM,IAE1C0F,EAASoN,EAAa7Y,GAAGmS,EAAE9S,MAAM0G,MAAM,IAGvC0F,EAAOyE,SAAS,OAClBzE,EAAS,eAEX,IAWI6I,EAAa9C,EAVf,gFAIA,kDACAC,GAAajG,GACb,UACAiG,GAAahG,GACb,oBANA,oIASFmN,EAAqB3Y,KAAK,CAAEuL,UAAWA,EAAWC,OAAQA,IAC1D0E,EAAalQ,KAAKqU,GAIpBuE,EAAeF,EAAa,GAAG/F,QAAQC,SACvC,IAAK,IAAI7S,EAAI,EAAGA,EAAI6Y,EAAavY,SAAUN,EAAG,CAC5C,IAAIyL,EAASoN,EAAa7Y,GAAGmS,EAAE9S,MAAM0G,MAAM,IAUvCuO,EAAa9C,EARf,gFAIA,kEACAC,GAAahG,GACb,cAJA,oIAOFmN,EAAqB3Y,KAAK,CAAEuL,UAAW,UAAWC,OAAQA,IAC1D0E,EAAalQ,KAAKqU,GAKpBjE,EAAgBF,GAAcG,MAAK,SAACC,GAIlC,IAHA,IAAI/F,EAAqB,GACrBsO,EAAY7R,mBAAmB,EAAKhJ,MAAM2D,UAAUmE,MAAM,KAErD/F,EAAI,EAAGA,EAAIuQ,EAAOjQ,SAAUN,EAAG,CACtC,IAAI+Y,EAAkBxI,EAAOvQ,GAAG4S,QAAQC,SAExC,GAAIkG,EAAgBzY,OAAS,GAAKyY,EAAgBzY,OAAS,IAAK,CAE9D,IADA,IAAImK,EAAe,GACVzK,EAAI,EAAGA,EAAI+Y,EAAgBzY,SAAUN,EAAG,CAC/C,IAAIgZ,EAAcD,EAAgB/Y,GAAGiZ,EAAE5Z,MAAM0G,MAAM,IACnD0E,EAAaxK,KAAK,CAChBnB,QAAQ,EACRqM,KAAM6N,EACNzO,WAAY,KAIhBC,EAAmBvK,KAAK,CACtBuL,UAAWoN,EAAqB5Y,GAAGwL,UACnCC,OAAQmN,EAAqB5Y,GAAGyL,OAChC3M,QAAQ,EACR2L,aAAcA,KAKpBD,EAAmByH,MAAK,SAACJ,EAAGK,GAAJ,OACtBL,EAAEpH,aAAanK,OAAS4R,EAAEzH,aAAanK,OAAS,GAAK,KAGvD,IAEIyE,EAAmBmU,GAFC,EAAKjb,MAAMsH,iBAAiB8S,GAEOS,GAO3DzI,EADmB,CAAC,EAAKT,eAAe7K,EAAkBkK,KAC5BqB,MAAK,SAACC,GAClC,IAAI4I,EAAY5I,EAAO,GAInBoD,EAAU,CACdA,KAAkB,sBAClBA,EAAO,SAAewF,EAAUlV,YAChC0P,EAAO,eAAqB,EAAKvJ,qBAAqB+O,EAAUpK,kBAEhEe,SAASC,KAAKC,UAAUY,OAAO,WAE/B,IACI9B,EACA,CACE,eAAkB,EAAK7Q,MAAM0F,eAC7B,mBAAsB,EAAK1F,MAAM6O,mBACjC,mBAAsB,EAAK7O,MAAMuM,mBACjC,cAAiB,EAAKvM,MAAMuO,cAC5B,wBAA2B,EAAKvO,MAAMgR,wBACtC,YAAe,EAAKhR,MAAMgG,YAC1B,iBAAoB,EAAKhG,MAAM8Q,iBAC/B,mBAAsB,EAAK9Q,MAAM+Q,mBACjC,UAAa,EAAK/Q,MAAMmF,UACxB,YAAe,EAAKnF,MAAMwE,YAC1B,gBAAmB,EAAKxE,MAAM4O,gBAC9B,SAAY,EAAK5O,MAAMsP,UAG7B,EAAKhL,SAAS,CACZoB,gBAAgB,EAChBmJ,mBAAoBuL,EACpB7N,mBAAoBA,EAEpBgC,cAAemH,EACf1E,wBAAyBA,EACzBhL,YAAakV,EAAUlV,YACvB8K,iBAAkBoK,EAAUpK,iBAC5BC,mBAAoBmK,EAAUnK,mBAC9B5L,UAAW+V,EAAU/V,UACrBX,YAAa0W,EAAU1W,YACvBoK,gBAAiB,aACjBU,SAAU,EACVsB,WA/Be,mBAgCfC,UAAWA,e,+CAOI5P,EAAGwO,GAAQ,IAAD,OACjCoC,SAASC,KAAKC,UAAUC,IAAI,WAG5B,IAAIzF,EAAqBzL,KAAKd,MAAMuM,mBAAmBzE,QAIvD,GAHAyE,EAAmBkD,GAAO5O,QAAU0L,EAAmBkD,GAAO5O,QAGrB,IAArC0L,EAAmBkD,GAAO5O,OAAiB,CAK7C,IAJA,IAAI+Z,EAAerO,EAAmBkD,GAAOjD,aACzCA,EAAe,GACf2O,EAAmB,GACnBjJ,EAAe,GACVnQ,EAAI,EAAGA,EAAI6Y,EAAavY,SAAUN,EAAG,CAC5C,IAAIgZ,EAAcH,EAAa7Y,GAAGmL,KAE9BmJ,EAAalE,EADA,iCAAmC4I,GAEpD7I,EAAalQ,KAAKqU,GAClB8E,EAAiBnZ,KAAK+Y,GAIxB3I,EAAgBF,GAAcG,MAAK,SAACC,GAGlC,IADA,IAAI8I,EAAoB,GACfrZ,EAAI,EAAGA,EAAIuQ,EAAOjQ,SAAUN,EAAG,CACtC,IAAIsZ,EAAW/I,EAAOvQ,GAItBqZ,EAAkBpZ,KAChBsZ,GACE,EAAKtb,MAAMwE,YACX6W,EACA,EAAKrb,MAAMgR,wBACX,EAAKhR,MAAMsB,gBACX,EAAKtB,MAAMuB,YACX4Z,EAAiBpZ,KASvBqQ,EAAgBgJ,GAAmB/I,MAAK,SAACkJ,GACvC,IAAK,IAAIxZ,EAAI,EAAGA,EAAIwZ,EAAiBlZ,SAAUN,EAC7CyK,EAAaxK,KAAK,CAChBnB,QAAQ,EACRqM,KAAMiO,EAAiBpZ,GACvBuK,WAAYiP,EAAiBxZ,KAIjCyK,EAAawH,MAAK,SAAUJ,EAAGK,GAC7B,IAAIuH,EAAe5H,EAAEtH,WAAWjK,OAC5BoZ,EAAexH,EAAE3H,WAAWjK,OAC5BqZ,EAAQ9H,EAAE1G,KACVyO,EAAQ1H,EAAE/G,KACd,OAAIsO,IAAiBC,EACZC,EAAQC,GAAS,EAAID,EAAQC,EAAQ,EAAI,EAEzCH,EAAeC,GAAgB,EAAI,KAG9ClP,EAAmBkD,GAAOjD,aAAeA,EACzCqF,SAASC,KAAKC,UAAUY,OAAO,WAC/B,EAAKrO,SAAS,CACZiI,mBAAoBA,eAK1BsF,SAASC,KAAKC,UAAUY,OAAO,WAC/B7R,KAAKwD,SAAS,CACZiI,mBAAoBA,M,oCAOZtL,EAAGmL,EAAYC,GAQ3B,IAAIE,EAAqBzL,KAAKd,MAAMuM,mBAAmBzE,QAEnD8T,EACFrP,EAAmBH,GAAYI,aAAaH,GAG9C,GAA0C,IAAtCuP,EAAgBtP,WAAWjK,OAAc,CAE3C,IAAI6N,EAAY,iCAAmC0L,EAAgB1O,KACnEpM,KAAKwD,SAAS,CACZgM,YAAY,EACZJ,UAAWA,SAab,GATA0L,EAAgB/a,QAAU+a,EAAgB/a,QASX,IAA3B+a,EAAgB/a,OAAiB,CAEnC,IAAIqP,EAAY,iCAAmC0L,EAAgB1O,KAEnEX,EAAmBH,GAAYvL,QAAS,EAOxCC,KAAKwD,SAAS,CACZiI,mBAAoBA,EACpB2D,UAAWA,SAGbpP,KAAKwD,SAAS,CACZiI,mBAAoBA,M,uCAQXtL,EAAGmL,EAAYC,EAAaK,GAE3C,IAAIH,EAAqBzL,KAAKd,MAAMuM,mBAAmBzE,QACjD+T,EACJtP,EAAmBH,GAAYI,aAAaH,GAAaC,WACvDI,GAGJmP,EAAchb,QAAUgb,EAAchb,OACtCC,KAAKwD,SAAS,CACZiI,mBAAoBA,M,iCAObH,EAAYC,EAAayP,EAAgBhP,GAAa,IAAD,OAC9D+E,SAASC,KAAKC,UAAUC,IAAI,WAE5B,IAAI7M,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WAMnC4W,EAAiBd,GAAiBa,EADfhb,KAAKd,MAAMuM,mBAAmBH,GAAYI,aAAaH,GAAaa,MAE3F6O,EAAiBC,GAAaD,GAM9B,IAAIE,EAAcnP,EAAWhF,QAC7B3C,EAAY+W,GACV/W,EACA4W,EACAE,GAOF,IAAIjF,EAAkBlW,KAAK0Q,oBAAoBrM,EAAW,UAAWrE,KAAKd,MAAMgG,aAC5EiR,EAAkBnW,KAAK0Q,oBAAoBrM,EAAW,SAAUrE,KAAKd,MAAMgG,aAC/EoM,EAAgB4E,GAAiB3E,MAAK,SAAC6E,GACvC9E,EAAgB6E,GAAiB5E,MAAK,SAAC8E,GAGrC,IAAIC,EAAoBC,GAAoBH,EAAWC,GACnDrG,EAAmBsG,EAAkBtG,iBACrCC,EAAqBqG,EAAkBrG,mBAE3Cc,SAASC,KAAKC,UAAUY,OAAO,WAE/B,IACI9B,EACA,CACE,UAAY,EAAK7Q,MAAMmF,UACvB,iBAAmB,EAAKnF,MAAM8Q,iBAC9B,mBAAqB,EAAK9Q,MAAM+Q,mBAChC,gBAAmB,EAAK/Q,MAAMqG,iBAGpC,EAAK/B,SAAS,CACZa,UAAWA,EACX2L,iBAAkBA,EAClBC,mBAAoBA,EACpB1K,iBAAkB,EAClBuK,WAde,aAefC,UAAWA,Y,gCAOPzE,EAAYC,GAAc,IAAD,OACjCwF,SAASC,KAAKC,UAAUC,IAAI,WAS5B,IAPA,IAAI7M,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WAEnCmH,EACFxL,KAAKd,MAAMuM,mBAAmBH,GAAYI,aAAaH,GAAaC,WAClE6P,EACFrb,KAAKd,MAAMuM,mBAAmBH,GAAYI,aAAaH,GAAaa,KAE7DnL,EAAI,EAAGA,EAAIuK,EAAWjK,SAAUN,EAAG,CAE1C,IAAIga,EAAiBd,GACnB3O,EAAWvK,GAAGI,KACdga,GAGEC,EAAYL,EAAe,GAC/BA,EAAiBC,GAAaD,GAK9B,IAAIM,GAAY,EAChB,GAAIF,IAAqBnT,mBAAmBlI,KAAKd,MAAM2D,UAAUmE,MAAM,MAAQsU,EAAU/Z,SAAW8C,EAAU,GAAG9C,OAAQ,CAEvH,IADA,IAAIia,GAAe,EACVC,EAAE,EAAGA,EAAEH,EAAU/Z,SAAUka,EAClC,GAAIH,EAAUG,GAAGpa,OAASrB,KAAKd,MAAMwE,YAAY+X,GAAGnb,MAAO,CACzDkb,GAAe,EACf,OAGiB,IAAjBA,IACFD,GAAY,GAIhB,IAAIJ,EAAc3P,EAAWvK,GAAG+K,WAAWhF,SAGzB,IAAduU,IACFlX,EAAY+W,GACV/W,EACA4W,EACAE,IAMN,IAAIjF,EAAkBlW,KAAK0Q,oBAAoBrM,EAAW,UAAWrE,KAAKd,MAAMgG,aAC5EiR,EAAkBnW,KAAK0Q,oBAAoBrM,EAAW,SAAUrE,KAAKd,MAAMgG,aAC/EoM,EAAgB4E,GAAiB3E,MAAK,SAAC6E,GACvC9E,EAAgB6E,GAAiB5E,MAAK,SAAC8E,GAGrC,IAAIC,EAAoBC,GAAoBH,EAAWC,GACnDrG,EAAmBsG,EAAkBtG,iBACrCC,EAAqBqG,EAAkBrG,mBAE3Cc,SAASC,KAAKC,UAAUY,OAAO,WAE/B,IACI9B,EACA,CACE,UAAY,EAAK7Q,MAAMmF,UACvB,iBAAmB,EAAKnF,MAAM8Q,iBAC9B,mBAAqB,EAAK9Q,MAAM+Q,mBAChC,gBAAmB,EAAK/Q,MAAMqG,iBAGpC,EAAK/B,SAAS,CACZa,UAAWA,EACX2L,iBAAkBA,EAClBC,mBAAoBA,EACpB1K,iBAAkB,EAClBuK,WAde,YAefC,UAAWA,Y,oCASHzE,GAOZ,IALA,IAAIjH,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WAGnCqH,EAAe1L,KAAKd,MAAMuM,mBAAmBH,GAAYI,aAEpDzK,EAAI,EAAGA,EAAIyK,EAAanK,SAAUN,EAAG,CAE5C,IAAIuK,EAAaE,EAAazK,GAAGuK,WAC7B6P,EAAmB3P,EAAazK,GAAGmL,KAIvC,GAA0B,IAAtBZ,EAAWjK,OACb,MAIA,IAAK,IAAIyC,EAAI,EAAGA,EAAIwH,EAAWjK,SAAUyC,EAAG,CAE1C,IAAIiX,EAAiBd,GACnB3O,EAAWxH,GAAG3C,KACdga,GAGEC,EAAYL,EAAe,GAC/BA,EAAiBC,GAAaD,GAE9B,IAAIM,GAAY,EAChB,GAAIF,IAAqBnT,mBAAmBlI,KAAKd,MAAM2D,UAAUmE,MAAM,MAAQsU,EAAU/Z,SAAW8C,EAAU,GAAG9C,OAAQ,CAEvH,IADA,IAAIia,GAAe,EACVC,EAAE,EAAGA,EAAEH,EAAU/Z,SAAUka,EAClC,GAAIH,EAAUG,GAAGpa,OAASrB,KAAKd,MAAMwE,YAAY+X,GAAGnb,MAAO,CACzDkb,GAAe,EACf,OAGiB,IAAjBA,IACFD,GAAY,GAIhB,IAAIJ,EAAc3P,EAAWxH,GAAGgI,WAAWhF,SAGzB,IAAduU,IACFlX,EAAY+W,GACV/W,EACA4W,EACAE,KAQV,IACIpL,EACA,CACE,UAAY/P,KAAKd,MAAMmF,WAG7BrE,KAAKwD,SAAS,CACZa,UAAWA,EACXyL,WARe,gBASfC,UAAWA,M,qCAMA5P,GAIb,IADA,IAAIsL,EAAqBzL,KAAKd,MAAMuM,mBAAmBzE,QAC9C/F,EAAI,EAAGA,EAAIwK,EAAmBlK,SAAUN,EAC/CwK,EAAmBxK,GAAGlB,QAAS,EAGjCC,KAAKwD,SAAS,CACZhD,gBAAiBL,EAAEiU,OAAO9T,MAC1BmL,mBAAoBA,M,wCAMNtL,GAIhB,IADA,IAAIsL,EAAqBzL,KAAKd,MAAMuM,mBAAmBzE,QAC9C/F,EAAI,EAAGA,EAAIwK,EAAmBlK,SAAUN,EAC/CwK,EAAmBxK,GAAGlB,QAAS,EAEjCC,KAAKwD,SAAS,CACZ/C,YAAaN,EAAEiU,OAAO9T,MACtBmL,mBAAoBA,M,iCAMbtL,EAAGsD,GAIZ,IADA,IAAIoT,EAAY,GACP5V,EAAI,EAAGA,EAAIjB,KAAKd,MAAMmF,UAAU9C,SAAUN,EACjD4V,EAAU3V,KAAKlB,KAAKd,MAAMmF,UAAUpD,GAAGwC,GAAUpC,OAEnDwV,EAAS,YAAO,IAAI6E,IAAI7E,KAEd3D,MACR,SAASJ,EAAEK,GACT,MAAa,QAANL,GAAe,EAAU,QAANK,EAAc,EAAI,KAKhD,IADA,IAAIhS,EAAiB,GACZF,EAAE,EAAEA,EAAE4V,EAAUtV,SAASN,EAChCE,EAAeD,KACb,CACE,KAAO2V,EAAU5V,GACjB,SAAU,IAMhBjB,KAAKwD,SAAS,CACZrC,eAAgBA,EAChBK,YAAY,EACZC,UAAU,EACV0O,eAAgB1M,M,mCAMPtD,GACXH,KAAKwD,SAAS,CACZrC,eAAgB,GAChBK,YAAY,EACZ2O,gBAAiB,M,oCAOPhQ,EAAGwb,GACf,IAAIxa,EAAiBnB,KAAKd,MAAMiC,eAChCA,EAAewa,GAAYpb,SAAWY,EAAewa,GAAYpb,QACjEP,KAAKwD,SAAS,CACZrC,eAAeA,M,gCAMThB,GACR,IAAIsB,EAAWzB,KAAKd,MAAMuC,SACtBN,EAAiBnB,KAAKd,MAAMiC,eAChCM,GAAYA,EAEZ,IAAK,IAAIR,EAAI,EAAGA,EAAIE,EAAeI,SAAUN,EAC3CE,EAAeF,GAAGV,QAAUkB,EAE9BzB,KAAKwD,SAAS,CACZ/B,SAAUA,EACVN,eAAgBA,M,kCAMRhB,GAMV,IANc,IAAD,OAKTyb,GAAW,EACN3a,EAAI,EAAGA,EAAIjB,KAAKd,MAAMiC,eAAeI,SAAUN,EACtD,IAA6C,IAAzCjB,KAAKd,MAAMiC,eAAeF,GAAGV,QAAkB,CACjDqb,GAAW,EACX,MAKJ,IAAiB,IAAbA,EACF7S,MAAM,wDAIH,CAEH,IADA,IAAI8S,EAAe,GACV5a,EAAE,EAAEA,EAAEjB,KAAKd,MAAMiC,eAAeI,SAASN,GACH,IAAzCjB,KAAKd,MAAMiC,eAAeF,GAAGV,SAC/Bsb,EAAa3a,KAAKlB,KAAKd,MAAMiC,eAAeF,GAAGI,MAInD,IADA,IAAIgD,EAAYkO,IAAEC,UAAUxS,KAAKd,MAAMmF,WAC9BpD,EAAE,EAAEA,EAAEoD,EAAU9C,SAASN,EAC3B4a,EAAa1K,SAAS9M,EAAUpD,GAAGjB,KAAKd,MAAMiR,gBAAgB9O,QACjEgD,EAAUgU,OAAOpX,EAAE,KACjBA,GAMN,IAAIiV,EAAkBlW,KAAK0Q,oBAAoBrM,EAAW,UAAWrE,KAAKd,MAAMgG,aAC5EiR,EAAkBnW,KAAK0Q,oBAAoBrM,EAAW,SAAUrE,KAAKd,MAAMgG,aAC/EoM,EAAgB4E,GAAiB3E,MAAK,SAAC6E,GACvC9E,EAAgB6E,GAAiB5E,MAAK,SAAC8E,GAGrC,IAAIC,EAAoBC,GAAoBH,EAAWC,GACnDrG,EAAmBsG,EAAkBtG,iBACrCC,EAAqBqG,EAAkBrG,mBAIvCF,EACA,CACE,UAAY,EAAK7Q,MAAMmF,UACvB,cAAgB,EAAKnF,MAAMuO,cAC3B,iBAAmB,EAAKvO,MAAM8Q,iBAC9B,mBAAqB,EAAK9Q,MAAM+Q,mBAChC,gBAAmB,EAAK/Q,MAAMqG,iBAGpC,EAAK/B,SAAS,CACZrC,eAAgB,GAChBK,YAAY,EACZ2O,gBAAiB,EACjB9L,UAAWA,EACX2L,iBAAkBA,EAClBC,mBAAoBA,EACpB1K,iBAAkB,EAClBuK,WAlBe,cAmBfC,UAAWA,a,sCASHpB,GAGd,GAAc,IAAVA,EAAa,CAEf,IADA,IAAIlD,EAAqBzL,KAAKd,MAAMuM,mBAAmBzE,QAC9C/F,EAAI,EAAGA,EAAIwK,EAAmBlK,SAAUN,EAC/CwK,EAAmBxK,GAAGlB,QAAS,EAEjCC,KAAKwD,SAAS,CACZiI,mBAAoBA,EACpB+C,SAAUG,SAIZ3O,KAAKwD,SAAS,CACZgL,SAAUG,M,yCASd,IAAImB,EAAa9P,KAAKd,MAAM4Q,WAExBC,EAAY/P,KAAKd,MAAM6Q,UAQR,mBAAfD,EACF9P,KAAKwD,SAAS,CACZX,UAAWkN,EAAUlN,UACrBuM,UAAWW,EAAUX,UACrB5I,iBAAkBuJ,EAAUvJ,iBAC5Bc,cAAeyI,EAAUzI,cACzBwI,WAAY,KAOQ,uBAAfA,EACP9P,KAAKwD,SAAS,CACZsK,gBAAiBiC,EAAUjC,gBAC3BzJ,UAAW0L,EAAU1L,UACrBsE,kBAAmBoH,EAAUpH,kBAC7BC,gBAAiBmH,EAAUnH,gBAC3B4F,SAAUuB,EAAUvB,SACpBf,cAAesC,EAAUtC,cACzBqC,WAAY,KAOQ,qBAAfA,EACP9P,KAAKwD,SAAS,CACZoB,eAAgBmL,EAAUnL,eAC1BmJ,mBAAoBgC,EAAUhC,mBAC9BtC,mBAAoBsE,EAAUtE,mBAC9BgC,cAAesC,EAAUtC,cACzByC,wBAAyBH,EAAUG,wBACnChL,YAAa6K,EAAU7K,YACvB8K,iBAAkBD,EAAUC,iBAC5BC,mBAAoBF,EAAUE,mBAC9B5L,UAAW0L,EAAU1L,UACrBX,YAAaqM,EAAUrM,YACvBoK,gBAAiBiC,EAAUjC,gBAC3BU,SAAUuB,EAAUvB,SACpBsB,WAAY,KAQQ,sBAAfA,EACP9P,KAAKwD,SAAS,CACZ0B,YAAa6K,EAAU7K,YACvB8K,iBAAkBD,EAAUC,iBAC5BC,mBAAoBF,EAAUE,mBAC9BxC,cAAesC,EAAUtC,cACzBpJ,UAAW0L,EAAU1L,UACrBX,YAAaqM,EAAUrM,YACvBkB,eAAgBmL,EAAUnL,eAC1Bd,mBAAoBiM,EAAUjM,mBAC9BgM,WAAY,KAMQ,wBAAfA,EACP9P,KAAKwD,SAAS,CACZiK,cAAesC,EAAUtC,cACzBpJ,UAAW0L,EAAU1L,UACrBX,YAAaqM,EAAUrM,YACvB6B,gBAAiBwK,EAAUxK,gBAC3BuK,WAAY,KAMQ,yBAAfA,EACP9P,KAAKwD,SAAS,CACZiK,cAAesC,EAAUtC,cACzBpJ,UAAW0L,EAAU1L,UACrB4L,mBAAoBF,EAAUE,mBAC9BH,WAAY,KAMQ,wBAAfA,EACP9P,KAAKwD,SAAS,CACZiK,cAAesC,EAAUtC,cACzBpJ,UAAW0L,EAAU1L,UACrByL,WAAY,KAMQ,eAAfA,GAA8C,cAAfA,GAA6C,kBAAfA,EACpE9P,KAAKwD,SAAS,CACZa,UAAW0L,EAAU1L,UACrB2L,iBAAkBD,EAAUC,iBAC5BC,mBAAoBF,EAAUE,mBAC9B1K,gBAAiBwK,EAAUxK,gBAC3BuK,WAAY,KAKQ,qBAAfA,EACP9P,KAAKwD,SAAS,CACZa,UAAW0L,EAAU1L,UACrBX,YAAaqM,EAAUrM,YACvB+J,cAAesC,EAAUtC,cACzBvI,YAAa6K,EAAU7K,YACvBK,gBAAiBwK,EAAUxK,gBAC3B2K,wBAAyBH,EAAUG,wBACnC1B,SAAUuB,EAAUvB,SACpBsB,WAAY,KAKQ,qBAAfA,EACP9P,KAAKwD,SAAS,CACZ0B,YAAa6K,EAAU7K,YACvB8K,iBAAkBD,EAAUC,iBAC5BC,mBAAoBF,EAAUE,mBAC9BxC,cAAesC,EAAUtC,cACzBe,SAAUuB,EAAUvB,SACpBjJ,gBAAiBwK,EAAUxK,gBAC3BuK,WAAY,KAcQ,sBAAfA,EACP9P,KAAKwD,SAAS,CACZiK,cAAesC,EAAUtC,cACzBe,SAAUuB,EAAUvB,SACpBgB,WAAYO,EAAUP,WACtBJ,UAAWW,EAAUX,UACrB5E,iBAAkBuF,EAAUvF,iBAC5BD,oBAAqBwF,EAAUxF,oBAC/BM,aAAckF,EAAUlF,aACxBtF,gBAAiBwK,EAAUxK,gBAC3BuK,WAAY,KAKQ,wBAAfA,EACP9P,KAAKwD,SAAS,CACZa,UAAW0L,EAAU1L,UACrBX,YAAaqM,EAAUrM,YACvBwM,wBAAyBH,EAAUG,wBACnChL,YAAa6K,EAAU7K,YACvBK,gBAAiBwK,EAAUxK,gBAC3BkG,mBAAoBsE,EAAUtE,mBAC9BgC,cAAesC,EAAUtC,cACzBqC,WAAY,KAKQ,sBAAfA,EACP9P,KAAKwD,SAAS,CACZa,UAAW0L,EAAU1L,UACrB4L,mBAAoBF,EAAUE,mBAC9B1K,gBAAiBwK,EAAUxK,gBAC3BuK,WAAY,KAKQ,uBAAfA,EACP9P,KAAKwD,SAAS,CACZa,UAAW0L,EAAU1L,UACrB2L,iBAAkBD,EAAUC,iBAC5BC,mBAAoBF,EAAUE,mBAC9BxC,cAAesC,EAAUtC,cACzBe,SAAUuB,EAAUvB,SACpBjJ,gBAAiBwK,EAAUxK,gBAC3BuK,WAAY,KAKQ,gBAAfA,EACP9P,KAAKwD,SAAS,CACZa,UAAW0L,EAAU1L,UACrB2L,iBAAkBD,EAAUC,iBAC5BC,mBAAoBF,EAAUE,mBAC9BxC,cAAesC,EAAUtC,cACzBlI,gBAAiBwK,EAAUxK,gBAC3BuK,WAAY,KAKQ,YAAfA,EACP9P,KAAKwD,SAAS,CACZiK,cAAesC,EAAUtC,cACzBpJ,UAAW0L,EAAU1L,UACrBX,YAAaqM,EAAUrM,YACvBsM,iBAAkBD,EAAUC,iBAC5BzK,gBAAiBwK,EAAUxK,gBAC3B0K,mBAAoBF,EAAUE,mBAC9BC,wBAAyBH,EAAUG,wBACnCJ,WAAY,KAIQ,uBAAfA,EACP9P,KAAKwD,SAAS,CACZa,UAAW0L,EAAU1L,UACrB4L,mBAAoBF,EAAUE,mBAC9BD,iBAAkBD,EAAUC,iBAC5BlM,mBAAoBiM,EAAUjM,mBAC9ByB,gBAAiBwK,EAAUxK,gBAC3BuK,WAAY,KAIQ,yBAAfA,EACP9P,KAAKwD,SAAS,CACZa,UAAW0L,EAAU1L,UACrBkB,gBAAiBwK,EAAUxK,gBAC3BuE,gBAAiBiG,EAAUjG,gBAC3BoK,qBAAsBnE,EAAUmE,qBAChCpE,WAAY,KAIQ,2BAAfA,EACP9P,KAAKwD,SAAS,CACZa,UAAW0L,EAAU1L,UACrBX,YAAaqM,EAAUrM,YACvBwB,YAAa6K,EAAU7K,YACvBgL,wBAAyBH,EAAUG,wBACnCzC,cAAesC,EAAUtC,cACzBe,SAAUuB,EAAUvB,SACpBjJ,gBAAiBwK,EAAUxK,gBAC3BuK,WAAY,KAIQ,2BAAfA,GACP9P,KAAKwD,SAAS,CACZa,UAAW0L,EAAU1L,UACrBX,YAAaqM,EAAUrM,YACvBwB,YAAa6K,EAAU7K,YACvBgL,wBAAyBH,EAAUG,wBACnCzC,cAAesC,EAAUtC,cACzBe,SAAUuB,EAAUvB,SACpBjJ,gBAAiBwK,EAAUxK,gBAC3BuK,WAAY,O,kCAahB9P,KAAKwD,SAAS,CACZvD,aAAa,M,mCAKfD,KAAKwD,SAAS,CACZvD,aAAa,M,6CAOf,IAAImI,GAAsBpI,KAAKd,MAAMkJ,mBACrCpI,KAAKwD,SAAS,CACZ4E,mBAAoBA,M,sCAORjI,EAAGkG,GAEjB,GAAY,UAARA,EACFrG,KAAKwD,SAAS,CACZsL,iBAAkB9O,KAAKd,MAAM4P,gBAC7BC,gBAAgB,QAIf,CAGH,IADA,IAAIzH,EAAgBtH,KAAKd,MAAMoI,cAAcN,QACpC/F,EAAI,EAAGA,EAAIqG,EAAc/F,SAAUN,EAC1CqG,EAAcrG,IAAK,EAErBjB,KAAKwD,SAAS,CACZsL,iBAAiB,EACjBC,gBAAiB/O,KAAKd,MAAM6P,eAC5BzH,cAAeA,O,sCAOLnH,EAAGc,GAWjB,IATA,IAAIyC,EAAc6O,IAAEC,UAAUxS,KAAKd,MAAMwE,aACrCoY,EAAoB,GACpBC,EAAkB,GAOb9a,EAAI,EAAGA,EAAIyC,EAAYnC,QAEA,IAA1BmC,EAAYzC,GAAGM,SAFqBN,EAAG,CAQzC,IADA,IAAIX,EAAQ,GACH0D,EAAI,EAAGA,EAAIN,EAAYzC,GAAGM,SAAUyC,EAAG,CAE9C1D,GADiB0D,EAAI,EAAI,IAAMN,EAAYzC,GAAG+C,GAAG1D,MAAQoD,EAAYzC,GAAG+C,GAAG1D,MAG7Ewb,EAAkB5a,KAChB,CACE,MAAQZ,EACR,MAAQA,EACR,MAAQW,IAahB,IALA,IAAI8Y,EAAY7R,mBAAmBlI,KAAKd,MAAM2D,UAAUmE,MAAM,KAC1DsJ,EAAgB6J,GAAiBna,KAAKd,MAAMsH,iBAAiBvF,GAAI8Y,GAI5D9Y,EAAI,EAAGA,EAAIqP,EAAc,GAAG/O,SAAUN,EAC7C8a,EAAgB7a,KACd,CACE,MAAQoP,EAAc,GAAGrP,GAAGI,KAC5B,MAAQiP,EAAc,GAAGrP,GAAGI,KAC5B,MAAQJ,IAcmB,IAA7B6a,EAAkBva,QAA2C,IAA3Bwa,EAAgBxa,OACpDwH,MAAM,kEAGN/I,KAAKwD,SAAS,CACZ4M,eAAe,EACfC,eAAgBpP,EAChBqP,cAAeA,EACfvO,iBAAkB+Z,EAClBzZ,eAAgB0Z,M,iCAOX5b,GACTH,KAAKwD,SAAS,CACZ4M,eAAe,M,uCAOFjQ,EAAGoE,GAEJ,gBAAVA,EACFvE,KAAKwD,SAAS,CACZxB,gBAAiB7B,EAAEwO,QAIrB3O,KAAKwD,SAAS,CACZlB,cAAenC,EAAEwO,U,8BASfxO,GAmBN,IAnBU,IAAD,OAELmQ,EAAgBtQ,KAAKd,MAAMoR,cAActJ,QACzChF,EAAkBhC,KAAKd,MAAM8C,gBAC7BM,EAAgBtC,KAAKd,MAAMoD,cAS3BkV,EAAqBxX,KAAKd,MAAMwE,YAAYsD,QAC5C0Q,EAAoB1X,KAAKd,MAAM0Q,WAAW5I,QAC1CyQ,EAAiCzX,KAAKd,MAAMgR,wBAAwBlJ,QAI/D/F,EAAI,EAAGA,EAAIuW,EAAmBjW,SAAUN,EACjB,KAA1BuW,EAAmBvW,KACrBuW,EAAmBa,OAAOpX,EAAE,KAC1BA,GAIN,IAAK,IAAIA,EAAI,EAAGA,EAAIqP,EAAc,GAAG/O,SAAUN,EACzCA,IAAMqB,GACRkV,EAAmBtW,KACjB,CACE,CACE,MAAQoP,EAAc,GAAGrP,GAAGI,KAC5B,MAAQiP,EAAc,GAAGrP,GAAGI,QAUtC,IAAK,IAAIJ,EAAI,EAAGA,EAAIqP,EAAc,GAAG/O,SAAUN,EAC7CyW,EAAkBxW,KAAK,IAMzBoQ,EADmB,CAACqI,GAAoB3Z,KAAKd,MAAMsH,iBAAiBxG,KAAKd,MAAMmR,mBACjDkB,MAAK,SAACC,GAEpCA,EAAO,GAAG6G,OAAO,EAAG,EAAG,IACvB,IAAK,IAAIpX,EAAI,EAAGA,EAAIuQ,EAAO,GAAGjQ,SAAUN,EAClCA,IAAMqB,GACRmV,EAA+BvW,KAAKsQ,EAAO,GAAGvQ,IAGlD+I,QAAQC,IAAIwN,GAWZ,IALA,IAAIpT,EAAYkO,IAAEC,UAAU,EAAKtT,MAAMmF,WACnCgT,EAAmB,GAGnB0E,EAAkB,GACb/X,EAAE,EAAEA,EAAEsM,EAAc,GAAG/O,SAASyC,EACvC+X,EAAgB7a,KACd,CAAC,MAAQoP,EAAc,GAAGtM,GAAG3C,KAC5B,MAAQiP,EAAc,GAAGtM,GAAG3C,OAMjC,IAHA,IAAI2a,EAAuB,GAGlB/a,EAAE,EAAEA,EAAEqP,EAAc/O,SAASN,EAAG,CAGvC,IAFA,IAAIuD,EAAU,GAELR,EAAE,EAAEA,EAAEsM,EAAcrP,GAAGM,SAASyC,EAAG,CAE1C,IAAI3C,EAAOiP,EAAcrP,GAAG+C,GAAG3C,KAE3B0J,EAAS,GACToO,EAAa7I,EAAcrP,GAAG+C,GAAG+G,OAAO,KAAKgR,EAAgB/X,GAAG1D,MAAM,KAAKgQ,EAAcrP,GAAG+C,GAAG3C,KACnG0J,EAAO7J,KAAKiY,GACZ3U,EAAQtD,KAAK,CAAC,KAAOG,EAAK,OAAS0J,IAErCiR,EAAqB9a,KAAKsD,GAQ5B,IAAK,IAAIvD,EAAI,EAAGA,EAAIoD,EAAU9C,SAAUN,EAAG,CACzC,IAAIgb,EAAe5X,EAAUpD,GAAGe,GAAiBX,KACjD2I,QAAQC,IAAI,4BAA4BgS,GAGxC,IAFA,IAAIC,GAAgB,EAEXlY,EAAI,EAAGA,EAAIgY,EAAqBza,SAAUyC,EACjD,GAAIgY,EAAqBhY,GAAG1B,GAAejB,OAAS4a,EAAc,CAKhE,IADA,IAAIzX,EAAU+N,IAAEC,UAAUnO,EAAUpD,IAC3BqW,EAAI,EAAGA,EAAI0E,EAAqBhY,GAAGzC,SAAU+V,EAChDA,IAAMhV,GACRkC,EAAQtD,KAAK8a,EAAqBhY,GAAGsT,IAGzCD,EAAiBnW,KAAKsD,GACtB0X,GAAgB,EAKpB,IAAsB,IAAlBA,EAAyB,CAK3B,IADA,IAAI1X,EAAU+N,IAAEC,UAAUnO,EAAUpD,IAC3BqW,EAAI,EAAGA,EAAI0E,EAAqB,GAAGza,SAAU+V,EAChDA,IAAMhV,GACRkC,EAAQtD,KACN,CACE,KAAO,MACP,OAAS,KAKjBmW,EAAiBnW,KAAKsD,IAS1B,IAAI0R,EAAkB,EAAKxF,oBAAoB2G,EAAkB,UAAW,EAAKnY,MAAMgG,aACnFiR,EAAkB,EAAKzF,oBAAoB2G,EAAkB,SAAU,EAAKnY,MAAMgG,aACtFoM,EAAgB4E,GAAiB3E,MAAK,SAAC6E,GACvC9E,EAAgB6E,GAAiB5E,MAAK,SAAC8E,GAGrC,IAAIC,EAAoBC,GAAoBH,EAAWC,GACnDrG,EAAmBsG,EAAkBtG,iBACrCC,EAAqBqG,EAAkBrG,mBAIvCF,EACF,CACE,cAAgB,EAAK7Q,MAAMuO,cAC3B,UAAY,EAAKvO,MAAMmF,UACvB,YAAc,EAAKnF,MAAMwE,YACzB,iBAAmB,EAAKxE,MAAM8Q,iBAC9B,mBAAqB,EAAK9Q,MAAM+Q,mBAChC,wBAA0B,EAAK/Q,MAAMgR,wBACrC,gBAAmB,EAAKhR,MAAMqG,iBAGlC,EAAK/B,SAAS,CACZiK,cAAc,CAAC,KAAO,uBACtBpJ,UAAUgT,EACV3T,YAAY8T,EACZxH,iBAAiBA,EACjBC,mBAAmBA,EACnBC,wBAAwBuH,EACxBrH,eAAe,EACf7K,iBAAkB,EAClBuK,WArBe,UAsBfC,UAAUA,e,2CAQK5P,EAAGc,GACtB,IAAIsJ,EAAsBvK,KAAKd,MAAMqL,oBAAoBvD,QACzDuD,EAAoBtJ,IAAMsJ,EAAoBtJ,GAC9CjB,KAAKwD,SAAS,CACZ+G,oBAAqBA,M,+BAKvB,IAAI4R,EACAC,EAAqB,kBACrBC,EAAkB,kBAyKtB,OAxKIrc,KAAKd,MAAMsQ,aACb4M,EAAqB,yBACrBC,EAAkB,yBAIlBF,EAD2B,KAAzBnc,KAAKd,MAAM2D,UAEX,kBAAC,EAAD,CACEH,eAAgB1C,KAAK0C,iBAMvB,6BACE,yBAAKvD,UAAU,UACb,kBAAC,EAAD,CAEEM,UAAWO,KAAKP,UAChBE,iBAAkBK,KAAKL,iBACvBD,UAAaM,KAAKN,aAGtB,yBAAKP,UAAU,YACb,yBAAKA,UAAU,IACb,yBAAKA,UAAWkd,GACd,yBAAKld,UAAU,sCACb,kBAAC,EAAD,CACE0D,UAAW7C,KAAKd,MAAM2D,UACtBiL,gBAAiB9N,KAAKd,MAAM4O,gBAE5BpK,YAAa1D,KAAKd,MAAMwE,YACxBW,UAAWrE,KAAKd,MAAMmF,UACtBa,YAAalF,KAAKd,MAAMgG,YACxBW,aAAc7F,KAAKuQ,WACnBC,gBAAiBxQ,KAAKwQ,gBACtBC,cAAezQ,KAAKyQ,cACpBb,WAAY5P,KAAKd,MAAM0Q,WACvB5K,iBAAkBhF,KAAKgF,iBACvBK,oBAAqBrF,KAAKqF,oBAC1BN,iBAAkB/E,KAAK+E,iBACvBgB,kBAAmB/F,KAAK+F,kBACxBd,kBAAmBjF,KAAKiF,kBAExBL,eAAgB5E,KAAKd,MAAM0F,eAC3BE,gBAAiB9E,KAAK8E,gBACtBhB,mBAAoB9D,KAAKd,MAAM4E,mBAE/BsB,gBAAiBpF,KAAKoF,gBAEtBG,gBAAiBvF,KAAKd,MAAMqG,mBAGhC,yBAAKpG,UAAU,uCACb,kBAAC,EAAD,CACE0D,UAAW7C,KAAKd,MAAM2D,UACtBiL,gBAAiB9N,KAAKd,MAAM4O,gBAC5BL,cAAezN,KAAKd,MAAMuO,cAC1BxF,mBAAoBjI,KAAKiI,mBACzBoB,kBAAmBrJ,KAAKqJ,kBACxBa,oBAAqBlK,KAAKkK,oBAC1BsD,qBAAsBxN,KAAKwN,qBAC3BD,oBAAqBvN,KAAKuN,oBAC1BL,uBAAwBlN,KAAKkN,uBAC7BQ,uBAAwB1N,KAAK0N,uBAE7BnF,iBAAkBvI,KAAKuI,iBACvBkD,mBAAoBzL,KAAKd,MAAMuM,mBAC/BoB,yBAA0B7M,KAAK6M,yBAC/BP,cAAetM,KAAKsM,cACpBR,iBAAkB9L,KAAK8L,iBACvBC,WAAY/L,KAAK+L,WACjBQ,UAAWvM,KAAKuM,UAChBuE,cAAe9Q,KAAK8Q,cAEpBtC,SAAUxO,KAAKd,MAAMsP,SACrBI,gBAAiB5O,KAAK4O,gBAEtBxG,mBAAoBpI,KAAKd,MAAMkJ,mBAC/BD,qBAAsBnI,KAAKmI,qBAC3B3B,iBAAkBxG,KAAKd,MAAMsH,iBAC7Bc,cAAetH,KAAKd,MAAMoI,cAC1BG,YAAazH,KAAKyH,YAClBsG,mBAAoB/N,KAAKd,MAAM6O,mBAE/Be,gBAAiB9O,KAAKd,MAAM4P,gBAC5BC,eAAgB/O,KAAKd,MAAM6P,eAC3BF,gBAAiB7O,KAAK6O,gBACtBG,gBAAiBhP,KAAKgP,gBAEtBrG,kBAAmB3I,KAAKd,MAAMyJ,kBAC9BC,gBAAiB5I,KAAKd,MAAM0J,gBAC5BhE,eAAgB5E,KAAKd,MAAM0F,eAC3BM,YAAalF,KAAKd,MAAMgG,YACxBuE,qBAAsBzJ,KAAKyJ,qBAC3B/F,YAAa1D,KAAKd,MAAMwE,YACxBgF,gBAAiB1I,KAAKd,MAAMwJ,gBAC5BuF,cAAejO,KAAKiO,cACpB3E,mBAAoBtJ,KAAKsJ,mBAEzBO,kBAAmB7J,KAAKd,MAAM2K,kBAC9BC,gBAAiB9J,KAAKd,MAAM4K,gBAC5BC,kBAAmB/J,KAAKd,MAAM6K,kBAC9BI,qBAAsBnK,KAAKmK,qBAE3BiE,kBAAmBpO,KAAKoO,kBACxBE,mBAAoBtO,KAAKsO,mBACzBD,WAAYrO,KAAKqO,WAEjB7D,iBAAkBxK,KAAKd,MAAMsL,iBAC7BD,oBAAqBvK,KAAKd,MAAMqL,oBAChCM,aAAc7K,KAAKd,MAAM2L,aACzBF,qBAAsB3K,KAAK2K,qBAE3BqF,iBAAkBhQ,KAAKd,MAAM8Q,qBAInC,yBAAK7Q,UAAWid,GACd,6BACE,kBAAC,EAAD,CACE5M,WAAYxP,KAAKd,MAAMsQ,WACvBJ,UAAWpP,KAAKd,MAAMkQ,UACtBE,eAAgBtP,KAAKsP,mBAI3B,6BACE,kBAAC,EAAD,CACErP,YAAaD,KAAKd,MAAMe,YACxBa,WAAYd,KAAKc,WACjBN,gBAAiBR,KAAKd,MAAMsB,gBAC5BJ,eAAgBJ,KAAKI,eACrBK,YAAaT,KAAKd,MAAMuB,YACxBC,kBAAmBV,KAAKU,qBAG5B,6BACE,kBAAC,EAAD,CACEc,WAAYxB,KAAKd,MAAMsC,WACvBL,eAAgBnB,KAAKd,MAAMiC,eAC3BM,SAAUzB,KAAKd,MAAMuC,SACrBE,YAAa3B,KAAK2B,YAClBC,aAAc5B,KAAK4B,aACnBR,cAAepB,KAAKoB,cACpBM,UAAW1B,KAAK0B,aAGpB,6BACE,kBAAC,EAAD,CACEI,SAAU9B,KAAKd,MAAMkR,cACrB5N,WAAYxC,KAAKwC,WACjBT,iBAAkB/B,KAAKd,MAAM6C,iBAC7BM,eAAgBrC,KAAKd,MAAMmD,eAC3BL,gBAAiBhC,KAAKd,MAAM8C,gBAC5BM,cAAetC,KAAKd,MAAMoD,cAC1BL,iBAAkBjC,KAAKiC,iBACvBM,QAASvC,KAAKuC,aAKtB,yBAAKpD,UAAU,UACb,kBAAC,EAAD,QAKD,6BAAMgd,O,GAnhJMvc,aA0hJvB,SAAS6S,EAAU6J,GAEjB,OAAOC,MADO,gDAAgDD,GAEvD/K,MAAK,SAAUiL,GACd,IAAKA,EAASC,GACZ,MAAMC,MAAM,GAEd,OAAOF,KAERjL,MAAK,SAAUiL,GACd,OAAOA,EAASG,UAEjBC,OAAM,SAAUC,GAGf,OAFA9L,SAASC,KAAKC,UAAUY,OAAO,WAExB,KAKjB,SAASR,EAAUiL,GAEjB,OAAOC,MADO,gDAAgDD,GACxC/K,MAAK,SAACiL,GAAD,OAAcA,EAASM,UAIpD,SAASxL,EAAgBF,GACvB,OAAOgI,QAAQ2D,IAAI3L,GAKrB,SAASsB,GAAarM,GACpB,OAAOA,EACJ/E,QAAQ,MAAO,YACfA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,KAAM,YACdA,QAAQ,MAAO,KACfA,QAAQ,KAAM,YACdA,QAAQ,MAAO,YACfA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YAIpB,SAASmY,GAAWpT,GAClB,OAAOA,EACJ/E,QAAQ,aAAc,YACtBA,QAAQ,MAAO,YACfA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,KAAM,YACdA,QAAQ,MAAO,KACfA,QAAQ,KAAM,YACdA,QAAQ,MAAO,YACfA,QAAQ,KAAM,YACdA,QAAQ,KAAM,YACdA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YACfA,QAAQ,MAAO,YAKpB,SAASqS,GAAatN,GAMpB,OAHqC,IAAjCA,EAAI8K,SAFa,kCAGlB9K,EAAMA,EAAIW,MAAM,KAEZX,EAWT,SAAS2W,GAAuBhN,EAAkB2C,EAAgBtS,GAQhE,IAAIuS,EAAmBD,EAAeE,QACpC,SAAAC,GAAC,OAAIA,EAAEC,EAAEzS,MAAM0G,MAAM,IAAIzF,OAAS,IAC5BuR,EAAEC,EAAEzS,MAAM6Q,SAAS,aAAe2B,EAAEC,EAAEzS,MAAM6Q,SAAS,gBACpD2B,EAAEC,EAAEzS,MAAM6Q,SAAS,aAClB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,aACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,YACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,cACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,QACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,SACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,mBACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,cACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,YACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,QACL,oCAAd2B,EAAEC,EAAEzS,OACU,mCAAdwS,EAAEC,EAAEzS,OACU,4CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,qCAAdwS,EAAEC,EAAEzS,OACU,uCAAdwS,EAAEC,EAAEzS,OACU,yCAAdwS,EAAEC,EAAEzS,OACU,yCAAdwS,EAAEC,EAAEzS,OACU,qCAAdwS,EAAEC,EAAEzS,OACU,wCAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,wCAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,wCAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,oCAAdwS,EAAEC,EAAEzS,OACU,2CAAdwS,EAAEC,EAAEzS,UAuBd,IARAsS,GARAA,EAAmBA,EAAiBC,QAAO,SAASC,GAClD,YAAwBb,IAApBa,EAAEmK,eACGnK,EAAEmK,cAAc3c,MAAM6Q,SAAS,eAMN+B,MAAK,SAACJ,EAAGK,GAAJ,OACvCL,EAAEC,EAAEzS,MAAM0G,MAAM,IAAMmM,EAAEJ,EAAEzS,MAAM0G,MAAM,IAAM,GAAK,MAO9BzF,OAAS,EAAG,CAE/B,IAAI2b,EAAiB,EAMjBC,EAAiBvK,EAAiB,GAAGG,EAAEzS,MAAM0G,MAAM,IACnDoW,EAAc,GAClBA,EAAYlc,KAA0ByS,GAAZ,YAATtT,EAAkCuS,EAAiB,GAAGQ,EAAE9S,MAAsBsS,EAAiB,GAAGsH,EAAE5Z,QASrH,IANA,IAAI+c,OAA+CpL,IAA9BW,EAAiB,GAAG0K,MAAsB1K,EAAiB,GAAG0K,MAAMhd,MAAQ,GAG7Fid,OAA+DtL,IAAtCW,EAAiB,GAAGqK,cAA8BrK,EAAiB,GAAGqK,cAAc3c,MAAQ,GAGhHW,EAAI,EAAGA,EAAI2R,EAAiBrR,SAAUN,EAAG,CAChD,IAAIuS,EAAeZ,EAAiB3R,GAAG8R,EAAEzS,MAAM0G,MAAM,IAErD,GAAIwM,IAAiB2J,IACjBD,EACFE,EAAYlc,KAA0ByS,GAAZ,YAATtT,EAAkCuS,EAAiB3R,GAAGmS,EAAE9S,MAAsBsS,EAAiB3R,GAAGiZ,EAAE5Z,YAGlH,CAEH,IAEIkd,EAAWL,EACF,WAAT9c,IACFmd,EAAW,MAAQA,EAAW,OAGhC,IAWI5I,EAAU,CACZ,MAnBauI,EAoBb,MAAQK,EACR,KAdYnd,EAeZ,MAba6c,EAcb,YAAc,EACd,KAbYE,EAAY7b,QAzwJR,GAywJsC6b,EAAcA,EAAYpW,MAAM,EAzwJtE,IAuxJhB,MAZaqW,EAab,cAXqBE,GAcvBvN,EAAiB9O,KAAK0T,GAGtBsI,EAAiB,EACjBC,EAAiB3J,EACjB4J,EAAc,CAAsBzJ,GAAZ,YAATtT,EAAkCuS,EAAiB3R,GAAGmS,EAAE9S,MAAsBsS,EAAiB3R,GAAGiZ,EAAE5Z,QACnH+c,OAA+CpL,IAA9BW,EAAiB3R,GAAGqc,MAAsB1K,EAAiB3R,GAAGqc,MAAMhd,MAAQ,GAC7Fid,OAA+DtL,IAAtCW,EAAiB3R,GAAGgc,cAA8BrK,EAAiB3R,GAAGgc,cAAc3c,MAAQ,IAMzH,IAEIkd,EAAWL,EACF,WAAT9c,IACFmd,EAAW,MAAQA,EAAW,OAGhC,IAWI5I,EAAU,CACV,MAnBWuI,EAoBX,MAAQK,EACR,KAdUnd,EAeV,MAbW6c,EAcX,YAAc,EACd,KAbUE,EAAY7b,QAnzJJ,GAmzJkC6b,EAAcA,EAAYpW,MAAM,EAnzJlE,IAi0JlB,MAZWqW,EAaX,cAXmBE,GAcvBvN,EAAiB9O,KAAK0T,GAMxB,OAAO5E,EAcT,SAASiJ,GAAkBtG,EAAgBtS,GAazC,IAAIuS,EAAmBD,EAAeE,QACpC,SAAAC,GAAC,OAAIA,EAAEC,EAAEzS,MAAM0G,MAAM,IAAIzF,OAAS,IAC5BuR,EAAEC,EAAEzS,MAAM6Q,SAAS,aAAe2B,EAAEC,EAAEzS,MAAM6Q,SAAS,gBACpD2B,EAAEC,EAAEzS,MAAM6Q,SAAS,aAClB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,aACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,YACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,cACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,QACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,SACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,mBACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,cACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,YACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,UACnB2B,EAAEC,EAAEzS,MAAM6Q,SAAS,QACL,oCAAd2B,EAAEC,EAAEzS,OACU,mCAAdwS,EAAEC,EAAEzS,OACU,4CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,qCAAdwS,EAAEC,EAAEzS,OACU,uCAAdwS,EAAEC,EAAEzS,OACU,yCAAdwS,EAAEC,EAAEzS,OACU,yCAAdwS,EAAEC,EAAEzS,OACU,qCAAdwS,EAAEC,EAAEzS,OACU,wCAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,wCAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,wCAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,0CAAdwS,EAAEC,EAAEzS,OACU,sCAAdwS,EAAEC,EAAEzS,OACU,oCAAdwS,EAAEC,EAAEzS,OACU,2CAAdwS,EAAEC,EAAEzS,UAaVkK,EAAmB,GAEvB,IATAoI,EAAmBA,EAAiBM,MAAK,SAACJ,EAAGK,GAAJ,OACvCL,EAAEC,EAAEzS,MAAM0G,MAAM,IAAMmM,EAAEJ,EAAEzS,MAAM0G,MAAM,IAAM,GAAK,MAQ9BzF,OAAS,EAAG,CAG/BiJ,EAAiBtJ,KACf,CACE,IAAgB,YAATb,EAAqBuS,EAAiB,GAAGG,EAAEzS,MAAM0G,MAAM,IAAM,MAAM4L,EAAiB,GAAGG,EAAEzS,MAAM0G,MAAM,IAAI,MAChH,MAAS,CAAC2M,GAAaf,EAAiB,GAAGtS,MAAMA,UAIrD,IADA,IAAIiO,EAAW,EACNtN,EAAI,EAAGA,EAAI2R,EAAiBrR,SAAUN,EAAG,CAC7B2R,EAAiB3R,GAAG8R,EAAEzS,MAAM0G,MAAM,MACjC4L,EAAiB3R,EAAE,GAAG8R,EAAEzS,MAAM0G,MAAM,IAQlDwD,EAAiB+D,GAAUjO,MAAMiB,OAl7JnB,IAm7JhBiJ,EAAiB+D,GAAUjO,MAAMY,KAAKyS,GAAaf,EAAiB3R,GAAGX,MAAMA,SAK/EkK,EAAiBtJ,KACf,CACE,IAAgB,YAATb,EAAqBuS,EAAiB3R,GAAG8R,EAAEzS,MAAM0G,MAAM,IAAM,MAAM4L,EAAiB3R,GAAG8R,EAAEzS,MAAM0G,MAAM,IAAI,MAChH,MAAQ,CAAC2M,GAAaf,EAAiB3R,GAAGX,MAAMA,YAGlDiO,IAOR,IAAIkP,EAA2B,GAC/B,GAAa,YAATpd,EAAoB,CACtB,IAAIqd,EAAkB/K,EAAeE,QACnC,SAAAC,GAAC,OAAIA,EAAEC,EAAEzS,MAAM6Q,SAAS,uBAG1B,GAAIuM,EAAgBnc,OAAS,EAAG,CAC9Bkc,EAAyBvc,KACvB,CACE,IAAO,WACP,MAAS,CAACwc,EAAgB,GAAGpd,MAAMA,MAAM0G,MAAM,OAGnD,IAAK,IAAI/F,EAAI,EAAGA,EAAIyc,EAAgBnc,SAAUN,EAC5Cwc,EAAyB,GAAGnd,MAAMY,KAAKwc,EAAgBzc,GAAGX,MAAMA,MAAM0G,MAAM,MAQlF,OAHAwD,EAAmBiT,EAAyB/J,OAAOlJ,GAyLrD,SAAS4Q,GAAY/W,EAAW4W,EAAgBE,GAM9C,IAAK,IAAInX,EAAI,EAAGA,EAAImX,EAAY5Z,SAAUyC,EACjB,SAAnBmX,EAAYnX,IACdmX,EAAYnX,KAGhBmX,EAAY9C,OAAO,EAAG,EAAG,GAIzB,IADA,IAAIsF,EAAY,GACP1c,EAAI,EAAGA,EAAIga,EAAe1Z,SAAUN,EAAG,CAE9C,IADA,IAAIuD,EAAU,GACLR,EAAI,EAAGA,EAAImX,EAAY5Z,SAAUyC,EAAG,CAC3C,IAAI4Z,EAAWzC,EAAYnX,GACV,SAAb4Z,EACFpZ,EAAQtD,KAAK+Z,EAAeha,GAAG2c,IAE/BpZ,EAAQtD,KAAK,CAAEG,KAAM,QAGzBsc,EAAUzc,KAAKsD,GAEjB,OAAOH,EAAUqP,OAAOiK,GAG1B,SAASE,GAAcxX,GAErB,MAA4B,OAAxBA,EAAIA,EAAI9E,OAAS,GACZ8E,EAAIW,MAAM,GAAI,GAAG8W,OAAOC,MAAM,KAAK,GAEnC1X,EAAIyX,OAAOC,MAAM,KAAK,GAcjC,SAASvD,GACP9W,EACA6W,EACArK,EACA1P,EACAC,EACAud,GAOA,IAHA,IAAIC,EAAa,GAGRja,EAAI,EAAGA,EAAIN,EAAYnC,SAAUyC,EAAG,CAE3C,IADA,IAAI0Q,EAAW,GACN4C,EAAI,EAAGA,EAAI5T,EAAYM,GAAGzC,SAAU+V,EAC3C5C,GAAUhR,EAAYM,GAAGsT,GAAGhX,MAE9B2d,EAAW/c,KAAKwT,GAOlB,IAHA,IACIwJ,GADM,IAAIxM,WAAYC,gBAAgB4I,EAAU,aAC1B3I,uBAAuB,aAC7CuM,EAAc,GACTld,EAAI,EAAGA,EAAIid,EAAgB3c,SAAUN,EACT,OAA/Bid,EAAgBjd,GAAGmd,SACrBD,EAAYjd,KAAKgd,EAAgBjd,IAWrC,IAJA,IAAIuK,EAAa,GAGb6S,EAAe,GACVpd,EAAI,EAAGA,EAAIkd,EAAY5c,SAAUN,EACxCod,EAAand,KACXod,GACEH,EAAYld,GACZgd,EACA/N,EACA1P,EACAC,EACAud,IAKN,OAAO1M,EAAgB+M,GAAc9M,MAAK,SAACC,GACzC,IAAK,IAAIvQ,EAAI,EAAGA,EAAIuQ,EAAOjQ,SAAUN,EACnCuK,EAAWtK,KAAKsQ,EAAOvQ,IAUzB,OANAuK,EAAaA,EAAWqH,QAAO,SAAUmD,GACvC,OAAc,IAAPA,MAIE9C,MAAK,SAACJ,EAAGK,GAAJ,OAAWL,EAAEyL,WAAapL,EAAEoL,WAAa,GAAK,KACvDnF,QAAQC,QAAQ7N,MAY3B,SAAS8S,GACPE,EACAP,EACA/N,EACA1P,EACAC,EACAud,GAgBA,IAbA,IAIIS,EAAiBD,EAAUlZ,KAAK,GAAGsB,MACnC8X,EAAU,GACVC,EAAa,GACbC,EAAa,GAIbxN,EAAe,GAEVpN,EAAI,EAAGA,EAAIya,EAAeld,SAAUyC,EAAG,CAC9C,IAAI6a,EAAahB,GAAcY,EAAeza,GAAG+C,WACjD2X,EAAQxd,KAAK2d,GACbF,EAAWzd,KAAK8C,GAOlB,GAAI0a,EAAQnd,QAAU0c,EAAW1c,OAASd,EAAa,CAMrD,IAHA,IAAI8d,EAAa,EACbvS,EAAa,GAERsL,EAAI,EAAGA,EAAI2G,EAAW1c,SAAU+V,EAAG,CAC1C,IAAI/I,EAAWmQ,EAAQ1W,QAAQiW,EAAW3G,KACxB,IAAd/I,GAGFvC,EAAW9K,KAAKqN,GAChBgQ,GAAc,EAAIN,EAAW1c,QAE7ByK,EAAW9K,KAAK,QAMpB,GAAIwd,EAAQnd,SAAW0c,EAAW1c,OAAQ,CAExC,IADA,IAAIud,GAAgB,EACX7d,EAAI,EAAGA,EAAI+K,EAAWzK,SAAUN,EACvC,GAAsB,SAAlB+K,EAAW/K,IAAiB+K,EAAW/K,KAAOA,EAAG,CACnD6d,GAAgB,EAChB,MAGJ,IAAsB,IAAlBA,EACF,IAAK,IAAI7d,EAAI,EAAGA,EAAI+K,EAAWzK,SAAUN,EACjB,SAAlB+K,EAAW/K,KAEXyd,EAAQzd,GAAGkQ,SAAS8M,EAAWhd,KAC/Bgd,EAAWhd,GAAGkQ,SAASuN,EAAQzd,OAE/B+K,EAAW/K,GAAKA,EAChBsd,GAAc,EAAIN,EAAW1c,QAQlB,IAAfgd,IACFA,GAAc,KAQlB,GAAwB,YAApB/d,EAA+B,CAGjC,GAAI+d,EAAa,KAAO,CAGtBI,EAAaA,EAAW9L,QAAO,SAAUmD,GACvC,OAAOhK,EAAWhE,QAAQgO,GAAK,KAEjC,IAAK,IAAI/U,EAAI,EAAGA,EAAI+K,EAAWzK,SAAUN,EACjB,SAAlB+K,EAAW/K,IACb2d,EAAW1d,KAAKD,GAiBpBmQ,EAAalQ,KAAKyY,GAAoB6E,EAAWG,EAAYX,IAM/D,OAAO1M,EAAgBF,GAAcG,MAAK,SAACC,GAEzC,GAAI+M,GAAc,KAChB,OAAOnF,QAAQC,QAAQ,CACrBtZ,QAAQ,EACRwe,WAAYA,EACZvS,WAAYA,EACZ3K,KAAMmd,EACNlf,MAAOof,IAIL,IAAD,aAKH,IAAIK,EAAwBvN,EAAO,GAAGxK,QACtC,GAAI+X,EAAsBxd,OAAS,EAGjC,IAAK,IAAIN,EAAI,EAAGA,EAAI2d,EAAWrd,SAAUN,EAAG,CAC1C,IAAI+d,EAAiBJ,EAAW3d,GAMhC,GAAIiP,EAAwB8O,GAAgBzd,OAAS,EAKnD,IALuD,IAAD,cAmBpD,GAAIwd,EAAsB/a,GAAGzC,OAAS,EAMpC,GACiD,WAA/C2O,EAAwB8O,GAAgB,IACR,WAAhCD,EAAsB/a,GAAG,IAGzB,GACEkM,EAAwB8O,GAAgB,KACxCD,EAAsB/a,GAAG,GAYzB,OATAgI,EAAWgT,GAAkBL,EAAW3a,GACxCua,GAAc,EAAIN,EAAW1c,OAE7Bod,EAAWtG,OAAOrU,EAAG,GACrB+a,EAAsB1G,OAAOrU,EAAG,KAG9BA,EATF,IAWA,YAKC,CAEH,IAAIib,EAAe/O,EACjB8O,GACAnM,QAAO,SAAUmD,GACjB,OADqB,EAAD,EACb+I,EAAsB/a,GAAGgE,QAAQgO,IAAM,KAIhD,GAAIiJ,EAAa1d,OAAS,EAAG,CAC3B,IAAI2d,EACFhP,EAAwB8O,GAAgBzd,OACtC4d,EAAWJ,EAAsB/a,GAAGzC,OASxC,GAPe6d,GADEH,EAAa1d,OAxM/B,IA4MG2d,EACAC,GA5MJ,KA0NI,OATAnT,EAAWgT,GAAkBL,EAAW3a,GACxCua,GAAc,EAAIN,EAAW1c,OAE7Bod,EAAWtG,OAAOrU,EAAG,GACrB+a,EAAsB1G,OAAOrU,EAAG,KAG9BA,EATwB,IAW1B,SAjF4C,KAK7CA,EAAI,EAAGA,EAAI2a,EAAWpd,SAAUyC,EAAG,gBAAnCA,GA4EC,OAyBhB,OAAIua,GAAc9d,EAOV,CAAN,EAAO2Y,QAAQC,QAAQ,CACrBtZ,QAAQ,EACRwe,WAAYA,EACZvS,WAAYA,EACZ3K,KAAMmd,EACNlf,MAAOof,KAGH,CAAN,EAAOtF,QAAQC,SAAS,IAzIvB,2CAmJP,OAAIkF,GAAc9d,EAOT2Y,QAAQC,QAAQ,CACrBtZ,QAAQ,EACRwe,WAAYA,EACZvS,WAAYA,EACZ3K,KAAMmd,EACNlf,MAAOof,IAGFtF,QAAQC,SAAS,GAO5B,OAAOD,QAAQC,SAAS,GAK5B,SAASM,GAAoB6E,EAAWG,EAAYX,GAWlD,IANA,IAAIjD,EAAgByD,EAChBa,EAAY,GAKPpe,EAAI,EAAGA,EAAI8Z,EAAczV,KAAK/D,SAAUN,EAAG,CAElD,IADA,IAAIuD,EAAU,GACLR,EAAI,EAAGA,EAAI+W,EAAczV,KAAKrE,GAAG2F,MAAMrF,SAAUyC,EAAG,CAC3D,IAAIsb,EAAczB,GAAc9C,EAAczV,KAAKrE,GAAG2F,MAAM5C,GAAG+C,WAG/D,GAAU,IAAN9F,EAQF,IANA,IAAIse,EAAcxE,EAAczV,KAAKrE,GAAG2F,MAAM5C,GAAGwb,qBAC/C,KAKOlI,EAAI,EAAGA,EAAIiI,EAAYhe,SAAU+V,EACxC,GAC+B,KAA7BiI,EAAYjI,GAAGvQ,WACiB,MAAhCwY,EAAYjI,GAAGvQ,UAAU,GACzB,CACA,IAAI0Y,EAAYF,EAAYjI,GAAGlY,KAAK2e,MAAM,KAG1CuB,EAAcG,EAAUA,EAAUle,OAAS,GAOjD,IAAIme,EAAa3E,EAAczV,KAAKrE,GAAG2F,MAAM5C,GAAG2b,QAC5CC,EAAa7E,EAAczV,KAAKrE,GAAG2F,MAAM5C,GAAG6b,QAEhDrb,EAAQtD,KAAK,CACXG,KAAMie,EACNK,QAASD,EACTG,QAASD,IAGbP,EAAUne,KAAKsD,GAIjB,IAAK,IAAIvD,EAAI,EAAGA,EAAIoe,EAAU9d,SAAUN,EACtC,IAAK,IAAI+C,EAAI,EAAGA,EAAIqb,EAAUpe,GAAGM,SAAUyC,EAAG,CAC5C,IAAIsb,EAAcD,EAAUpe,GAAG+C,GAAG3C,KAClC,GAAIge,EAAUpe,GAAG+C,GAAG6b,QAAU,EAC5B,IAAK,IAAIvI,EAAI,EAAGA,EAAI+H,EAAUpe,GAAG+C,GAAG6b,UAAWvI,EAC7C+H,EAAUpe,GAAGoX,OAAOrU,EAAI,EAAG,EAAG,CAC5B3C,KAAMie,EACNK,QAAS,EACTE,QAAS,IAQnB,IAAK,IAAI5e,EAAI,EAAGA,EAAIoe,EAAU9d,SAAUN,EACtC,IAAK,IAAI+C,EAAI,EAAGA,EAAIqb,EAAUpe,GAAGM,SAAUyC,EAAG,CAC5C,IAAIsb,EAAcD,EAAUpe,GAAG+C,GAAG3C,KAClC,GAAIge,EAAUpe,GAAG+C,GAAG2b,QAAU,EAC5B,IAAK,IAAIrI,EAAI,EAAGA,EAAI+H,EAAUpe,GAAG+C,GAAG2b,UAAWrI,EAEzCrW,EAAIqW,EAAI+H,EAAU9d,QACpB8d,EAAUpe,EAAIqW,GAAGe,OAAOrU,EAAG,EAAG,CAC5B3C,KAAMie,EACNK,QAAS,EACTE,QAAS,IAYrB,IAAIzO,EAAe,GAGf0O,EAAgBpK,KAAK/U,IAAI,EAAG0e,EAAU9d,OAAS,GAYnD,QAAmB0Q,IAAf0M,EAA0B,CAC5BA,EAAa,GACb,IAAK,IAAI3a,EAAI,EAAGA,EAAIqb,EAAU,GAAG9d,SAAUyC,EACzC2a,EAAWzd,KAAK8C,GAKpB,IAAK,IAAIA,EAAI,EAAGA,EAAI2a,EAAWpd,SAAUyC,EAOvC,IAJA,IAAI+b,EAAcpB,EAAW3a,GAIpB/C,EAAI,EAAGA,GAAK6e,IAAiB7e,EAAG,CAEvC,IAOI+e,OAC4B/N,IAA9BoN,EAAUpe,GAAG8e,GACT,cACArN,GAAa2M,EAAUpe,GAAG8e,GAAa1e,MAS7C,GAAKoX,MAAMC,OAAOsH,KAA2B,KAAbA,EAI3B,GAAIA,EAASze,OAAS,GACzB6P,EAAalQ,KAAKkY,QAAQC,QAAQ,CAAC,cAGhC,MAEcpH,IAAb+N,GAAuC,KAAbA,IAC5BA,EAAW,eAQb,IAIIzL,EAzCJ,gFAsCE,+CACAyL,EACA,iLAtCF,mIAiDA5O,EAAalQ,KAAKuR,EAAU8B,SAhC5BnD,EAAalQ,KAAKkY,QAAQC,QAAQ,CAAC,YAsCzC,OAAO/H,EAAgBF,GAAcG,MAAK,SAACC,GAQzC,IADA,IAAIyO,EAAkB,GACbjc,EAAI,EAAGA,EAAI2a,EAAWpd,SAAUyC,EAAG,CAE1C,IAAIkc,EAAiB,GAErB,QAAkCjO,IAA9BT,EAAOsO,EAAgB9b,GACzB,QAAqCiO,IAAjCT,EAAOsO,EAAgB9b,GAAG,GACS,WAAjCwN,EAAOsO,EAAgB9b,GAAG,GAC5Bic,EAAgB/e,KAAK,CAAC,WAGkB,SAAjCsQ,EAAOsO,EAAgB9b,GAAG,IACjCic,EAAgB/e,KAAK,QAWpB,CACH,IAAK,IAAID,EAAI,EAAGA,EAAI6e,IAAiB7e,EAAG,CAItC,IAHA,IAAIkf,EAAe,GAEfrG,EAAetI,EAAOsO,EAAgB9b,EAAI/C,GAAG4S,QAAQC,SAChDwD,EAAI,EAAGA,EAAIwC,EAAavY,SAAU+V,EACzC6I,EAAajf,KAAK4Y,EAAaxC,GAAGlE,EAAE9S,MAAM0G,MAAM,KAElDkZ,EAAc,YAAO,IAAIxE,IAAJ,sBAAYwE,GAAmBC,KAEtDF,EAAgB/e,KAAKgf,IAa3B,OAAO9G,QAAQC,QAAQ4G,MAW3B,SAAS9F,GAAiBiG,EAAkBrG,GAO1C,IANA,IAAIgB,EAAgBqF,EAChBf,EAAY,GAKPpe,EAAI,EAAGA,EAAI8Z,EAAczV,KAAK/D,SAAUN,EAAG,CAElD,IADA,IAAIuD,EAAU,GACLR,EAAI,EAAGA,EAAI+W,EAAczV,KAAKrE,GAAG2F,MAAMrF,SAAUyC,EAAG,CAC3D,IAAIsb,EAAczB,GAAc9C,EAAczV,KAAKrE,GAAG2F,MAAM5C,GAAG+C,WAE/D,GAAI9F,EAAI,EAQN,IANA,IAAIse,EAAcxE,EAAczV,KAAKrE,GAAG2F,MAAM5C,GAAGwb,qBAC/C,KAKOlI,EAAI,EAAGA,EAAIiI,EAAYhe,SAAU+V,EACxC,GAC+B,KAA7BiI,EAAYjI,GAAGvQ,WACiB,MAAhCwY,EAAYjI,GAAGvQ,UAAU,GACzB,CACA,IAAI0Y,EAAYF,EAAYjI,GAAGlY,KAAK2e,MAAM,KAG1CuB,EAAcpX,mBAAmBuX,EAAUA,EAAUle,OAAS,IAOpE,IAAIme,EAAa3E,EAAczV,KAAKrE,GAAG2F,MAAM5C,GAAG2b,QAC5CC,EAAa7E,EAAczV,KAAKrE,GAAG2F,MAAM5C,GAAG6b,QAEhDrb,EAAQtD,KAAK,CACXG,KAAMie,EACNvU,OAAQgP,EACR4F,QAASD,EACTG,QAASD,IAGbP,EAAUne,KAAKsD,GAIjB,IAAK,IAAIvD,EAAI,EAAGA,EAAIoe,EAAU9d,SAAUN,EACtC,IAAK,IAAI+C,EAAI,EAAGA,EAAIqb,EAAUpe,GAAGM,SAAUyC,EAAG,CAC5C,IAAIsb,EAAcD,EAAUpe,GAAG+C,GAAG3C,KAClC,GAAIge,EAAUpe,GAAG+C,GAAG6b,QAAU,EAC5B,IAAK,IAAIvI,EAAI,EAAGA,EAAI+H,EAAUpe,GAAG+C,GAAG6b,UAAWvI,EAC7C+H,EAAUpe,GAAGoX,OAAOrU,EAAI,EAAG,EAAG,CAC5B3C,KAAMie,EACNvU,OAAQgP,EACR4F,QAASN,EAAUpe,GAAG+C,GAAG2b,QACzBE,QAAS,IAQnB,IAAK,IAAI5e,EAAI,EAAGA,EAAIoe,EAAU9d,SAAUN,EACtC,IAAK,IAAI+C,EAAI,EAAGA,EAAIqb,EAAUpe,GAAGM,SAAUyC,EAAG,CAC5C,IAAIsb,EAAcD,EAAUpe,GAAG+C,GAAG3C,KAClC,GAAIge,EAAUpe,GAAG+C,GAAG2b,QAAU,EAC5B,IAAK,IAAIrI,EAAI,EAAGA,EAAI+H,EAAUpe,GAAG+C,GAAG2b,UAAWrI,EAEzCrW,EAAIqW,EAAI+H,EAAU9d,QACpB8d,EAAUpe,EAAIqW,GAAGe,OAAOrU,EAAG,EAAG,CAC5B3C,KAAMie,EACNvU,OAAQgP,EACR4F,QAAS,EACTE,QAAS,IASrBR,EAAU,GAAGhH,OAAO,EAAG,EAAG,CACxBhX,KAAM,YACN0J,OAAQgP,EACR4F,QAAS,EACTE,QAAS,IAEX,IAAK,IAAI5e,EAAI,EAAGA,EAAIoe,EAAU9d,SAAUN,EACtCoe,EAAUpe,GAAGoX,OAAO,EAAG,EAAG,CACxBhX,KAAM0Y,EACNhP,OAAQ,OACR4U,QAAS,EACTE,QAAS,IAGb,OAAOR,EAQT,SAASnE,GAAalV,GAIpB,IADA,IAAItC,EAAc,GACTM,EAAE,EAAEA,EAAEgC,EAAiB,GAAGzE,SAASyC,EAC1CN,EAAYxC,KACV,CAAC,MAAQ8E,EAAiB,GAAGhC,GAAG3C,KAC/B,MAAQ2E,EAAiB,GAAGhC,GAAG3C,OAOpC,IAHA,IAAIgD,EAAY,GAGPpD,EAAE,EAAEA,EAAE+E,EAAiBzE,SAASN,EAAG,CAG1C,IAFA,IAAIuD,EAAU,GAELR,EAAE,EAAEA,EAAEgC,EAAiB/E,GAAGM,SAASyC,EAAG,CAE7C,IAAI3C,EAAO2E,EAAiB/E,GAAG+C,GAAG3C,KAE9B0J,EAAS,GACToO,EAAanT,EAAiB/E,GAAG+C,GAAG+G,OAAO,KAAKrH,EAAYM,GAAG1D,MAAM,KAAK0F,EAAiB/E,GAAG+C,GAAG3C,KACrG0J,EAAO7J,KAAKiY,GACZ3U,EAAQtD,KAAK,CAAC,KAAOG,EAAK,OAAS0J,IAErC1G,EAAUnD,KAAKsD,GAEjB,OAAOH,EAST,SAAS+a,GAASpJ,EAAGqK,EAAGC,EAAGC,GAIzB,IAHA,IAAIlN,EAAQ,EAERmN,EAAQC,YAAaJ,EAAGE,GACnBtf,EAAI,EAAGA,GAAK+U,IAAK/U,EACxBoS,GAAUoN,YAAaH,EAAGrf,GAAKwf,YAAaJ,EAAIC,EAAGC,EAAItf,GAAMuf,EAE/D,OAAOnN,EAMT,SAASxP,GAAWwC,GAClB,IAAIyB,EAAYzB,EACZ0B,EAAe1B,EAAI2B,QAAQ,KAO/B,OAJsB,IAAlBD,IACFD,EAAYA,EAAUd,MAAM,EAAGe,EAAa,IAGvCD,EAAUxG,QAAQ,KAAM,KA0EjC,SAASof,GAAqBC,GAK5B,IAJA,IAAI3Q,EAAmB,GAEnB4Q,EAAyBrO,IAAEC,UAAUmO,GAEhC1f,EAAI,EAAGA,EAAI2f,EAAuBrf,SAAUN,EACnD+O,EAAmBA,EAAiB0D,OAAOkN,EAAuB3f,IAQpE,GAJA+O,EAAiBkD,MAAK,SAACJ,EAAEK,GAAH,OAASL,EAAExS,MAAQ6S,EAAE7S,OAAS,EAAI,KAIpD0P,EAAiBzO,OAAS,EAC5B,IAAK,IAAIN,EAAI,EAAGA,EAAI+O,EAAiBzO,SAAUN,EAAG,CAChD,IAAI4f,EAAY7Q,EAAiB/O,EAAE,GAC/B+e,EAAWhQ,EAAiB/O,GAM5B4f,EAAUvgB,QAAU0f,EAAS1f,QAC/B0P,EAAiB/O,EAAE,GAAG6f,YAAc9Q,EAAiB/O,EAAE,GAAG6f,YAAc,EACxE9Q,EAAiB/O,EAAE,GAAGoS,MAAQqC,KAAK9U,IAAIigB,EAAUxN,MAAO2M,EAAS3M,OACjErD,EAAiBqI,OAAOpX,EAAE,KACxBA,GAKR+O,EAAiBkD,MAAK,SAACJ,EAAEK,GAAH,OAASL,EAAEgO,YAAc3N,EAAE2N,YAAc,GAAK,KAGpE,IAAK,IAAI7f,EAAI,EAAGA,EAAI+O,EAAiBzO,SAAUN,EAAG,CAChD,IAAIgW,EAAgBvB,KAAKqL,MAAM/Q,EAAiB/O,GAAG6f,YAAYF,EAAuBrf,OAAS,KAAO,IACtGyO,EAAiB/O,GAAGgW,cAAgBA,EACpCjH,EAAiB/O,GAAG0C,MAAQqM,EAAiB/O,GAAG0C,MAAQ,KAAOsT,EAAgB,IAMjF,OAAOjH,EAMT,SAASgR,GAAchU,GAIrB,IAFA,IAAIiD,EAAqB,GACrBgR,EAAqB1O,IAAEC,UAAUxF,GAC5B/L,EAAI,EAAGA,EAAIggB,EAAmB1f,SAAUN,EAAG,CAElD,IADA,IAAI2T,EAAU,GACL5Q,EAAI,EAAGA,EAAIid,EAAmBhgB,GAAGM,SAAUyC,EAAG,CAErD,IAAIkd,EAAc3O,IAAE4O,KAAKF,EAAmBhgB,GAAG+C,GAAG3C,KAAK2F,SACvD4N,EAAQqM,EAAmBhgB,GAAG+C,GAAG1D,OAAS4gB,EAK5CjR,EAAmB/O,KAAK0T,GAG1B,OAAO3E,EAKT,SAAS7C,GAAoBJ,GAE3B,IADA,IAAIM,EAAqB,GAChBrM,EAAI,EAAGA,EAAI+L,EAAezL,SAAUN,EAAG,CAC1CA,EAAI,IACNqM,GAAoB,QAGtBA,GADkD,WAA3BN,EAAe/L,GAAGZ,KAAoB,MAAQ2M,EAAe/L,GAAGX,MAAQ,MAAQ0M,EAAe/L,GAAGX,MAG3H,OAAOgN,EAYT,SAAS8T,GAAuBC,GAK9B,IAHA,IAAIC,EAAsB/O,IAAEC,UAAU6O,GAG7BpgB,EAAI,EAAGA,EAAIqgB,EAAoB/f,SAAUN,EAAG,CAKnD,IAFA,IAAI6V,EAAsB,GAEjB9S,EAAI,EAAGA,EAAIsd,EAAoB/f,SAAUyC,EAEhD,GAAI/C,IAAM+C,EAAG,CAIX,IAAIud,EAAcD,EAAoBrgB,GAAGX,MAAMkhB,cAC3CC,EAAcH,EAAoBtd,GAAG1D,MAAMkhB,eAC3CD,EAAYpQ,SAASsQ,IAAgBA,EAAYtQ,SAASoQ,KAC5DzK,EAAoB5V,KAClB,CACE,MAASogB,EAAoBtd,GAAG1D,MAChC,KAAQghB,EAAoBtd,GAAG3D,KAC/B,SAAY,YAMbihB,EAAoBrgB,GAAGqc,QAAUgE,EAAoBtd,GAAGsZ,OAA0C,KAAjCgE,EAAoBrgB,GAAGqc,OACxFgE,EAAoBrgB,GAAGgc,gBAAkBqE,EAAoBtd,GAAGiZ,eAA0D,KAAzCqE,EAAoBrgB,GAAGgc,gBAC3GnG,EAAoB5V,KAClB,CACE,MAASogB,EAAoBtd,GAAG1D,MAChC,KAAQghB,EAAoBtd,GAAG3D,KAC/B,SAAY,aAWtBihB,EAAoBrgB,GAApB,oBAAgD6V,EAGlD,OAAOwK,EAuDT,SAAShO,GAAUjN,EAAKqb,GAEtB,IADA,IAAIrO,EAAQ,EACHpS,EAAI,EAAGA,EAAIygB,EAAQngB,SAAUN,EAChCygB,EAAQzgB,GAAG8R,EAAEzS,QAAU+F,KACvBgN,EAGN,OAAOA,EAWT,SAASmC,GAAYxI,GAmBnB,IAhBA,IAAI6P,GAAQ,EAeRvI,EAAY,mCACPrT,EAAI,EAAGA,EAAI+L,EAAezL,SAAUN,EAAG,CAE9C,IAAIkD,EAAY,GAEmB,QAA/B6I,EAAe/L,GAAGgI,SACpB9E,EACE,wCACEuO,GAAa1F,EAAe/L,GAAGiI,QAC/B,IAG+B,0CAA5B8D,EAAe/L,GAAG0gB,MACzBxd,EACE,oBACE6I,EAAe/L,GAAGgI,SAClB,MACAyJ,GAAa1F,EAAe/L,GAAGkI,QAC/B,OACA6D,EAAe/L,GAAGiI,OAClB,oEAG+B,6CAA5B8D,EAAe/L,GAAG0gB,MACzBxd,EACE,oBACE6I,EAAe/L,GAAGgI,SAClB,MACAyJ,GAAa1F,EAAe/L,GAAGkI,QAC/B,OACA6D,EAAe/L,GAAGiI,OAClB,uEAG+B,0DAA5B8D,EAAe/L,GAAG0gB,MACzBxd,EACE,oBACE6I,EAAe/L,GAAGgI,SAClB,MACAyJ,GAAa1F,EAAe/L,GAAGkI,QAC/B,OACY6D,EAAe/L,GAAGiI,OAhE3B5H,QAAQ,MAAO,KAiElB,sFAG+B,wDAA5B0L,EAAe/L,GAAG0gB,MACzBxd,EACE,oBACE6I,EAAe/L,GAAGgI,SAClB,MACAyJ,GAAa1F,EAAe/L,GAAGkI,QAC/B,OACA6D,EAAe/L,GAAGiI,OAClB,kFAG+B,KAA5B8D,EAAe/L,GAAG0gB,MACzBxd,EACE,oBACE6I,EAAe/L,GAAGgI,SAClB,MACAyJ,GAAa1F,EAAe/L,GAAGkI,QAC/B,UACAuJ,GAAa1F,EAAe/L,GAAGiI,QAC/B,KAIJc,QAAQC,IAAI+C,EAAe/L,GAAG0gB,OAC9B9E,GAAQ,GAEVvI,GAAWnQ,EASb,OANAmQ,GAAW,oBAMG,IAAVuI,EACK,QAnFO,+EA+EWvI,EA9EX,mIAgGlB,SAASiC,GAAoBH,EAAWC,GAStC,IAJA,IAAIpG,EAAqB,GAGrB2R,EAAwB,GACnB3gB,EAAI,EAAGA,EAAImV,EAAU7U,SAAUN,EAAG,CACzC,IAAI4gB,EAAO7E,GACT,GACA5G,EAAUnV,GAAG4S,QAAQC,SACrB,WAEF8N,EAAsB1gB,KAAK2gB,GAE7B5R,EAAkB,QAAc+Q,GAAcY,GAC9C,IAAIE,EAA6BpB,GAAqBkB,GACtDE,EAA6BV,GAAuBU,GAIpD,IADA,IAAIC,EAAuB,GAClB9gB,EAAI,EAAGA,EAAIoV,EAAU9U,SAAUN,EAAG,CACzC,IAAI4gB,EAAO7E,GACT,GACA3G,EAAUpV,GAAG4S,QAAQC,SACrB,UAEFiO,EAAqB7gB,KAAK2gB,GAE5B5R,EAAkB,OAAa+Q,GAAce,GAC7C,IAAIC,EAA4BtB,GAAqBqB,GAQrD,OAPAC,EAA4BZ,GAAuBY,GAO5C,CACL,mBAAqB/R,EACrB,iBANqB6R,EAA2BpO,OAAOsO,I,ICn4M5CC,G,iLAlBX,OACE,yBAAK9iB,UAAU,YACb,yBAAKA,UAAU,aAIb,6BACE,kBAAC,EAAD,a,GAVMS,aCGlBsiB,IAASC,OAAO,kBAAC,GAAD,MAASpR,SAASqR,eAAe,W","file":"static/js/main.c3d65b35.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { FaCopy, FaUndo } from \"react-icons/fa\";\r\nimport { FiSettings } from \"react-icons/fi\";\r\n\r\nclass Header extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"row header-body\">\r\n          <div className=\"col-md-8\">\r\n            <a href=\"index.html\" class=\"logo\">\r\n              <b>\r\n                <span>KG</span>Wrangler\r\n              </b>\r\n            </a>\r\n          </div>\r\n          <div className=\"offset-md-2 col-md-2 row\">\r\n            <div className=\"col-md-4\">\r\n              <button\r\n                className=\"btn btn-default\"\r\n                title=\"copy table to csv\"\r\n                onClick={() => this.props.copyTable()}\r\n              >\r\n                <FaCopy className=\"logo-left-color\" />\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <button\r\n                className=\"btn btn-default\"\r\n                title=\"Union Table Settings\"\r\n              >\r\n                <FiSettings\r\n                  className=\"logo-left-color\"\r\n                  onClick={() => this.props.openModal()}\r\n                />\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <button\r\n                className=\"btn btn-default\"\r\n                title=\"undo previous action\"\r\n                onClick={() => this.props.undoPreviousStep()}\r\n              >\r\n                <FaUndo className=\"color-wrangler\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <hr class=\"header-hr\"></hr>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nclass Footer extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        {/* <hr className=\"m-0\"></hr> */}\r\n        <div className=\"text-center text-sm\">\r\n          <small>University of Waterloo, 2020</small>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport Modal from 'react-modal';\r\n// The two following lines are for range sliders\r\nimport RangeSlider from \"react-bootstrap-range-slider\";\r\nimport \"react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css\";\r\n\r\nclass SettingModal extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Modal \r\n          isOpen={this.props.showSetting}\r\n          className=\"setting-modal\"\r\n        >\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6 offset-md-3\">\r\n                <h4>Table Union Search Settings</h4>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">Semantic Mapping:</div>\r\n              <div className=\"col-md-6\">\r\n                <div onChange={(e) => this.props.toggleSemantic(e)}>\r\n                  <input\r\n                  type=\"radio\"\r\n                  value=\"enabled\"\r\n                  checked={this.props.semanticEnabled === \"enabled\"}\r\n                  />{\" \"}\r\n                  Enabled\r\n                  <input\r\n                    type=\"radio\"\r\n                    value=\"disabled\"\r\n                    checked={this.props.semanticEnabled === \"disabled\"}\r\n                  />{\" \"}\r\n                  Disabled\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">Percentage of Columns to Union:</div>\r\n              <div className=\"col-md-6\">\r\n                <RangeSlider\r\n                  value={this.props.unionCutOff}\r\n                  onChange={(e) => this.props.unionCutOffChange(e)}\r\n                  min={0}\r\n                  max={1}\r\n                  step={0.05}\r\n                />\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4 offset-md-4\">\r\n                <button onClick={() => this.props.closeModal()}>Confirm Settings</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SettingModal;\r\n","import React, { Component } from \"react\";\r\nimport Modal from 'react-modal';\r\n\r\nclass FilterModal extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n\r\n    let optionsEle = [];\r\n    for (let i=0;i<this.props.dataAndChecked.length;++i) {\r\n      optionsEle.push(\r\n        <div>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={this.props.dataAndChecked[i].checked}\r\n            onChange={(e) => this.props.toggleChecked(e, i)}\r\n          />\r\n          {niceRender(this.props.dataAndChecked[i].data)}\r\n        </div>\r\n      )\r\n    }\r\n    // console.log(optionsEle);\r\n\r\n    return (\r\n      <div>\r\n        <Modal \r\n          isOpen={this.props.showFilter}\r\n          className=\"filter-modal\"\r\n        >\r\n          <div className=\"container\">\r\n            <div>\r\n              Here is the list of data to filter from selected column.\r\n            </div>\r\n            <br />\r\n            <div className=\"checkbox-list\">\r\n              <div>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={this.props.checkAll}\r\n                  onChange={(e) => this.props.toggleAll(e)}\r\n                />\r\n                Check/Uncheck all\r\n              </div>\r\n              <br />\r\n              {optionsEle}\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-1 offset-md-9\">\r\n                <button onClick={(e) => this.props.applyFilter(e)}>OK</button>\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                <button onClick={(e) => this.props.cancelFilter(e)}>Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterModal;\r\n\r\n// This function renders data in a nicer way. \r\n// It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\nfunction niceRender(str) {\r\n  return str.replace(/_\\(.*?\\)/g, \"\")\r\n            .replace(/_/g, \" \");\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Modal from 'react-modal';\r\nimport Select from \"react-select\";\r\n\r\nclass JoinModal extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n\r\n    // let optionsEle = [];\r\n\r\n    // console.log(this.props.originColOptions);\r\n    // console.log(this.props.joinColOptions);\r\n\r\n    // Note, the props originColOptions and joinColOptions are what we are going to pass to react select as options\r\n\r\n    return (\r\n      <div>\r\n        <Modal \r\n          isOpen={this.props.showJoin}\r\n          className=\"join-modal\"\r\n        >\r\n          <div className=\"container\">\r\n            <div className=\"row\"> \r\n              <div className=\"col-md-5\">\r\n                Choose join column from table panel\r\n              </div>\r\n              <div className=\"offset-md-1 col-md-5\">\r\n                Choose join column from selected table\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <Select\r\n                className=\"col-md-5\"\r\n                value={this.props.originColOptions[this.props.originJoinIndex]}\r\n                onChange={(e) => this.props.selectJoinColumn(e, \"originTable\")}\r\n                placeholder={\"Choose Join Column\"}\r\n                options={this.props.originColOptions}\r\n                isMulti={false}\r\n              />\r\n              <Select\r\n                className=\"offset-md-1 col-md-5\"\r\n                value={this.props.joinColOptions[this.props.joinJoinIndex]}\r\n                onChange={(e) => this.props.selectJoinColumn(e, \"joinTable\")}\r\n                placeholder={\"Choose Join Column\"}\r\n                options={this.props.joinColOptions}\r\n                isMulti={false}\r\n              />\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-1 offset-md-9\">\r\n                <button onClick={(e) => this.props.runJoin(e)}>OK</button>\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                <button onClick={(e) => this.props.cancelJoin(e)}>Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JoinModal;\r\n","import React, { Component } from \"react\";\r\n\r\nclass URLForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.handleURLPaste = this.handleURLPaste.bind(this);\r\n  }\r\n\r\n  handleURLPaste(e) {\r\n    e.preventDefault();\r\n    let urlPasted = (e.clipboardData || window.clipboardData).getData(\"text\");\r\n    this.props.handleURLPaste(urlPasted);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row text-center\">\r\n          <div className=\"col-md-6 offset-md-3\">\r\n            <input\r\n              placeholder=\"e.g., https://en.wikipedia.org/wiki/Canada\"\r\n              onPaste={this.handleURLPaste}\r\n              className=\" form-control\"\r\n            ></input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default URLForm;\r\n","import React, { Component } from \"react\";\r\nimport URLForm from \"../components/URLForm\";\r\n\r\nclass LandingPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div class=\"landing-page\">\r\n          <div class=\" row text-center\">\r\n            <div class=\"white-form col-md-5\">\r\n              <h1 class=\"\"> Welcome!</h1>\r\n              <hr className=\"header-hr\"></hr>\r\n              <h4>Enter the URL of a Wikipedia page and start wrangling!</h4>\r\n              <URLForm handleURLPaste={this.props.handleURLPaste} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LandingPage;\r\n","import React, { Component } from \"react\";\r\n// import TableSelection from \"../components/TableSelection\";\r\n// import Tooltip from '@atlaskit/tooltip';\r\n// import Select from \"react-select\";\r\n// import { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport { FaSearch, FaEdit, FaPlus, FaMinus, FaFilter, FaArrowDown, FaEllipsisH} from \"react-icons/fa\";\r\n\r\nclass TablePanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showFullTitle: false, // boolean storing whether we want to display the full title for the first column, in the startSubject case\r\n    };\r\n    this.createSuperTable = this.createSuperTable.bind(this);\r\n    this.createSelectedTableView = this.createSelectedTableView.bind(this);\r\n    // The following functions are for first column's display in the startSubject case. They are helpers for columnHeaderGen\r\n    this.showFullTitle = this.showFullTitle.bind(this);\r\n    this.showPartialTitle = this.showPartialTitle.bind(this);\r\n  }\r\n\r\n  showFullTitle() {\r\n    this.setState({\r\n      showFullTitle: true,\r\n    })\r\n  }\r\n\r\n  showPartialTitle() {\r\n    this.setState({\r\n      showFullTitle: false,\r\n    })\r\n  }\r\n\r\n  // This function creates the i-th column header from this.props.tableHeader[i]\r\n  // It is a helper function for createSuperTable\r\n\r\n  columnHeaderGen(colIndex) {\r\n    // console.log(colIndex);\r\n    // console.log(this.props.tableHeader);\r\n\r\n    // In this case we deal with the first column header\r\n    // We want to divide it into two subcases: \"start table\" vs. \"start subject\"\r\n    if (colIndex === 0) {\r\n      // First subcase is start table\r\n      if (this.props.tableHeader.length > 0 && \r\n          this.props.tableHeader[0].length === 1 && \r\n          this.props.tableHeader[0][0].label === \"OriginURL\") {\r\n        let textLiteral = \"\";\r\n        for (let i = 0; i < this.props.tableHeader[0].length; ++i) {\r\n          let textToAdd = i > 0 ? \"\\nAND \" + niceRender(this.props.tableHeader[0][i].label) : niceRender(this.props.tableHeader[0][i].label);\r\n          textLiteral+=textToAdd;\r\n        }\r\n        let textEle = \r\n          <div>\r\n            {textLiteral}\r\n          </div>\r\n        return textEle;\r\n      }\r\n      // Second subcase is start subject\r\n      else {\r\n        // In this subcase, we first check if firstColHeaderInfo has length < 2\r\n        let firstColHeaderInfo = this.props.firstColHeaderInfo;\r\n\r\n        // If yes, we simply display it\r\n        if (firstColHeaderInfo.length < 2) {\r\n          let textLiteral = [];\r\n          for (let i = 0; i < firstColHeaderInfo.length; ++i) {\r\n            let curText = \"\";\r\n            for (let j = 0; j < firstColHeaderInfo[i].length; ++j) {\r\n              let textToAdd = j > 0 ? \"\\nAND \" + niceRender(firstColHeaderInfo[i][j].label) : niceRender(firstColHeaderInfo[i][j].label);\r\n              curText+=textToAdd;\r\n            }\r\n            textLiteral.push(\r\n              <p>\r\n                {curText}\r\n              </p>\r\n            )\r\n          }\r\n          let textEle = \r\n            <div>\r\n              {textLiteral}\r\n            </div>\r\n          return textEle;\r\n        }\r\n\r\n        // Else, firstColHeaderInfo has length longer than 1, so we have to check this.state.showFullTitle\r\n        // what we render depends on whether this.state.showFullTitle is true or not\r\n        else {\r\n          let showFullTitle = this.state.showFullTitle;\r\n\r\n          // If showFullTitle is false, we display the first element from firstColHeaderInfo\r\n          // As well as an icon that, on hover, sets showFullTitle to true\r\n          if (showFullTitle === false) {\r\n            let textLiteral = [];\r\n            let curText = \"\";\r\n            for (let j = 0; j < firstColHeaderInfo[0].length; ++j) {\r\n              let textToAdd = j > 0 ? \"\\nAND \" + niceRender(firstColHeaderInfo[0][j].label) : niceRender(firstColHeaderInfo[0][j].label);\r\n              curText+=textToAdd;\r\n            }\r\n            textLiteral.push(\r\n              <p>\r\n                {curText}\r\n                {\"\\u00A0\"}\r\n                <FaEllipsisH \r\n                  onMouseEnter={() => this.showFullTitle()}\r\n                  onMouseLeave={() => this.showPartialTitle()}\r\n                />\r\n              </p>\r\n            )\r\n            let textEle = \r\n              <div>\r\n                {textLiteral}\r\n              </div>\r\n            return textEle;\r\n          }\r\n          // If showFullTitle is true, we display the full table header for the first column\r\n          else {\r\n            let textLiteral = [];\r\n            for (let i = 0; i < firstColHeaderInfo.length; ++i) {\r\n              let curText = \"\";\r\n              for (let j = 0; j < firstColHeaderInfo[i].length; ++j) {\r\n                let textToAdd = j > 0 ? \"\\nAND \" + niceRender(firstColHeaderInfo[i][j].label) : niceRender(firstColHeaderInfo[i][j].label);\r\n                curText+=textToAdd;\r\n              }\r\n              if (i === 0) {\r\n                textLiteral.push(\r\n                  <p>\r\n                    {curText}\r\n                    {\"\\u00A0\"}\r\n                    <FaEllipsisH \r\n                      onMouseEnter={() => this.showFullTitle()}\r\n                      onMouseLeave={() => this.showPartialTitle()}\r\n                    />\r\n                  </p>\r\n                )\r\n              }\r\n              else {\r\n                textLiteral.push(\r\n                  <p>\r\n                    {curText}\r\n                  </p>\r\n                )\r\n              }\r\n            }\r\n            let textEle = \r\n              <div>\r\n                {textLiteral}\r\n              </div>\r\n            return textEle;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // In this case we deal with non-first column headers\r\n    else {\r\n      let textLiteral = \"\";\r\n      for (let i = 0; i < this.props.tableHeader[colIndex].length; ++i) {\r\n        let textToAdd = \r\n          this.props.tableHeader[colIndex][i].type === \"object\" ? \"is \" + this.props.tableHeader[colIndex][i].value + \" of\" \r\n          : this.props.tableHeader[colIndex][i].value;\r\n        textToAdd = i > 0 ? \"\\nOR \" + textToAdd : textToAdd;\r\n        textLiteral+=textToAdd;\r\n      }\r\n      let textEle = \r\n        <div>\r\n          {textLiteral}\r\n        </div>\r\n      return textEle;\r\n    }\r\n  }\r\n\r\n  // This function takes the states tableData, keyColIndex, tableHeader, optionsMap\r\n  // And convert them into HTML for the super table\r\n\r\n  createSuperTable() {\r\n\r\n    // console.log(this.props.firstColHeaderInfo);\r\n    // console.log(\"Has first column been filled? \" + this.props.firstColFilled);\r\n    // console.log(this.props.tableData);\r\n    // console.log(\"The current previewColIndex is \"+this.props.previewColIndex);\r\n    \r\n    const rowNum = this.props.tableData.length;\r\n    const colNum = this.props.tableData[0].length;\r\n\r\n    let table = [];\r\n\r\n    // This part creates the table header row\r\n\r\n    let tempRow = [];\r\n    for (let colIndex = 0; colIndex < colNum; ++colIndex) {\r\n      let tempHeader;\r\n      // This part deals with the column 0 \r\n      if (colIndex === 0) {\r\n        let buttonsEle = null;\r\n        let textEle = <div><br /></div>;\r\n        if (this.props.firstColFilled === true) {\r\n          // If we have filled in the first column already, then we can generate its header text\r\n          textEle = this.columnHeaderGen(colIndex);\r\n          // Moreover, if the first column head is not [\"OriginURL\"], then we can create the button element\r\n          if (this.props.tableHeader[0][0].value !== \"OriginURL\") {\r\n            buttonsEle = \r\n              <div>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Add entities\"\r\n                  onClick={() => this.props.handlePlusClick()}\r\n                >\r\n                  <FaArrowDown />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Set as key column\"\r\n                  onClick={(e) => this.props.contextSetColumn(e, colIndex)}\r\n                >\r\n                  <FaSearch />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Add column to the right\"\r\n                  onClick={(e) => this.props.contextAddColumn(e, colIndex)}\r\n                >\r\n                  <FaPlus />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Filter this column\"\r\n                  onClick={(e) => this.props.showFilterMethods(e, colIndex)}\r\n                >\r\n                  <FaFilter />\r\n                </button>\r\n                {/* <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Delete this column\"\r\n                  // onClick={(e) => this.props.contextSetColumn(e, colIndex)}\r\n                >\r\n                  <FaMinus />\r\n                </button> */}\r\n              </div>\r\n          }\r\n          else {\r\n            buttonsEle =\r\n              <div>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Add column to the right\"\r\n                  onClick={(e) => this.props.contextAddColumn(e, colIndex)}\r\n                >\r\n                  <FaPlus />\r\n                </button>\r\n              </div>\r\n          }\r\n        }\r\n        tempHeader = (\r\n          <th className=\"table-head\">\r\n            <div\r\n              className=\"super-header-div\"\r\n            >\r\n            </div>\r\n            {buttonsEle}\r\n            {textEle}\r\n          </th>\r\n        )\r\n      }\r\n      // This part deals with key columns that are not column 0\r\n      else if (colIndex === this.props.keyColIndex) {\r\n        let textEle = this.columnHeaderGen(colIndex);\r\n        let buttonEle = <div><br /></div>;\r\n        if (this.props.firstColFilled === true) {\r\n          buttonEle = \r\n            <div>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Add column to the right\"\r\n                  onClick={(e) => this.props.contextAddColumn(e, colIndex)}\r\n                >\r\n                  <FaPlus />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Filter this column\"\r\n                  onClick={(e) => this.props.showFilterMethods(e, colIndex)}\r\n                >\r\n                  <FaFilter />\r\n                </button>\r\n            </div>\r\n        }\r\n        tempHeader = (\r\n          <th className=\"table-head\">\r\n            {buttonEle}\r\n            {textEle}\r\n          </th>\r\n        );\r\n      }\r\n      // This part deals with the non-key, non-first column headers\r\n      else {\r\n        let textEle = this.columnHeaderGen(colIndex);\r\n        let buttonEle = <div><br /></div>;;\r\n        if (this.props.firstColFilled === true) {\r\n          buttonEle = \r\n            <div>\r\n              <button\r\n                className=\"btn btn-default\"\r\n                title=\"Add entities\"\r\n                onClick={(e) => this.props.getOtherOptions(e, colIndex)}\r\n              >\r\n                <FaEdit />\r\n              </button>\r\n              <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Set as key column\"\r\n                  onClick={(e) => this.props.contextSetColumn(e, colIndex)}\r\n                >\r\n                  <FaSearch />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Add column to the right\"\r\n                  onClick={(e) => this.props.contextAddColumn(e, colIndex)}\r\n                >\r\n                  <FaPlus />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Delete this column\"\r\n                  onClick={(e) => this.props.contextDeleteColumn(e, colIndex)}\r\n                >\r\n                  <FaMinus />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  title=\"Filter this column\"\r\n                  onClick={(e) => this.props.showFilterMethods(e, colIndex)}\r\n                >\r\n                  <FaFilter />\r\n                </button>\r\n            </div>\r\n        }\r\n        tempHeader = (\r\n          <th className=\"table-head\">\r\n            {buttonEle}\r\n            {textEle}\r\n          </th>\r\n        );\r\n      }\r\n      tempRow.push(tempHeader);\r\n    }\r\n    table.push(\r\n      <thead className=\"table-head\">\r\n        <tr>{tempRow}</tr>\r\n      </thead>\r\n    );\r\n\r\n    // i corresponds to the row number, j corresponds to the column number\r\n\r\n    // We are adding an ID for each cell for contextmenu\r\n    let rows = [];\r\n    for (let i = 0; i < rowNum; i++) {\r\n      let tempRow = [];\r\n      // Inner loop to create each cell of the row\r\n      for (let j = 0; j < colNum; j++) {\r\n        // We want to treat preview columns and other columns differently\r\n\r\n        // First we deal with preview column\r\n        if (j === this.props.previewColIndex) {\r\n          let cellColor = {backgroundColor: \"LightGray\"};\r\n          tempRow.push(\r\n            <td style={cellColor}>\r\n              <input\r\n                className=\"twenty-vw column-preview-color\"\r\n                type=\"text\"\r\n                value={niceRender(this.props.tableData[i][j].previewData)}\r\n                readOnly\r\n              />\r\n            </td>\r\n          );\r\n        }\r\n        // Else we are dealing with a regular column\r\n        else {\r\n          let cellColor;\r\n          // We use light blue to represent search column\r\n          if (j === this.props.keyColIndex) {\r\n            cellColor = { backgroundColor: \"LightBlue\" };\r\n          }\r\n          // We use white to represent other columns\r\n          else {\r\n            cellColor = { backgroundColor: \"White\" };\r\n          }\r\n          // console.log(\"Current data is \"+this.props.tableData[i][j]);\r\n          tempRow.push(\r\n            <td style={cellColor}>\r\n              <input\r\n                className=\"twenty-vw\"\r\n                type=\"text\"\r\n                value={niceRender(this.props.tableData[i][j].data)}\r\n                title={niceRender(this.props.tableData[i][j].data)}\r\n                onChange={(e) => this.props.onCellChange(e, i, j)}\r\n                onDoubleClick={(e) => this.props.originPreviewPage(e, i, j)}\r\n              />\r\n            </td>\r\n          );\r\n        }\r\n      }\r\n      //Create the parent and add the children\r\n      rows.push(<tr>{tempRow}</tr>);\r\n    }\r\n    table.push(<tbody>{rows}</tbody>);\r\n    return table;\r\n  }\r\n\r\n  // This function makes no modification of the data at all.\r\n  // It takes all the data from this.props.tableDataExplore, and convert them into HTML\r\n  createSelectedTableView() {\r\n    // console.log(rowNum);\r\n    // console.log(colNum);\r\n    // console.log(this.props.tableDataExplore[0][0].data);\r\n    // console.log(this.props.tableDataExplore[0][0].origin);\r\n    const rowNum = this.props.tableDataExplore.length;\r\n    const colNum = this.props.tableDataExplore[0].length;\r\n\r\n    let table = [];\r\n\r\n    // This part creates the table header row\r\n    let tempRow = [];\r\n    for (let j = 0; j < colNum; ++j) {\r\n      let tempHeader = (\r\n        <th className=\"table-head table-col\">\r\n          {this.props.tableDataExplore[0][j].data}\r\n        </th>\r\n      );\r\n      tempRow.push(tempHeader);\r\n    }\r\n    let tableHeaderRow = <tr className=\"table-head table-col\">{tempRow}</tr>;\r\n    table.push(<thead>{tableHeaderRow}</thead>);\r\n\r\n    // i corresponds to the row number, j corresponds to the column number\r\n    let tableRows = [];\r\n    for (let i = 1; i < rowNum; i++) {\r\n      let tempRow = [];\r\n      //Inner loop to create each cell of the row\r\n      for (let j = 0; j < colNum; j++) {\r\n        // Create the each cell\r\n        tempRow.push(\r\n          <td className=\"table-col\">\r\n            {this.props.tableDataExplore[i][j].data}\r\n          </td>\r\n        );\r\n      }\r\n      //Create the parent and add the children\r\n      tableRows.push(<tr>{tempRow}</tr>);\r\n    }\r\n    table.push(<tbody>{tableRows}</tbody>);\r\n    return table;\r\n  }\r\n\r\n  render() {\r\n    let tableEle = null;\r\n\r\n    // In all cases, once we have pasted the URL. We want to display the super table in the table panel.\r\n    tableEle = (\r\n      // class table-fixed helps with sticky column headers\r\n      <div>\r\n        <table class border=\"1\" className=\"table table-sm table-bordered\">\r\n          {this.createSuperTable()}\r\n        </table>\r\n        {/* {menuArray} */}\r\n      </div>\r\n    );\r\n    return <div>{tableEle}</div>;\r\n  }\r\n}\r\n\r\nexport default TablePanel;\r\n\r\n// This function renders this.props.tableData[i][j].data in a nicer way. \r\n// It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\nfunction niceRender(str) {\r\n  return str.replace(/_\\(.*?\\)/g, \"\")\r\n            .replace(/_/g, \" \");\r\n}\r\n\r\n","// This component takes in 5 props:\r\n\r\n// 1) originTableArray: 1D array storing all tables found on pasted URL\r\n// 2) tableOpenList:    1D array storing whether each table in originTableArray has been toggled open or not\r\n// 3) toggleTable:      function that handles the toggling on/off of a table\r\n// 4) listType:         string. Has value \"select\" when we are using TableSelection to select the starting table.\r\n//                              Has value \"join\" when we are using TableSelection in the join tables setting.\r\n// 5) buttonFunction:   function corresponding to the listType.\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Collapse } from \"reactstrap\";\r\nimport { FaTable } from \"react-icons/fa\";\r\n\r\nclass TableSelection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.createButtonArray = this.createButtonArray.bind(this);\r\n  }\r\n\r\n  createButtonArray() {\r\n    const originTableArray = this.props.originTableArray;\r\n    let buttonArray = [];\r\n    for (let i = 0; i < originTableArray.length; ++i) {\r\n      // This first part create the buttons with text: table index plus column names\r\n      // It also removes some newline characters\r\n      let buttonText = \"Table \" + i + \": \";\r\n      let headerCells = originTableArray[i].rows[0].cells;\r\n      for (let j = 0; j < headerCells.length; ++j) {\r\n        let headerData = removeNewLine(headerCells[j].innerText);\r\n        if (headerData[headerData.length - 1] === \"\\n\") {\r\n          headerData = headerData.slice(0, -1);\r\n        }\r\n        buttonText = buttonText + headerData + \"| \";\r\n      }\r\n      // Now let's update the table content\r\n      let tableContent = (\r\n        <div\r\n          dangerouslySetInnerHTML={{\r\n            __html: this.props.originTableArray[i].outerHTML,\r\n          }}\r\n        />\r\n      );\r\n      let selectButton;\r\n      if (this.props.tableOpenList[i] === true) {\r\n        let buttonText = \"\";\r\n        if (this.props.listType === \"select\") {\r\n          buttonText = \"Select\";\r\n        }\r\n        else {\r\n          buttonText = \"Join\"\r\n        }\r\n        selectButton = \r\n          <button\r\n            onClick={(e) => this.props.buttonFunction(e, i)}\r\n          >\r\n            {buttonText}\r\n          </button>\r\n      }\r\n      buttonArray.push(\r\n        <li\r\n          className=\"list-group-item\"\r\n        >\r\n        <span \r\n          onClick={(e) => this.props.toggleTable(e, i)}\r\n        >\r\n          {buttonText} {}\r\n          <FaTable />\r\n        </span>\r\n        {selectButton}\r\n          <Collapse isOpen={this.props.tableOpenList[i]}>\r\n            <div>{tableContent}</div>\r\n          </Collapse>\r\n        </li>\r\n      );\r\n    }\r\n    return (\r\n      <ul className=\"list-group list-css list-group-flush\">{buttonArray}</ul>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const numTables = this.props.originTableArray.length;\r\n    let originTableArrayEle = null;\r\n    if (numTables !== 0) {\r\n      originTableArrayEle = <div>{this.createButtonArray()}</div>;\r\n    }\r\n    return <div>{originTableArrayEle}</div>;\r\n  }\r\n}\r\n\r\nexport default TableSelection;\r\n\r\nfunction removeNewLine(str) {\r\n  if (str[str.length - 1] === \"\\n\") {\r\n    return str.slice(0, -1);\r\n  } else {\r\n    return str;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Collapse, CardBody, Card } from \"reactstrap\";\r\nimport { FaList } from \"react-icons/fa\";\r\nimport TableSelection from \"../components/TableSelection\";\r\n\r\nclass TaskMenu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const subject = niceRender(reverseReplace(this.props.urlPasted.slice(30)));\r\n    return (\r\n      <div>\r\n        <ul class=\"list-group list-css list-group-flush\">\r\n          <hr className=\"m-0\"></hr>\r\n          <li\r\n            className=\"list-group-item\"\r\n            onClick={(e) => this.props.handleStartSubject(e, \"startSubject\")}\r\n          >\r\n            Start creating a table about {decodeURIComponent(subject)}\r\n          </li>\r\n          <li\r\n            className=\"list-group-item\"\r\n          >\r\n            <span \r\n              onClick={() => this.props.toggleTableSelection()}\r\n            >\r\n              Start with an existing table from page <FaList />\r\n            </span>\r\n\r\n            <Collapse isOpen={this.props.showTableSelection}>\r\n              <CardBody>\r\n                <Card>\r\n                  <div>\r\n                    <TableSelection\r\n                      originTableArray={this.props.originTableArray}\r\n                      tableOpenList={this.props.tableOpenList}\r\n                      toggleTable={this.props.toggleTable}\r\n                      buttonFunction={this.props.handleStartTable}\r\n                      listType={\"select\"}\r\n                    />\r\n                  </div>\r\n                </Card>\r\n              </CardBody>\r\n            </Collapse>\r\n          </li>\r\n          <hr className=\"m-0\"></hr>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskMenu;\r\n\r\n// This function changes the copied text \"%E2%80%93\" to \"-\" when we copy a URL from google. \r\n\r\nfunction reverseReplace(str) {\r\n  return str.replace(/%E2%80%93/, \"–\");\r\n}\r\n\r\n// This function renders this.props.tableData[i][j].data in a nicer way. \r\n// It changes\"_\" to \" \", and removes everything after the first occurence of (\r\n\r\n  function niceRender(str) {\r\n    let resultStr = str;\r\n    let bracketIndex = str.indexOf(\"(\");\r\n    // If ( is present in a string, we want to remove it\r\n    // We include the -1 because usually ( is preceeded by _\r\n    if (bracketIndex !== -1) {\r\n      resultStr = resultStr.slice(0, bracketIndex-1);\r\n    }\r\n    // now we turn all \"_\" into \" \"\r\n    return resultStr.replace(/_/g, \" \");\r\n  }\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass FirstColSelection extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.createFirstColSelection = this.createFirstColSelection.bind(this);\r\n  }\r\n\r\n  createFirstColSelection() {\r\n    let keyCheckedIndex = this.props.keyCheckedIndex;\r\n    let firstColSelection = this.props.firstColSelection;\r\n    let firstColChecked = this.props.firstColChecked;\r\n\r\n    let populateEle = null;\r\n\r\n    let selectedNeighbours = [];\r\n    // We will create the selectedNeighbours array from this.props.firstColSelection and this.props.firstColChecked\r\n    if (firstColChecked.length !== firstColSelection.length) {\r\n      alert(\"Some error exists\");\r\n    }\r\n    for (let i = 0; i < firstColChecked.length; ++i) {\r\n      if (firstColChecked[i] === true) {\r\n        selectedNeighbours.push(firstColSelection[i]);\r\n      }\r\n    }\r\n\r\n    // console.log(selectedNeighbours);\r\n\r\n    // If selectedNeighbours is not empty, we have to create the populateText and populateEle\r\n    if (keyCheckedIndex !== -1 && selectedNeighbours.length > 0) {\r\n      let populateText = \r\n        this.props.firstColFilled === false ? \"Populate first column with entities that\"\r\n        : \"Add to first column with entities that\";\r\n      for (let i = 0; i < selectedNeighbours.length; ++i) {\r\n        let curText = i > 0 ? \", and\" : \"\";\r\n        if (selectedNeighbours[i].pDataset === \"dct\") {\r\n          curText = curText + \" are \" + niceRender(selectedNeighbours[i].oValue);\r\n        }\r\n        else {\r\n          curText = curText + \" have \" + selectedNeighbours[i].pValue + \"=\" + niceRender(selectedNeighbours[i].oValue);\r\n        }\r\n        populateText+=curText;\r\n      }\r\n      populateText+=\"?\";\r\n      // We conditionally create the button element\r\n      // If firstColFilled is false, we want to run populateKeyColumn\r\n      // Otherwise, we want to run addKeyColumn\r\n      let buttonEle = \r\n        this.props.firstColFilled === false ? <Button onClick={(e) => this.props.populateKeyColumn(e, 0, selectedNeighbours)}>OK</Button>\r\n        : <Button onClick={(e) => this.props.confirmAddFirstCol(e, selectedNeighbours)}>OK</Button>;\r\n      populateEle = \r\n        <div>\r\n          <div><b>{populateText}</b></div>\r\n          {buttonEle}\r\n        </div>\r\n    }\r\n\r\n    let returnEle = [];\r\n    // We loop over the firstColSelection array, and push on the needed radio checkbox and textual information\r\n    for (let i = 0; i < firstColSelection.length; ++i) {\r\n      // additionEle is basically a copy of populateEle\r\n      let additionEle = i === keyCheckedIndex ? populateEle: null;\r\n      if (firstColSelection[i].pValue === \"category\") {\r\n        returnEle.push(\r\n          <div>\r\n            <div>\r\n              <p>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={firstColChecked[i]}\r\n                  onChange={(e) => this.props.toggleFirstNeighbour(e, i)}\r\n                />\r\n                {'\\u00A0'}{'\\u00A0'}\r\n                {niceRender(firstColSelection[i].oValue)}\r\n              </p>\r\n            </div>\r\n            {additionEle}\r\n          </div>\r\n        )\r\n      }\r\n      else {\r\n        returnEle.push(\r\n          <div>\r\n            <div>\r\n              <p>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={firstColChecked[i]}\r\n                  onChange={(e) => this.props.toggleFirstNeighbour(e, i)}\r\n                />\r\n                {'\\u00A0'}{'\\u00A0'}\r\n                {firstColSelection[i].pValue}\r\n                {\":\"}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}\r\n                {niceRender(firstColSelection[i].oValue)}\r\n              </p>\r\n            </div>\r\n            {additionEle}\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n    return returnEle;\r\n  }\r\n\r\n  render() {\r\n\r\n    let selectionEle = this.createFirstColSelection();\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <p><b>Choose from attributes below</b> to determine the content for the first column</p>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          {selectionEle}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FirstColSelection;\r\n\r\n// This function renders this.props.tableData[i][j].data in a nicer way. \r\n// It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\nfunction niceRender(str) {\r\n  return str.replace(/_\\(.*?\\)/g, \"\")\r\n            .replace(/_/g, \" \");\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass OtherColSelection extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.createOtherColSelection = this.createOtherColSelection.bind(this);\r\n  }\r\n\r\n  createOtherColSelection() {\r\n    let otherColSelection = this.props.otherColSelection;\r\n    let otherColChecked = this.props.otherColChecked;\r\n    let otherCheckedIndex = this.props.otherCheckedIndex;\r\n\r\n    // console.log(otherColSelection);\r\n    // console.log(otherColChecked);\r\n    // console.log(otherCheckedIndex);\r\n\r\n    // First do some basic error checking\r\n    if (otherColChecked.length !== otherColSelection.length) {\r\n      console.log(\"Some error exists\");\r\n    }\r\n\r\n    // Now, we will create the selectedNeighbours array from otherColSelection and otherColChecked\r\n    let selectedNeighbours = [];\r\n    for (let i = 0; i < otherColChecked.length; ++i) {\r\n      if (otherColChecked[i] === true) {\r\n        selectedNeighbours.push(otherColSelection[i]);\r\n      }\r\n    }\r\n\r\n    // If selectedNeighbours is not empty, we have to create the populateText and populateEle\r\n    let populateEle = null;\r\n    if (otherCheckedIndex !== -1 && selectedNeighbours.length > 0) {\r\n      let populateText = \"Populate this column with attributes \";\r\n      for (let i = 0; i < selectedNeighbours.length; ++i) {\r\n        let curText = selectedNeighbours[i].type === \"object\" ? \"is \" + selectedNeighbours[i].value + \" of\" : selectedNeighbours[i].value;\r\n        curText = i > 0 ? \" OR \" + curText : curText;\r\n        populateText+=curText;\r\n      }\r\n      populateText+=\"?\";\r\n      populateEle = \r\n        <div>\r\n          <div><b>{populateText}</b></div>\r\n          <Button onClick={(e) => this.props.populateOtherColumn(e, this.props.colIndex, selectedNeighbours)}>OK</Button> \r\n        </div>\r\n    }\r\n\r\n    let returnEle = [];\r\n    // We loop through the otherColSelection array, and push on the needed radio checkbox and textual information\r\n    for (let i = 0; i < otherColSelection.length; ++i) {\r\n      let additionEle = i === otherCheckedIndex ? populateEle : null;\r\n      returnEle.push(\r\n        <div>\r\n          <div>\r\n            <p>\r\n              <input  \r\n                type=\"checkbox\"\r\n                checked={otherColChecked[i]}\r\n                onChange={(e) => this.props.toggleOtherNeighbour(e, i, this.props.colIndex)}\r\n              />\r\n              {'\\u00A0'}{'\\u00A0'}\r\n              {otherColSelection[i].label}\r\n            </p>\r\n          </div>\r\n          {additionEle}\r\n        </div>\r\n      )\r\n    }\r\n    return returnEle;\r\n  }\r\n\r\n  render() {\r\n\r\n    let selectionEle = this.createOtherColSelection();\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <p><b>Choose from attributes below</b> to determine the content for this column</p>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          {selectionEle}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OtherColSelection;\r\n\r\n","import React, { Component } from \"react\";\r\nimport { FaPlus, FaMinus } from \"react-icons/fa\";\r\n\r\nclass PreviewOrigin extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.createPreviewEle = this.createPreviewEle.bind(this);\r\n    this.createOriginEle = this.createOriginEle.bind(this);\r\n  }\r\n\r\n  createPreviewEle() {\r\n    let previewInfoExpanded = this.props.previewInfoExpanded;\r\n    let previewInfoArray = this.props.previewInfoArray;\r\n    // We do some preliminary error checking\r\n    if (previewInfoExpanded.length !== previewInfoArray.length) {\r\n      alert(\"Some error exists!\");\r\n    }\r\n\r\n    // Move on to actual body of the function\r\n    let previewEle = [];\r\n    for (let i = 0; i < previewInfoArray.length; ++i) {\r\n      // First case: the current previewInfoArray element's value array only has one element. We just want to show some text.\r\n      if (previewInfoArray[i].value.length === 1) {\r\n        previewEle.push(\r\n          <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <b>{previewInfoArray[i].key}:</b>\r\n              </div>\r\n              <div className=\"col-md-7\">\r\n                {niceRender(previewInfoArray[i].value[0])}\r\n              </div>\r\n            </div>\r\n            <br />\r\n          </div>\r\n        )\r\n      } \r\n      // Second case: the current previewInfoArray element's value array has more than one element.\r\n      // In this case we have to check for the previewInfoExpanded's variable.\r\n      else {\r\n        // Subcase one: previewInfoExpanded[i] is false, which means we want to push on one element only, and show a plus button\r\n        if (previewInfoExpanded[i] === false) {\r\n          previewEle.push(\r\n            <div>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <b>{previewInfoArray[i].key}:</b>\r\n                </div>\r\n                <div className=\"col-md-7\">\r\n                  {niceRender(previewInfoArray[i].value[0])}\r\n                </div>\r\n                <div className=\"col-md-1\">\r\n                  <button\r\n                    className=\"btn btn-default\"\r\n                    onClick={(e) => this.props.togglePreviewElement(e, i)}\r\n                  >\r\n                    <FaPlus />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <br />\r\n            </div>\r\n          )\r\n        }\r\n        // Subcase one: previewInfoExpanded[i] is true, which means we want to push on value.length number of elements.\r\n        // In this case we want to give a minus, or collapse icon\r\n        else {\r\n          // We first push on the first element(or row), which will include the minus icon\r\n          previewEle.push(\r\n            <div>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <b>{previewInfoArray[i].key}:</b>\r\n                </div>\r\n                <div className=\"col-md-7\">\r\n                  {niceRender(previewInfoArray[i].value[0])}\r\n                </div>\r\n                <div className=\"col-md-1\">\r\n                  <button\r\n                    className=\"btn btn-default\"\r\n                    onClick={(e) => this.props.togglePreviewElement(e, i)}\r\n                  >\r\n                    <FaMinus />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n          // We then push on the subsequent values\r\n          for (let j = 1; j < previewInfoArray[i].value.length; ++j) {\r\n            let brEle = j === previewInfoArray[i].value.length - 1 ? <br /> : null;\r\n            previewEle.push(\r\n              <div>\r\n                <div className=\"row\">\r\n                  <div className=\"offset-md-4 col-md-7\">\r\n                    {niceRender(previewInfoArray[i].value[j])}\r\n                  </div>\r\n                </div>\r\n                {brEle}\r\n              </div>\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n    let returnEle = (\r\n      <div>\r\n        <p>Preview of <b>{niceRender(this.props.selectedCell.data)}</b> is:</p>\r\n        {previewEle}\r\n      </div>\r\n    )\r\n    return returnEle;\r\n  }\r\n\r\n  createOriginEle() {\r\n    let originEle = [];\r\n    for (let i = 0; i < this.props.selectedCell.origin.length; ++i) {\r\n      originEle.push(\r\n        <p>\r\n          {niceRender(this.props.selectedCell.origin[i])}\r\n        </p>\r\n      );\r\n    }\r\n    let returnEle = (\r\n      <div>\r\n        <p>Origin of <b>{niceRender(this.props.selectedCell.data)}</b> is:</p>\r\n        {originEle}\r\n      </div>\r\n    )\r\n    return returnEle;\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props.previewInfoArray);\r\n    // console.log(this.props.previewInfoExpanded);\r\n    // console.log(this.props.selectedCell);\r\n    let previewEle = this.createPreviewEle();\r\n    let originEle = this.createOriginEle();\r\n    return (\r\n      <div>\r\n        {previewEle}\r\n        <hr className=\"preview-origin-divider\"/>\r\n        {originEle}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreviewOrigin;\r\n\r\n// This function renders strings in a nicer way. \r\n// It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\nfunction niceRender(str) {\r\n  return str.replace(/_\\(.*?\\)/g, \"\")\r\n            .replace(/_/g, \" \");\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TaskMenu from \"../components/TaskMenu\";\r\nimport { Collapse, Button, CardBody, Card } from \"reactstrap\";\r\nimport { FaList, FaTable } from \"react-icons/fa\";\r\n// import TableSelection from \"../components/TableSelection\";\r\n// The two following lines are for tabs\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport TableSelection from \"./TableSelection\";\r\n// The two following lines are for range sliders\r\n// import RangeSlider from \"react-bootstrap-range-slider\";\r\n// import \"react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css\";\r\nimport FirstColSelection from \"./FirstColSelection\";\r\nimport OtherColSelection from \"./OtherColSelection\";\r\nimport PreviewOrigin from \"./PreviewOrigin\";\r\n\r\nclass ActionPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.createPropertyArray = this.createPropertyArray.bind(this);\r\n    this.createSiblingArray = this.createSiblingArray.bind(this);\r\n    this.createTableArray = this.createTableArray.bind(this);\r\n    this.createRecommendArray = this.createRecommendArray.bind(this);\r\n    this.createStartRecommend = this.createStartRecommend.bind(this);\r\n  }\r\n\r\n  createTableArray(firstIndex, secondIndex) {\r\n    const tableArray = this.props.propertyNeighbours[firstIndex].siblingArray[\r\n      secondIndex\r\n    ].tableArray;\r\n    let tableElement = [];\r\n    for (let thirdIndex = 0; thirdIndex < tableArray.length; ++thirdIndex) {\r\n      // console.log(\"Hello\");\r\n      // console.log(tableArray[thirdIndex].title);\r\n      let tableTitleText = \"Table \" + thirdIndex + \": \";\r\n      for (let i = 0; i < tableArray[thirdIndex].title.length; ++i) {\r\n        tableTitleText = tableTitleText + tableArray[thirdIndex].title[i] + \"|\";\r\n      }\r\n      tableElement.push(\r\n        <div>\r\n          <Button\r\n            onClick={(e) =>\r\n              this.props.toggleOtherTable(\r\n                e,\r\n                firstIndex,\r\n                secondIndex,\r\n                thirdIndex\r\n              )\r\n            }\r\n          >\r\n            {tableTitleText}\r\n            <FaTable />\r\n          </Button>\r\n          <Collapse isOpen={tableArray[thirdIndex].isOpen}>\r\n            <Card>\r\n              <CardBody>\r\n                <div>\r\n                  <ul className=\"list-group list-css\">\r\n                    <li\r\n                      className=\"col-md-4 list-group-item list-button list-button-backgound-pink\"\r\n                      onClick={(e) =>\r\n                        this.props.unionTable(\r\n                          firstIndex,\r\n                          secondIndex,\r\n                          tableArray[thirdIndex].data,\r\n                          tableArray[thirdIndex].colMapping\r\n                        )}\r\n                    >\r\n                      Union table\r\n                    </li>\r\n                  </ul>\r\n                  <div\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: tableArray[thirdIndex].data.outerHTML,\r\n                    }}\r\n                  ></div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Collapse>\r\n        </div>\r\n      );\r\n    }\r\n    return tableElement;\r\n  }\r\n\r\n  createSiblingArray(firstIndex) {\r\n    const siblingArray = this.props.propertyNeighbours[firstIndex].siblingArray;\r\n    let siblingElement = [];\r\n    let zeroDividerSet = false;\r\n    for (\r\n      let secondIndex = 0;\r\n      secondIndex < siblingArray.length;\r\n      ++secondIndex\r\n    ) {\r\n      let tooltipText =\r\n        \"Examine tables on page \" + siblingArray[secondIndex].name;\r\n      // let divider = null;\r\n      let listClassSib = \"list-group-item\";\r\n      if (siblingArray[secondIndex].isOpen) {\r\n        listClassSib = \"list-group-item list-with-background\";\r\n      }\r\n      if (\r\n        zeroDividerSet === false &&\r\n        siblingArray[secondIndex].tableArray.length === 0\r\n      ) {\r\n        zeroDividerSet = true;\r\n        // divider = (\r\n        //   <li>\r\n        //     <h5>\r\n        //       Below are sibling pages on which no similar tables are found:\r\n        //     </h5>\r\n        //     <hr />\r\n        //   </li>\r\n        // );\r\n        siblingElement.push(\r\n          <li className=\"list-group-item\">\r\n            <hr />\r\n            <h5>\r\n              Below are sibling pages on which no similar tables are found:\r\n            </h5>\r\n            <hr />\r\n          </li>\r\n        );\r\n      }\r\n\r\n      siblingElement.push(\r\n        <li \r\n          className={listClassSib} \r\n          title={tooltipText}\r\n          // onClick={(e) =>\r\n          //   this.props.toggleSibling(e, firstIndex, secondIndex)\r\n          // }\r\n        >\r\n          <span\r\n            onClick={(e) =>\r\n              this.props.toggleSibling(e, firstIndex, secondIndex)\r\n            }\r\n          >\r\n            {niceRender(siblingArray[secondIndex].name) + \" \"}\r\n            <FaList />\r\n          </span>\r\n\r\n          <Collapse isOpen={siblingArray[secondIndex].isOpen}>\r\n            <div>\r\n              <ul className=\"list-group list-css\">\r\n                <li\r\n                  className=\"col-md-4 list-group-item list-button\"\r\n                  onClick={(e) => this.props.unionPage(firstIndex, secondIndex)}\r\n                >\r\n                  Union from page\r\n                </li>\r\n              </ul>\r\n              {this.createTableArray(firstIndex, secondIndex)}\r\n            </div>\r\n          </Collapse>\r\n        </li>\r\n      );\r\n    }\r\n    return (\r\n      <ul className=\"list-group list-css list-group-flush\">\r\n        {\" \"}\r\n        {siblingElement}{\" \"}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  createPropertyArray() {\r\n    // console.log(\"Getting here meaning we are recreating the property array\");\r\n    const propertyNeighbours = this.props.propertyNeighbours;\r\n    // console.log(propertyNeighbours);\r\n    let propertyElement = [];\r\n    for (let i = 0; i < propertyNeighbours.length; ++i) {\r\n      // We create the text for property buttons: table index plus column names\r\n      const predicate = propertyNeighbours[i].predicate;\r\n      const object = propertyNeighbours[i].object;\r\n      let propertyText = predicate !== \"subject\" ? predicate + \": \" + object + \" \" : object + \" \";\r\n      let tooltipText = \"Show other pages with \" + predicate + \": \" + object;\r\n\r\n      let listClass = \"list-group-item\";\r\n      if (this.props.propertyNeighbours[i].isOpen) {\r\n        listClass = \"list-group-item list-with-background\";\r\n      }\r\n\r\n      propertyElement.push(\r\n        <li class={listClass} title={tooltipText}>\r\n          <span onClick={(e) => this.props.togglePropertyNeighbours(e, i)}>\r\n            {niceRender(propertyText)}\r\n            <FaList />\r\n          </span>\r\n\r\n          <Collapse isOpen={this.props.propertyNeighbours[i].isOpen}>\r\n            <div>\r\n              <hr />\r\n              {/* <ul className=\"list-group list-css\">\r\n                <li\r\n                  className=\"col-md-4 list-group-item list-button list-button-backgound-pink\"\r\n                  onClick={(e) => this.props.unionProperty(i)}\r\n                >\r\n                  Union from all pages\r\n                </li>\r\n              </ul> */}\r\n              {this.createSiblingArray(i)}\r\n            </div>\r\n          </Collapse>\r\n        </li>\r\n      );\r\n    }\r\n    return (\r\n      <ul className=\"list-group list-css list-group-flush\">\r\n        {propertyElement}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  // This function creates the HTML element for recommend array\r\n\r\n  createRecommendArray(colIndex, recommendArray) {\r\n    // console.log(recommendArray);\r\n    let recommendEle = [];\r\n    // stringRecommend and semanticRecommend are both HTML elements that should be constructed from recommend array\r\n    for (let i = 0; i < recommendArray.length; ++i) {\r\n      let neighbourArray = [\r\n        {\r\n          \"value\":recommendArray[i].value,\r\n          \"type\":recommendArray[i].type\r\n        }\r\n      ]\r\n      let recommendText = recommendArray[i].label;\r\n      recommendEle.push(\r\n        <div>\r\n          <p>\r\n            <Button\r\n              onClick={(e) => this.props.populateRecommendation(e,\r\n                                                                colIndex,\r\n                                                                neighbourArray)}>\r\n              {recommendText}\r\n            </Button>\r\n          </p>\r\n        </div>\r\n      )\r\n    }\r\n    // Now, we also want to tell user they are adding attributes with respect to which column.\r\n    let recommendationText = \"\";\r\n    if (this.props.keyColIndex !== -1) {\r\n      let neighbourArray = this.props.tableHeader[this.props.keyColIndex];\r\n      recommendationText = this.props.keyColIndex !== 0 ? createNeighbourText(neighbourArray) : \"First Column\";\r\n    }\r\n    let returnEle = \r\n      <div className=\"container\">\r\n        <p>\r\n          Attribute recommendations:\r\n        </p>\r\n        <p>\r\n          Current Search Column: <b>{recommendationText}</b>\r\n        </p>\r\n        {recommendEle}\r\n      </div>\r\n    return returnEle;\r\n  }\r\n\r\n  // This function creates the HTML element for populateSameNeighbour\r\n  createSameNeighbour(actionInfo) {\r\n    let neighbourArrayText = createNeighbourText(actionInfo.neighbourArray);\r\n    let returnEle = (\r\n      <div className=\"container\">\r\n        <p>Some cells in this column contain multiple values.</p>\r\n        <p>Expand all other values that are also</p>\r\n        <p><b>{neighbourArrayText}</b> ?</p>\r\n        <div className=\"row\">\r\n          <Button\r\n            className=\"col-md-4\"\r\n            onClick={(e) =>\r\n              this.props.sameNeighbourOneRow(\r\n                e,\r\n                actionInfo.colIndex,\r\n                actionInfo.neighbourArray,\r\n              )\r\n            }\r\n          >\r\n            In One Row\r\n          </Button>\r\n          <Button\r\n            className=\"offset-md-1 col-md-4\"\r\n            onClick={(e) =>\r\n              this.props.sameNeighbourDiffRow(\r\n                e,\r\n                actionInfo.colIndex,\r\n                actionInfo.neighbourArray,\r\n              )\r\n            }\r\n          >\r\n            In Separate Rows\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n    return returnEle;\r\n  }\r\n\r\n  // This function creates the starting recommendations, when actionInfo.task is showStartRecommend\r\n  createStartRecommend() {\r\n    console.log(this.props.curActionInfo);\r\n    let recommendEle = [];\r\n    let recommendArray = this.props.curActionInfo.recommendArray;\r\n    for (let i = 0; i < recommendArray.length; ++i) {\r\n      let neighbourArray = [\r\n        {\r\n          \"value\":recommendArray[i].value,\r\n          \"type\":recommendArray[i].type,\r\n        }\r\n      ]\r\n      let recommendText = recommendArray[i].label;\r\n      recommendEle.push(\r\n        <div>\r\n          <p>\r\n            <Button\r\n              onClick={(e) => this.props.populateStartRecommend(e, this.props.curActionInfo.colIndex, neighbourArray)}\r\n            >\r\n              {recommendText}\r\n            </Button>\r\n          </p>\r\n        </div>\r\n      )\r\n    }\r\n    // Now, we also want to tell user they are adding attributes with respect to which column.\r\n    let recommendationText = \"\";\r\n    if (this.props.keyColIndex !== -1) {\r\n      let neighbourArray = this.props.tableHeader[this.props.keyColIndex];\r\n      recommendationText = this.props.keyColIndex !== 0 ? createNeighbourText(neighbourArray) : \"First Column\";\r\n    }\r\n    let returnEle = \r\n      <div className=\"container\">\r\n        <p>\r\n          Attribute recommendations:\r\n        </p>\r\n        <p>\r\n          Current Search Column: <b>{recommendationText}</b>\r\n        </p>\r\n        {recommendEle}\r\n      </div>\r\n    return returnEle;\r\n  }\r\n\r\n  render() {\r\n    let actionEle;  // contains either wrangling actions or unionable tables for the action panel\r\n    let wrapperEle; // wrapper element for actionEle. This is what we will render in the HTML.\r\n    let titleEle;   // contains what we will display as the title for the action panel\r\n\r\n    // We first decide the content for the titleElement\r\n    if (\r\n      this.props.usecaseSelected === \"\" \r\n      // ||\r\n      // (this.props.usecaseSelected === \"startTable\" &&\r\n      //   this.props.selectedTableIndex === -1)\r\n    ) {\r\n      titleEle = (\r\n        <div className=\"row\">\r\n          <div className=\"col-md-8\">\r\n            <h4 className=\"logo-left-color\">\r\n              ACTIONS\r\n              <span> </span>\r\n              <span className=\"logo-right-color xsmall\">\r\n                Select your starting action\r\n              </span>\r\n            </h4>\r\n          </div>\r\n        </div>\r\n      );\r\n    } \r\n    else {\r\n      titleEle = (\r\n        <div className=\"row action-header\">\r\n          <div className=\"col-md-8\">\r\n            <h4 className=\"logo-left-color\">\r\n              ACTIONS\r\n              <span> </span>\r\n              <span className=\"logo-right-color xsmall\">\r\n                Select your next action\r\n              </span>\r\n            </h4>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // We now decide the content for the actionElement\r\n    // Case 1: URL has been pasted, but task has not been selected. User needs to select task.\r\n    if (this.props.usecaseSelected === \"\") {\r\n      wrapperEle = \r\n        <TaskMenu \r\n          handleStartSubject={this.props.handleStartSubject} \r\n          urlPasted={this.props.urlPasted}\r\n          showTableSelection={this.props.showTableSelection}\r\n          toggleTableSelection={this.props.toggleTableSelection}\r\n          originTableArray={this.props.originTableArray}\r\n          tableOpenList={this.props.tableOpenList}\r\n          toggleTable={this.props.toggleTable}\r\n          selectedTableIndex={this.props.selectedTableIndex}\r\n          handleStartTable={this.props.handleStartTable}\r\n        />;\r\n    }\r\n    // Case 2: Task has been selected. curActionInfo is not null, meaning we have to display some task in ActionPanel\r\n    else if (this.props.curActionInfo !== null) {\r\n      const actionInfo = this.props.curActionInfo;\r\n      // Case 2.1: Users have selected \"Create Table from subject\".\r\n      // We ask users to select a column header for the first column.\r\n      if (actionInfo.task === \"afterStartSubject\") {\r\n        actionEle = (\r\n          <FirstColSelection\r\n            firstColSelection={this.props.firstColSelection}\r\n            firstColChecked={this.props.firstColChecked}\r\n            firstColFilled={this.props.firstColFilled}\r\n            toggleFirstNeighbour={this.props.toggleFirstNeighbour}\r\n            tableHeader={this.props.tableHeader}\r\n            keyCheckedIndex={this.props.keyCheckedIndex}\r\n            populateKeyColumn={this.props.populateKeyColumn}\r\n            confirmAddFirstCol={this.props.confirmAddFirstCol}\r\n          />\r\n        )\r\n      }\r\n      // Case 2.2: Users have clicked on the down arrow for non-first columns.\r\n      // We ask users to select a column header for this column.\r\n      else if (actionInfo.task === \"showOtherColSelection\") {\r\n        actionEle = (\r\n          <OtherColSelection\r\n            otherColSelection={this.props.otherColSelection}\r\n            otherColChecked={this.props.otherColChecked}\r\n            otherCheckedIndex={this.props.otherCheckedIndex}\r\n            toggleOtherNeighbour={this.props.toggleOtherNeighbour}\r\n            populateOtherColumn={this.props.populateOtherColumn}\r\n            colIndex={actionInfo.colIndex}\r\n          />\r\n        )\r\n      }\r\n      // Case 2.2: Users have click on the PLUS icon on first column's header.\r\n      // We ask users if they want to add more entities to the first column.\r\n      else if (actionInfo.task === \"plusClicked\") {\r\n        // We want to do an error check here: if the first column is not the current search column, we disable adding more entities to it.\r\n        if (this.props.keyColIndex !== 0) {\r\n          actionEle = (\r\n            <div>\r\n              <p>\r\n                <b>\r\n                  Please set the first column as the search column before adding more entities to it.\r\n                </b>\r\n              </p>\r\n            </div>\r\n          )\r\n        }\r\n        else {\r\n          actionEle = (\r\n            <div>\r\n              <p>Add more entities to the first column?</p>\r\n              <Button\r\n                onClick={() => this.props.addToFirstCol()}\r\n              >\r\n                OK\r\n              </Button>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n      // In this case, we tell users they can keep wrangling by selecting column header for empty columns\r\n      else if (actionInfo.task === \"afterPopulateColumn\") {\r\n        actionEle = (\r\n          <div>\r\n            <p>\r\n              <b>Fill an empty column</b> by clicking on its <b>edit icon</b>\r\n            </p>\r\n            <p>\r\n              OR\r\n            </p>\r\n            <p>\r\n              <b>Add a new column</b> by clicking on a column's <b>plus icon</b>\r\n            </p>\r\n          </div>\r\n        )\r\n      }\r\n      // In this case we give user a button to allow the population of first column\r\n      else if (actionInfo.task === \"populateKeyColumn\") {\r\n        let neighbourArrayText = \"\";\r\n        for (let i = 0; i < actionInfo.neighbourArray.length; ++i) {\r\n          if (i > 0) {\r\n            neighbourArrayText += \" & \";\r\n          }\r\n          neighbourArrayText += actionInfo.neighbourArray[i].label;\r\n        }\r\n        if (neighbourArrayText !== \"\") {\r\n          actionEle = (\r\n            <div>\r\n              <p>Fill this column with:</p>\r\n              <p><b>{neighbourArrayText}</b> ?</p>\r\n              <Button\r\n                onClick={(e) =>\r\n                  this.props.populateKeyColumn(\r\n                    e,\r\n                    actionInfo.colIndex,\r\n                    actionInfo.neighbourArray\r\n                  )\r\n                }\r\n              >\r\n                OK\r\n              </Button>\r\n            </div>\r\n          );\r\n        }\r\n        else {\r\n          actionEle = (\r\n            <div>\r\n              <p className=\"suggestion-text\">\r\n                Fill the <b>first column header</b> by choosing from its <b>down arrow</b>\r\n              </p>\r\n            </div>\r\n          );\r\n        }\r\n      } \r\n      // In this case we give user a button to allow the population of a new column\r\n      else if (actionInfo.task === \"populateOtherColumn\") {\r\n        let neighbourArrayText = createNeighbourText(actionInfo.neighbourArray);\r\n        actionEle = (\r\n          <div>\r\n            <p>Fill this column with:</p>\r\n            <p><b>{neighbourArrayText}</b> ?</p>\r\n            <Button\r\n              onClick={(e) =>\r\n                this.props.populateOtherColumn(\r\n                  e,\r\n                  actionInfo.colIndex,\r\n                  actionInfo.neighbourArray,\r\n                )\r\n              }\r\n            >\r\n              OK\r\n            </Button>\r\n          </div>\r\n        );\r\n      } \r\n      // In this case we give user a button to allow the population of same neighbour\r\n      else if (actionInfo.task === \"populateSameNeighbour\") {\r\n        actionEle = this.createSameNeighbour(actionInfo);\r\n      }  \r\n      // In this case we give users an array of recommended neighbours to add to the table\r\n      else if (actionInfo.task === \"populateRecommendation\") {\r\n        let recommendArray = this.createRecommendArray(actionInfo.colIndex, actionInfo.recommendArray);\r\n        actionEle = (\r\n          <div>\r\n            {recommendArray}\r\n          </div>\r\n        )\r\n      }\r\n      // In this case we have to include both populateSameNeighbour and populateRecommendation\r\n      else if (actionInfo.task === \"sameNeighbourAndRecommendation\") {\r\n        let sameNeighbourEle = this.createSameNeighbour(actionInfo);\r\n        let recommendEle = this.createRecommendArray(actionInfo.colIndex, actionInfo.recommendArray);\r\n        actionEle = (\r\n          <div>\r\n            <Card className=\"action-panel-card\">\r\n              {recommendEle}\r\n            </Card>\r\n            <br />\r\n            <Card className=\"action-panel-card\">\r\n              {sameNeighbourEle}\r\n            </Card>\r\n          </div>\r\n        )\r\n      }\r\n      // In this case we give user four column filter methods: sort asc, sort des, filter, and dedup\r\n      else if (actionInfo.task === \"showFilterMethods\") {\r\n        let textEle = null;\r\n        if (actionInfo.colIndex === 0) {\r\n          textEle = \r\n            <p><b>How would you like to process the first column?</b></p>\r\n        }\r\n        else {\r\n          textEle = \r\n            <p><b>How would you like to process column {createNeighbourText(this.props.tableHeader[actionInfo.colIndex])} ?</b></p>\r\n        }\r\n        // console.log(textEle);\r\n        actionEle = (\r\n          <div>\r\n            <div>\r\n              {textEle}\r\n            </div>\r\n            <div>\r\n              <Button\r\n                onClick={(e) => this.props.contextSortColumn(e, actionInfo.colIndex, \"ascending\")}\r\n              >\r\n                Sort ascending\r\n              </Button>\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <Button\r\n                onClick={(e) => this.props.contextSortColumn(e, actionInfo.colIndex, \"descending\")}\r\n              >\r\n                Sort descending\r\n              </Button>\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <Button\r\n                onClick={(e) => this.props.openFilter(e, actionInfo.colIndex)}\r\n              >\r\n                Filter this column\r\n              </Button>\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <Button\r\n                onClick={(e) => this.props.contextDedupColumn(e, actionInfo.colIndex)}\r\n              >\r\n                Dedup this column\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n      // In this case we display the origin of selected cell\r\n      else if (actionInfo.task === \"contextCellOrigin\") {\r\n        actionEle = (\r\n          <div>\r\n            <p>Origin of selected cell is:</p>\r\n            <div>{actionInfo.origin}</div>\r\n          </div>\r\n        );\r\n      }\r\n      // In this case we display the origin of selected cell\r\n      else if (actionInfo.task === \"originPreviewPage\") {\r\n        actionEle = (\r\n        // <div>\r\n        //   <div>\r\n        //     <p>Preview of <b>{niceRender(actionInfo.cellValue)}</b> is:</p>\r\n        //     <div>\r\n        //       {renderPreview(actionInfo.preview)}\r\n        //     </div>\r\n        //   </div>\r\n        //   <hr className=\"preview-origin-divider\"/>\r\n        //   <div>\r\n        //     <p>Origin of <b>{niceRender(actionInfo.cellValue)}</b> is:</p>\r\n        //     <div>{actionInfo.origin}</div>\r\n        //   </div>\r\n        // </div>\r\n          <PreviewOrigin\r\n            previewInfoArray={this.props.previewInfoArray}\r\n            previewInfoExpanded={this.props.previewInfoExpanded}\r\n            selectedCell={this.props.selectedCell}\r\n            togglePreviewElement={this.props.togglePreviewElement}\r\n          />\r\n        );\r\n      }  \r\n      // In this case we display the starting recommendations\r\n      else if (actionInfo.task === \"showStartRecommend\") {\r\n        let recommendEle = this.createStartRecommend();\r\n        actionEle = (\r\n          <div>\r\n            {recommendEle}\r\n          </div>\r\n        )\r\n      }\r\n      // In this case we have to include both populateSameNeighbour and populateStartRecommend\r\n      else if (actionInfo.task === \"sameNeighbourAndStartRecommend\") {\r\n        let sameNeighbourEle = this.createSameNeighbour(actionInfo);\r\n        let recommendEle = this.createStartRecommend();\r\n        actionEle = (\r\n          <div>\r\n            <Card className=\"action-panel-card\">\r\n              {recommendEle}\r\n            </Card>\r\n            <br />\r\n            <Card className=\"action-panel-card\">\r\n              {sameNeighbourEle}\r\n            </Card>\r\n          </div>\r\n        )\r\n      }\r\n    } \r\n    // This is an empty else clause\r\n    else {\r\n    }\r\n\r\n    // Now we have to determine whether we are rendering one tab or two tabs.\r\n    // One tab for startSubject. Two tabs for startTable.\r\n    // console.log(this.props.usecaseSelected);\r\n\r\n    // Modified after JOIN has been added in:\r\n    // In the startSubject case, we will have two tab: wrangling actions, and table actions.\r\n    // Wrangling Actions: same as before.\r\n    // Table Actions: Union will be empty, JOIN will use the pasted URL from the beginning.\r\n\r\n    if (this.props.usecaseSelected === \"startSubject\") {\r\n      let curIndex = this.props.tabIndex;\r\n      wrapperEle = (\r\n        <div>\r\n          <Tabs\r\n            selectedIndex={curIndex}\r\n            onSelect={(index) => this.props.handleTabSwitch(index)}\r\n          >\r\n            <TabList>\r\n              <Tab>Wrangling Actions</Tab>\r\n              <Tab>Table Actions</Tab>\r\n            </TabList>\r\n              <TabPanel>\r\n                {actionEle}\r\n              </TabPanel>\r\n              <TabPanel>\r\n                <div>\r\n                  <ul class=\"list-group list-css list-group-flush\">\r\n                    <hr className=\"m-0\"></hr>\r\n                    <li\r\n                      className=\"list-group-item\"\r\n                    >\r\n                      <span \r\n                        onClick={(e) => this.props.toggleUnionJoin(e, \"union\")}\r\n                      >\r\n                        Union Tables from Wikipedia\r\n                      </span>\r\n\r\n                      <Collapse isOpen={this.props.showUnionTables}>\r\n                        <CardBody>\r\n                          <Card>\r\n                            Currently, finding unionable tables for customized table is not supported.\r\n                          </Card>\r\n                        </CardBody>\r\n                      </Collapse>\r\n                    </li>\r\n                    <li\r\n                      className=\"list-group-item\"\r\n                    >\r\n                      <span \r\n                        onClick={(e) => this.props.toggleUnionJoin(e, \"join\")}\r\n                      >\r\n                        Join Tables from Wikipedia\r\n                      </span>\r\n\r\n                      <Collapse isOpen={this.props.showJoinTables}>\r\n                        <CardBody>\r\n                          <Card>\r\n                            <p>\r\n                              The following tables are from page: <b>{decodeURIComponent(this.props.urlPasted.slice(30))}</b>\r\n                            </p>\r\n                            <TableSelection \r\n                              originTableArray={this.props.originTableArray}\r\n                              tableOpenList={this.props.tableOpenList}\r\n                              toggleTable={this.props.toggleTable}\r\n                              buttonFunction={this.props.handleJoinTable}\r\n                              listType={\"join\"}\r\n                            />\r\n                          </Card>\r\n                        </CardBody>\r\n                      </Collapse>\r\n                    </li>\r\n                    <hr className=\"m-0\"></hr>\r\n                  </ul>\r\n                </div>\r\n              </TabPanel>\r\n          </Tabs>\r\n        </div>\r\n      );\r\n    }\r\n    else if (this.props.usecaseSelected === \"startTable\") {\r\n      // If we have not selected a table, we show both tabs, as we are fully ready.\r\n      if (this.props.selectedTableIndex !== -1) {\r\n        let curIndex = this.props.tabIndex;\r\n        wrapperEle = (\r\n          <div>\r\n            <Tabs \r\n              selectedIndex={curIndex}\r\n              onSelect={(index) => this.props.handleTabSwitch(index)}\r\n            >\r\n              <TabList>\r\n                <Tab>Wrangling Actions</Tab>\r\n                <Tab>Table Actions</Tab>\r\n              </TabList>\r\n              <TabPanel>\r\n                {actionEle}\r\n              </TabPanel>\r\n              <TabPanel>\r\n                <div>\r\n                  <ul class=\"list-group list-css list-group-flush\">\r\n                    <hr className=\"m-0\"></hr>\r\n                    <li\r\n                      className=\"list-group-item\"\r\n                    >\r\n                      <span \r\n                        onClick={(e) => this.props.toggleUnionJoin(e, \"union\")}\r\n                      >\r\n                        Union Tables from Wikipedia\r\n                      </span>\r\n\r\n                      <Collapse isOpen={this.props.showUnionTables}>\r\n                        <CardBody>\r\n                          <Card>\r\n                              Expand relations below to look at other pages with similar\r\n                              tables:\r\n                            <br /><br />\r\n                            {this.createPropertyArray()}\r\n                          </Card>\r\n                        </CardBody>\r\n                      </Collapse>\r\n                    </li>\r\n                    <li\r\n                      className=\"list-group-item\"\r\n                    >\r\n                      <span \r\n                        onClick={(e) => this.props.toggleUnionJoin(e, \"join\")}\r\n                      >\r\n                        Join Tables from Wikipedia\r\n                      </span>\r\n\r\n                      <Collapse isOpen={this.props.showJoinTables}>\r\n                        <CardBody>\r\n                          <Card>\r\n                            <p>\r\n                              The following tables are from page: <b>{decodeURIComponent(this.props.urlPasted.slice(30))}</b>\r\n                            </p>\r\n                            <TableSelection \r\n                              originTableArray={this.props.originTableArray}\r\n                              tableOpenList={this.props.tableOpenList}\r\n                              toggleTable={this.props.toggleTable}\r\n                              buttonFunction={this.props.handleJoinTable}\r\n                              listType={\"join\"}\r\n                            />\r\n                          </Card>\r\n                        </CardBody>\r\n                      </Collapse>\r\n                    </li>\r\n                    <hr className=\"m-0\"></hr>\r\n                  </ul>\r\n                </div>\r\n              </TabPanel>\r\n            </Tabs>\r\n          </div>\r\n        )\r\n      }\r\n      // Else, we have not selected a table yet. In this case, wrapperEle should be equal to actionEle\r\n      else {  \r\n        wrapperEle = actionEle;\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <div>\r\n          {titleEle}\r\n        </div>\r\n        <div>\r\n          {wrapperEle}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ActionPanel;\r\n\r\n// // The following helper function creates HTML elements from previewInfoArray, \r\n// // an array of key-val pairs containing the info for a cell's preview.\r\n\r\n// // It also makes use of niceRender, so that preview looks clean.\r\n\r\n// function renderPreview(previewInfoArray) {\r\n//   // console.log(previewInfoArray);\r\n//   let infoEle = [];\r\n//   for (let i = 0; i < previewInfoArray.length; ++i) {\r\n//     let keyLiteral = previewInfoArray[i].key;\r\n//     // We get the first element from value Array\r\n//     let valLiteral = niceRender(previewInfoArray[i].value[0]);\r\n//     // Since we have already included thte first element, we start the index from 1\r\n//     for (let j = 1; j < previewInfoArray[i].value.length; ++j) {\r\n//       valLiteral = valLiteral + \"; \"+niceRender(previewInfoArray[i].value[j]);\r\n//     }\r\n//     infoEle.push(\r\n//       <p><b>{keyLiteral}</b>{\":\"}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{'\\u00A0'}{valLiteral}</p>\r\n//     )\r\n//   }\r\n//   return infoEle;\r\n// }\r\n\r\n// // This function renders this.props.tableData[i][j].data in a nicer way. \r\n// // It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\n// function niceRender(str) {\r\n//   return str.replace(/_\\(.*?\\)/g, \"\")\r\n//             .replace(/_/g, \" \");\r\n// }\r\n\r\n// This function creates neighbourArrayText from neighbourArray\r\n\r\nfunction createNeighbourText(neighbourArray) {\r\n  let neighbourArrayText = \"\";\r\n  for (let i = 0; i < neighbourArray.length; ++i) {\r\n    if (i > 0) {\r\n      neighbourArrayText+=\" OR \";\r\n    }\r\n    let curNeighbourText = neighbourArray[i].type === \"object\" ? \"is \" + neighbourArray[i].value + \" of\" : neighbourArray[i].value;\r\n    neighbourArrayText+=curNeighbourText;\r\n  }\r\n  return neighbourArrayText;\r\n}\r\n\r\n// This function renders this.props.tableData[i][j].data in a nicer way. \r\n// It removes all occurence of (...), and changes all \"_\" to \" \".\r\n\r\nfunction niceRender(str) {\r\n  return str.replace(/_\\(.*?\\)/g, \"\")\r\n            .replace(/_/g, \" \");\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\n\r\nclass PagePanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    let pageEle = null;\r\n    let wikiPageClass = \"small-padding wiki-page-hidden\";\r\n    let buttonClass = \"btn btn-sm btn-info toggle-button\";\r\n    if (this.props.iframeURL !== \"\") {\r\n      let buttonhideShow = (\r\n        <button\r\n          className={buttonClass}\r\n          onClick={() => this.props.toggleWikiPage()}\r\n        >\r\n          <i class=\"fa fa-chevron-up\" aria-hidden=\"true\"></i>\r\n          Show\r\n        </button>\r\n      );\r\n      if (!this.props.pageHidden) {\r\n        wikiPageClass = \"small-padding wiki-page\";\r\n        buttonhideShow = (\r\n          <div>\r\n            <hr className=\"m-1\"></hr>\r\n            <button\r\n              className={buttonClass}\r\n              onClick={() => this.props.toggleWikiPage()}\r\n            >\r\n              <i class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i>\r\n              Hide\r\n            </button>\r\n          </div>\r\n        );\r\n      }\r\n      pageEle = (\r\n        <div className=\"page-panel text-right\">\r\n          {buttonhideShow}\r\n          <div className={wikiPageClass}>\r\n            <iframe\r\n              id=\"iframe\"\r\n              title=\"URLPage\"\r\n              src={this.props.iframeURL}\r\n              className=\"iframe-cls\"\r\n            ></iframe>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return <div>{pageEle}</div>;\r\n  }\r\n}\r\n\r\nexport default PagePanel;\r\n","// import { Route, Switch, Link } from \"react-router-dom\";\r\nimport React, { Component } from \"react\";\r\nimport { combinations } from \"mathjs\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport SettingModal from \"../components/SettingModal\";\r\nimport FilterModal from \"../components/FilterModal\";\r\nimport JoinModal from \"../components/JoinModal\";\r\nimport LandingPage from \"../components/LandingPage\";\r\nimport TablePanel from \"../components/TablePanel\";\r\nimport ActionPanel from \"../components/ActionPanel\";\r\nimport PagePanel from \"../components/PagePanel\";\r\nimport _ from \"lodash\";\r\n\r\nconst maxNeighbourCount = 10;\r\nconst maxFetchCount = 30;\r\nconst initialColNum = 4;\r\nconst initialRowNum = 45;\r\n\r\nclass MainBody extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let tableData = [];\r\n    let tableHeader = [];\r\n    let optionsMap = [];\r\n    for (let i = 0; i < initialRowNum; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < initialColNum; ++j) {\r\n        // Initially, cell has no data or origin\r\n        // data field is a string\r\n        // origin field is an array of strings\r\n        tempRow.push({ data: \"\", origin: [] });\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n    for (let j = 0; j < initialColNum; ++j) {\r\n      let emptyOptions = [];\r\n      optionsMap.push(emptyOptions);\r\n      tableHeader.push([]);\r\n    }\r\n    this.state = {\r\n      // states below are general states used throughout the app\r\n      urlPasted: \"\",  \r\n      tablePasted: \"\",\r\n      usecaseSelected: \"\",\r\n      pageHidden: false,\r\n      iframeURL: \"\",\r\n      curActionInfo: null, // object storing the current action that should be displayed in ActionPanel. Initially null.\r\n      lastAction: \"\",      // string storing the last action that has modified the result table in the table panel\r\n      prevState: \"\",       // objects storing the information needed to undo the last step. Information stored depends on lastAction\r\n      showSetting: false,    // boolean storing whether setting modal is shown or not. Default to false.\r\n      showTableSelection: false,    // boolean storing whether the list of tables from page is shown. Default to false.\r\n      tabIndex: 1,         // integer storing the index of the tab currently displaying. Default to 1.\r\n      showUnionTables: false,  // boolean storing whether all the unionable pages and tables is shown. Default to false.\r\n      showJoinTables: false,   // boolean storing whether the page storing joinable tables is shown. Default to false.\r\n\r\n      // states below are useful for startSubject\r\n      keyColIndex: 0,   // number storing the index of the search column. initially the key column is the first column\r\n      // 1D array of objects with four properties storing the table headers. This array is used to create the column headers in table panel\r\n      // 1) label:  string storing the label of an option (ex: spouse)\r\n      // 2) value:  string storing the value of an option (ex: spouse)\r\n      // 3) type:   string that's either \"subject\" or \"object\". Storing whether the current option is ?s or ?o with respect to key column. Can be empty.\r\n      // 4) range:  string storing the rdfs:range of the current option.\r\n      tableHeader: tableHeader,\r\n      tableData: tableData, // 2D array of objects storing the table data (not including the table headers).\r\n      optionsMap: optionsMap, // 2D array storing the options map\r\n      keyColNeighbours: [], // 1D array storing the neighbours of the key column\r\n      // An object with two attributes: subject and object\r\n      // Subject and Object are both 1D arrays \r\n      // - Length tableData.length\r\n      // - Each element is an object with multiple attributes. Ex: {birthdate:[1998-01-01], almaMater:[a, b, c]}\r\n      firstDegNeighbours: [],\r\n\r\n      // states below are useful for first column header selection\r\n      firstColSelection: [],   // 1D array of objects storing information about the starting subject's neighbours\r\n      firstColChecked: [],     // 1D array of booleans storing whether a neighbour of the starting subject is selected or not\r\n      firstColFilled: false,   // boolean indicating whether the first column has been filled. \r\n                               // Will be set to true and remain that way after calling populateKeyColumn, or handleStartTable\r\n      keyCheckedIndex: -1,     // index storing the most recent index that has just been toggled for the first column. Initially -1.\r\n      firstColHeaderInfo: [],  // 2D array of objects storing information needed to create the first column's header. (since both AND and OR need to be considered)\r\n\r\n      // states below are useful for other column header selection\r\n      otherColSelection: [],    // 1D array of objects storing information about the search column's neighbours\r\n      otherColChecked: [],      // 1D array of booleans storing whether a neighbour of the search column is selected or not\r\n      otherCheckedIndex: -1,    // index storing the most recent index that has just been toggled for a non-first column. Initially -1.\r\n\r\n      // states below are useful for startTable\r\n      originTableArray: [], // 1D array storing all tables found on pasted URL\r\n      tableOpenList: [], // 1D array storing whether each table in originTableArray has been toggled open or not\r\n      selectedTableIndex: -1, // index of table selected by user. If it's -1, take user to table selection. Else, show the table in Table Panel.\r\n      selectedClassAnnotation: [], // semantic class annotation for each column of selected table\r\n      // 2D arary of objects with three properties, which store the table data from explore table task. Similar to tableData above. \r\n      // Three properties: data, origin, rowSpan, colSpan.\r\n      tableDataExplore: [], \r\n      // array of objects with four properties storing the status/content for each property neighbour\r\n      // 1) predicate: string storing the predicate (ex. dbp:league)\r\n      // 2) object: string storing the object (ex. dbo:NBA)\r\n      // 3) isOpen: boolean storing whether the current property neighbour is toggled on or not\r\n      // 4) siblingArary: array of objects with two properties storing the staus/content for each sibling URL\r\n      //    4.1) isOpen:      boolean storing whether the current sibling is toggled on or not\r\n      //    4.2) tableArray:  array of objects storing the status/content for each \"same\" table on the sibling URL\r\n      //         4.2.1) isOepn:        boolean storing whether the current table is toggled on or not\r\n      //         4.2.2) unionScore:    number storing teh union score of the current table (how \"similar\" it is to the original table)\r\n      //         4.2.3) colMapping:    array of numbers storing the column mapping between the current table and the selected table\r\n      //         4.2.4) data:          HTML of a table\r\n      //         4.2.5) title:         array of strings storing the column headers of the current table\r\n      propertyNeighbours: [],\r\n      semanticEnabled: \"disabled\", // boolean value indicating whether semantic mapping is enabled or not. Default to true\r\n      unionCutOff: 0.75, // number representing the union percentage a table must have to be considered unionable (>=)\r\n\r\n      // states below are for column filter\r\n      showFilter: false,        // boolean storing whether we want to show column filter or not. Initially false.\r\n      checkAll: true,           // boolean that when toggled to true, all dataAndChecked will be set to true, \r\n                                // and when false, all dataAndChecked will be set to false.\r\n      curFilterIndex: -1,       // number storing the index of the column on which we apply the filter. Initially -1 (no filter.)\r\n      dataAndChecked: [],       // array of [data, checked] pairs storing which data are in the filter column, and whether we should keep them.\r\n    \r\n      // states below are for table join\r\n      showJoinModal: false,    // boolean storing whether the join option modal is show or not. Default to false.\r\n      joinTableIndex: -1,      // number storing the index of the table we want to join from originTableArray.\r\n      joinTableData: [],       // 2D array storing the data of the table we want to join from originTableArray. Initially empty.\r\n      originColOptions: [],    // 1D array storing the selection options for the original table.\r\n      joinColOptions: [],      // 1D array storing the selection options for the newly selected table.\r\n      originJoinIndex: -1,     // number storing the index of the column of the original table that we are joining.\r\n      joinJoinIndex: -1,       // number storing the index of the column of the newly selected table that we are joining.\r\n\r\n      // states below are for column preview\r\n      previewColIndex: -1,     // number storing the index of the column that we want to show preview for. \r\n                               // When -1, we do not want to show any preview. This state needs to be passed to TablePanel\r\n                               // It should only be set to non -1 when we have toggled some selections on, but haven't confirmed on selections yet. \r\n      // states below are useful for cell preview and origin\r\n      selectedCell: null,      // data in the format of tableData[i][j] (has both data and origin attribute). \r\n                               // (origin element can be determined from this)\r\n      previewInfoArray: [],    // array storing the information used to create the preview element. \r\n                               // It contains categories, subject, object first degree neighbours.\r\n      previewInfoExpanded: [], // array of booleans storing whether each element from previewInfoArray is expanded or not.\r\n                               // This can only be set to true for previewInfoArray elements that have value length longer than 1.\r\n    };\r\n\r\n    // functions below are useful during start up\r\n    this.handleURLPaste = this.handleURLPaste.bind(this);\r\n    this.handleStartSubject = this.handleStartSubject.bind(this);\r\n    this.handleStartTable = this.handleStartTable.bind(this);\r\n\r\n    // functions below are useful for startSubject\r\n    this.cellChange = this.cellChange.bind(this);\r\n    this.selectColHeader = this.selectColHeader.bind(this);\r\n    this.getKeyOptions = this.getKeyOptions.bind(this);\r\n    this.getOtherOptions = this.getOtherOptions.bind(this);\r\n    this.getNeighbourPromise = this.getNeighbourPromise.bind(this);\r\n    this.populateKeyColumn = this.populateKeyColumn.bind(this);\r\n    this.getOtherColPromise = this.getOtherColPromise.bind(this);\r\n    // this.getOtherColPromiseTwo = this.getOtherColPromiseTwo.bind(this);\r\n    this.populateOtherColumn = this.populateOtherColumn.bind(this);\r\n    this.addAllNeighbour = this.addAllNeighbour.bind(this);\r\n    this.getTableStates = this.getTableStates.bind(this);\r\n    this.sameNeighbourDiffRow = this.sameNeighbourDiffRow.bind(this);\r\n    this.sameNeighbourOneRow = this.sameNeighbourOneRow.bind(this);\r\n\r\n    // functions below are for column processing\r\n    this.contextAddColumn = this.contextAddColumn.bind(this);\r\n    this.contextDeleteColumn = this.contextDeleteColumn.bind(this);\r\n    this.contextSetColumn = this.contextSetColumn.bind(this);\r\n    this.originPreviewPage = this.originPreviewPage.bind(this);\r\n    this.contextSortColumn = this.contextSortColumn.bind(this);\r\n    this.contextDedupColumn = this.contextDedupColumn.bind(this);\r\n    this.showFilterMethods = this.showFilterMethods.bind(this);\r\n\r\n    // functions below are useful for startTable\r\n    this.toggleTable = this.toggleTable.bind(this);\r\n    this.togglePropertyNeighbours = this.togglePropertyNeighbours.bind(this);\r\n    this.toggleSibling = this.toggleSibling.bind(this);\r\n    this.toggleOtherTable = this.toggleOtherTable.bind(this);\r\n    this.unionTable = this.unionTable.bind(this);\r\n    this.unionPage = this.unionPage.bind(this);\r\n    this.unionProperty = this.unionProperty.bind(this);\r\n    this.toggleSemantic = this.toggleSemantic.bind(this);\r\n    this.unionCutOffChange = this.unionCutOffChange.bind(this);\r\n\r\n    // functions below are generally usefull\r\n    this.copyTable = this.copyTable.bind(this);\r\n    this.toggleWikiPage = this.toggleWikiPage.bind(this);\r\n    this.undoPreviousStep = this.undoPreviousStep.bind(this);\r\n    this.handleTabSwitch = this.handleTabSwitch.bind(this);\r\n    this.openModal = this.openModal.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n    this.toggleTableSelection = this.toggleTableSelection.bind(this);\r\n    this.toggleUnionJoin = this.toggleUnionJoin.bind(this);\r\n\r\n    // functions below are for column filter\r\n    this.openFilter = this.openFilter.bind(this);\r\n    this.cancelFilter = this.cancelFilter.bind(this);\r\n    this.toggleChecked = this.toggleChecked.bind(this);\r\n    this.toggleAll = this.toggleAll.bind(this);\r\n    this.applyFilter = this.applyFilter.bind(this);\r\n\r\n    // functions below are for join feature\r\n    this.handleJoinTable = this.handleJoinTable.bind(this);\r\n    this.cancelJoin = this.cancelJoin.bind(this);\r\n    this.selectJoinColumn = this.selectJoinColumn.bind(this);\r\n    this.runJoin = this.runJoin.bind(this);\r\n\r\n    // functions below are for first column selection\r\n    this.toggleFirstNeighbour = this.toggleFirstNeighbour.bind(this);\r\n    this.handlePlusClick = this.handlePlusClick.bind(this);\r\n    this.addToFirstCol = this.addToFirstCol.bind(this);\r\n    this.confirmAddFirstCol = this.confirmAddFirstCol.bind(this);\r\n\r\n    // functions below are for other column selection\r\n    this.toggleOtherNeighbour = this.toggleOtherNeighbour.bind(this);\r\n\r\n    // functions below are for cell preview and origin\r\n    this.togglePreviewElement = this.togglePreviewElement.bind(this);\r\n\r\n    // functions below are for recommendations\r\n    this.populateRecommendation = this.populateRecommendation.bind(this);\r\n    this.createStartRecommend = this.createStartRecommend.bind(this);\r\n    this.populateStartRecommend = this.populateStartRecommend.bind(this);\r\n  }\r\n\r\n  // As soon as the URL has been pasted, we want to fetch all tables from the pasted URL.\r\n  // We then update the originTableArray, which stores all the tables found on the pasted URL\r\n  // We also initialize tableOpenList to all false\r\n  handleURLPaste(urlPasted) {\r\n    document.body.classList.add('waiting');\r\n\r\n    // We first check if user has pasted a valid wikipedia page.\r\n\r\n    if (!urlPasted.includes(\"https://en.wikipedia.org/wiki/\")) {\r\n      document.body.classList.remove('waiting');\r\n      alert(\"Please paste a valid Wikipedia link.\");\r\n    }\r\n\r\n    // If yes, we fetch the tables from the pasted Wikipedia page\r\n    else {\r\n      let promiseArray = [];\r\n      promiseArray.push(fetchText(urlPasted));\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        // We first parse the pasted URL and store the list of tables from the pasted URL\r\n        let htmlText = values[0];\r\n        let doc = new DOMParser().parseFromString(htmlText, \"text/html\");\r\n        let originTableArray = doc.getElementsByClassName(\"wikitable\");\r\n        let tableOpenList = [];\r\n        for (let i = 0; i < originTableArray.length; ++i) {\r\n          tableOpenList.push(false);\r\n        }\r\n\r\n        // Adding support for undo:\r\n        document.body.classList.remove('waiting');\r\n\r\n        let lastAction = \"handleURLPaste\";\r\n        let prevState = \r\n          {\r\n            \"urlPasted\":\"\",\r\n            \"iframeURL\":\"\",\r\n            \"originTableArray\":[],\r\n            \"tableOpenList\":[],\r\n          };\r\n\r\n        this.setState({\r\n          originTableArray: originTableArray,\r\n          tableOpenList: tableOpenList,\r\n          urlPasted: urlPasted,\r\n          iframeURL: urlPasted,\r\n          lastAction: lastAction,\r\n          prevState: prevState,\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // This function copies the table content to clipboard\r\n\r\n  copyTable() {\r\n    const textArea = document.createElement(\"textarea\"); // this line allows the use of select() function\r\n    let copiedText = \"\";\r\n    // // We handle the case for startTable and startSubject differently\r\n\r\n    // // This case handles the copy table for explore table. We fetch data directly from tableDataExplore\r\n    // if (this.state.usecaseSelected === \"startTable\") {\r\n    //   // This case handles the copy table for explore table. We fetch data directly from tableDataExplore\r\n    //   const rowNum = this.state.tableDataExplore.length;\r\n    //   const colNum = this.state.tableDataExplore[0].length;\r\n    //   for (let i = 0; i < rowNum; ++i) {\r\n    //     for (let j = 0; j < colNum - 1; ++j) {\r\n    //       copiedText =\r\n    //         copiedText + this.state.tableDataExplore[i][j].data + \"\\t\";\r\n    //     }\r\n    //     copiedText =\r\n    //       copiedText + this.state.tableDataExplore[i][colNum - 1].data + \"\\n\";\r\n    //   }\r\n    // }\r\n\r\n    // This case handles the copy table for start subject\r\n    if (this.state.usecaseSelected === \"startSubject\" || this.state.usecaseSelected === \"startTable\") {\r\n      // We first push on the text for column headers (using the labels)\r\n      let tableHeader = this.state.tableHeader;\r\n      for (let i = 0; i < tableHeader.length; ++i) {\r\n        let curText = tableHeader[i].label;\r\n        // console.log(curText);\r\n        if (curText === undefined && tableHeader[i].length > 0) {\r\n          curText = \"\";\r\n          for (let j = 0; j < tableHeader[i].length; ++j) {\r\n            if (j > 0) {\r\n              if (i === 0) {\r\n                curText += \" AND \";\r\n              }\r\n              else {\r\n                curText += \" OR \";\r\n              }\r\n            }\r\n            curText += niceRender(tableHeader[i][j].label);\r\n          }\r\n        }\r\n        if (curText !== undefined && curText !== \"\") {\r\n          copiedText = copiedText + curText + \"\\t\";\r\n        }\r\n      }\r\n      copiedText += \"\\n\";\r\n      // Now we need to fetch the rows that are not column headers\r\n      let tableData = this.state.tableData;\r\n      const rowNum = tableData.length;\r\n      const colNum = tableData[0].length;\r\n      for (let i = 0; i < rowNum; ++i) {\r\n        for (let j = 0; j < colNum; ++j) {\r\n          let curText = niceRender(tableData[i][j].data);\r\n          if (curText !== undefined && curText !== \"\") {\r\n            copiedText = copiedText + curText + \"\\t\";\r\n          }\r\n        }\r\n        copiedText += \"\\n\";\r\n      }\r\n    }\r\n    textArea.value = copiedText;\r\n    document.body.appendChild(textArea);\r\n    textArea.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(textArea);\r\n    alert(\"Table content has been pasted!\");\r\n  }\r\n\r\n  // This function handles the toggling of the WikiPage at bottom\r\n\r\n  toggleWikiPage() {\r\n    let pageHidden = this.state.pageHidden;\r\n    this.setState({\r\n      pageHidden: !pageHidden,\r\n    });\r\n  }\r\n\r\n  // This function handles the selection of the starting task \"startSubject\"\r\n\r\n  handleStartSubject(e, taskSelected) {\r\n\r\n    if (taskSelected === \"startSubject\") {\r\n      \r\n      // Change the cursor since we are making a fetch request\r\n      document.body.classList.add('waiting');\r\n\r\n      // Since the starting task is \"startSubject\", we set the URL to be the first cell in the table\r\n      const subject = decodeURIComponent(this.state.urlPasted.slice(30)); \r\n      let tableData = _.cloneDeep(this.state.tableData);\r\n      tableData[0][0].data = subject;\r\n\r\n      // Let's run some queries here to fetch some first degree properties \r\n\r\n      // The query we will run is simply as follows\r\n      // select ?p ?o\r\n      // where {\r\n      // dbr:Barack_Obama ?p ?o.\r\n      // }\r\n\r\n      // Note: we are not taking account of the object neighbours. Subject neighbours only.\r\n\r\n      let prefixURL = \r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n      let suffixURL = \r\n        \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n      let queryBody = \r\n        \"select+%3Fp+%3Fo%0D%0Awhere+%7B%0D%0Adbr%3A\" + \r\n        regexReplace(subject) +\r\n        \"+%3Fp+%3Fo.%0D%0A%7D&\";\r\n      let queryURL = prefixURL + queryBody + suffixURL;\r\n      \r\n      let promiseArray = [fetchJSON(queryURL)]\r\n      \r\n      allPromiseReady(promiseArray).then((values) => {\r\n\r\n        // We set up the firstColSelection and firstColChecked states here\r\n        let firstColSelection = updateFirstColSelection(values[0].results.bindings);\r\n        let firstColChecked = [];\r\n        // Initially, firstColChecked is all false\r\n        for (let i = 0; i < firstColSelection.length; ++i) {\r\n          firstColChecked.push(false);\r\n        }\r\n        // console.log(firstColSelection);\r\n        // console.log(firstColChecked);\r\n\r\n        // We create the InfoObject needed for Action Panel\r\n        let tempObj = {\r\n          \"task\":\"afterStartSubject\",\r\n        };\r\n\r\n        // Adding support for undo:\r\n        let lastAction = \"handleStartSubject\";\r\n        let prevState = \r\n          {\r\n            \"usecaseSelected\":this.state.usecaseSelected,\r\n            \"tableData\":this.state.tableData,\r\n            \"tabIndex\":this.state.tabIndex,\r\n            \"curActionInfo\":this.state.curActionInfo,\r\n            \"firstColSelection\":this.state.firstColSelection,\r\n            \"firstColChecked\":this.state.firstColChecked,\r\n          };\r\n        \r\n        // Check the cursor back because we are done with the function\r\n        document.body.classList.remove('waiting');\r\n\r\n        this.setState({\r\n          usecaseSelected: taskSelected,\r\n          tableData: tableData,\r\n          firstColSelection: firstColSelection,\r\n          firstColChecked: firstColChecked,\r\n          curActionInfo: tempObj,\r\n          tabIndex: 0,\r\n          lastAction: lastAction,\r\n          prevState: prevState,\r\n        });\r\n      })\r\n    } \r\n  }\r\n\r\n  // This function handles the toggling of the starting subject's neighbours\r\n  // Also, we store this toggledIndex, so that we can display the suggestion text at the right location.\r\n  // Obviously, we need to update this.state.firstColChecked array.\r\n\r\n  toggleFirstNeighbour(e, index) {\r\n    // console.log(\"Toggled index is \"+index);\r\n    \r\n    // We first create a copy of firstColChecked\r\n    let firstColChecked = this.state.firstColChecked.slice();\r\n\r\n    // Now we deal with keyCheckedIndex\r\n    let keyCheckedIndex = index;\r\n  \r\n    // We handle the toggling here\r\n    firstColChecked[index] = !firstColChecked[index];\r\n\r\n    // Lastly, we make the state changes\r\n    this.setState({\r\n      firstColChecked:firstColChecked,\r\n      keyCheckedIndex:keyCheckedIndex,\r\n    })\r\n  }\r\n\r\n  // This function handles the toggling of a non-first column's attribute selection\r\n  // Note: since the preview feature is being addded, this function needs to handle preview as well.\r\n  // It will handle the preview similarly to how it handles populateOtherColumn, \r\n  // Except it sets previewData attribute, instead of data attribute.\r\n  toggleOtherNeighbour(e, neighbourIndex, colIndex) {\r\n    // We first get all the variables we needed\r\n    let previewColIndex;\r\n    let tableData = _.cloneDeep(this.state.tableData); \r\n    let otherColChecked = _.cloneDeep(this.state.otherColChecked);\r\n\r\n    // We first deal with the toggling of otherCheckedIndex and otherColChecked\r\n    let otherCheckedIndex = neighbourIndex;\r\n    otherColChecked[neighbourIndex] = !otherColChecked[neighbourIndex];\r\n\r\n    // We then deal with column preview.\r\n\r\n    // First step is to create a selectedNeighbours array for preview, similar to OtherColSelection.\r\n    // We will create the selectedNeighbours array from otherColSelection and otherColChecked\r\n    let selectedNeighbours = [];\r\n    for (let i = 0; i < otherColChecked.length; ++i) {\r\n      if (otherColChecked[i] === true) {\r\n        selectedNeighbours.push(this.state.otherColSelection[i]);\r\n      }\r\n    }\r\n    // console.log(selectedNeighbours);\r\n    // console.log(colIndex);\r\n    \r\n    // If selectedNeighbours is non-empty, we need to set previewColIndex to colIndex, and set tableData's previewData attribute\r\n    if (selectedNeighbours.length > 0) {\r\n      // We first set tableData, based on selectedNeighbours and colIndex. The following part will be similar to populateOtherColumn.\r\n      for (let i = 0; i < tableData.length; ++i) {\r\n        // curColumnArray is the previewData array, for each entry in search column, for all neighbours in selectedNeighbours\r\n        let curColumnArray = [];\r\n        // We loop through selectedNeighbours\r\n        for (let j = 0; j < selectedNeighbours.length; ++j) {\r\n          let curNeighbour = selectedNeighbours[j];\r\n          let firstDegNeighbours = \r\n            curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n          let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n          if (curNeighbourData !== undefined) {\r\n            curColumnArray = curColumnArray.concat(curNeighbourData);\r\n          }\r\n        }\r\n        // If curColumnArray is empty, that means this entry in search column do not have any of the attributes from selectedNeighbours\r\n        // We want to set previewData to N/A\r\n        if (curColumnArray.length === 0) {\r\n          tableData[i][colIndex].previewData = \"N/A\";\r\n        }\r\n        // Else, we have found at least one value. We want to set previewData to curColumnArray[0]\r\n        else {\r\n          tableData[i][colIndex].previewData = curColumnArray[0];\r\n        }\r\n      }\r\n\r\n      // Now that we are done with setting tableData, we set previewColIndex.\r\n      previewColIndex = colIndex;\r\n    }\r\n    // In this case, selectedNeighbours is empty, we want to set previewColIndex back to -1.\r\n    else {\r\n      previewColIndex = -1;\r\n    }\r\n\r\n    // Support for undo:\r\n    let lastAction = \"toggleOtherNeighbour\";\r\n    let prevState = \r\n    {\r\n      otherColChecked: this.state.otherColChecked,\r\n      otherColCheckedIndex: this.state.otherCheckedIndex,\r\n      tableData: this.state.tableData,\r\n      previewColIndex: this.state.previewColIndex,\r\n    }\r\n\r\n    this.setState({\r\n      otherColChecked: otherColChecked,\r\n      otherCheckedIndex: otherCheckedIndex,\r\n      tableData: tableData,\r\n      previewColIndex: previewColIndex,\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    })\r\n  }\r\n\r\n  // This function is a simple function that creates an object and passes to Action Panel\r\n  handlePlusClick() {\r\n    this.setState({\r\n      curActionInfo:{\"task\":\"plusClicked\"},\r\n      tabIndex: 0,\r\n    })\r\n  }\r\n\r\n  // This function handles when users want to add more entities to the first column\r\n  addToFirstCol() {\r\n    // We need to make the Action Panel display FirstColSelection component again.\r\n    // Before doing so, we need to first clear out this.state.firstColChecked, and this.state.keyCheckedIndex\r\n    // So that we do not have information carried over from the previous first column selection.\r\n\r\n    // First we update firstColChecked\r\n    let firstColCheckedUpdated = [];\r\n    for (let i = 0; i < this.state.firstColChecked.length; ++i) {\r\n      firstColCheckedUpdated.push(false);\r\n    }\r\n\r\n    // Then we reset keyCheckedIndex\r\n    let keyCheckedIndexUpdated = -1;\r\n\r\n    // We now set up tempObj for Action Panel\r\n    let tempObj = {\r\n      \"task\":\"afterStartSubject\",\r\n    };\r\n\r\n    // Finallym we set the states.\r\n    this.setState({\r\n      firstColChecked:firstColCheckedUpdated,\r\n      keyCheckedIndex:keyCheckedIndexUpdated,\r\n      curActionInfo:tempObj,\r\n    })\r\n  }\r\n\r\n  // This function handles manually changing cell in a table\r\n\r\n  cellChange(e, i, j) {\r\n    e.preventDefault();\r\n    let tableData = this.state.tableData.slice();\r\n    tableData[i][j].data = e.target.value;\r\n    this.setState({\r\n      tableData: tableData,\r\n    });\r\n  }\r\n\r\n  // This function updates the options for selections when we click on selection for a key column\r\n  // based on cells already filled in this column\r\n\r\n  getKeyOptions(e, colIndex) {\r\n    if (colIndex === this.state.keyColIndex) {\r\n      \r\n      // We first get all the non-empty values from the key column\r\n      let allSubject = [];\r\n      for (let i = 0; i < this.state.tableData.length; ++i) {\r\n        if (this.state.tableData[i][colIndex].data === \"\") {\r\n          break;\r\n        } else {\r\n          allSubject.push(regexReplace(this.state.tableData[i][colIndex].data));\r\n        }\r\n      }\r\n\r\n      // In here we fetch the options for first column's selection\r\n      // It uses the common dct:subject of all cells entered in the key column\r\n\r\n      // Modification: let's also find the common rdf:type dbo:xxx of cells filled.\r\n\r\n      let prefixURL =\r\n        \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n      let queryBody = \"SELECT+%3Fsomevar%0D%0AWHERE+%7B\";\r\n      for (let i = 0; i < allSubject.length; ++i) {\r\n        queryBody +=\r\n          \"%0D%0A++++++++dbr%3A\" + allSubject[i] + \"+%28dct%3Asubject%7Crdf%3Atype%29+%3Fsomevar.\";\r\n      }\r\n      let suffixURL =\r\n        \"%0D%0A%7D%0D%0A&format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n      let queryURL = prefixURL + queryBody + suffixURL;\r\n      let promiseArray = [];\r\n      promiseArray.push(fetchJSON(queryURL));\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        let myJson = values[0];\r\n        let keyColOptions = [];\r\n        // We loop through the result bindings. \r\n        // If it's from dct:subject, or rdf:type dbo:xxxx, we push it onto keyColOptions\r\n        for (let i = 0; i < myJson.results.bindings.length; ++i) {\r\n          let curValue = myJson.results.bindings[i].somevar.value;\r\n          // This clause deals with dct:subject\r\n          if (curValue.includes(\"dbpedia.org/resource/Category:\")) {\r\n            let tempObj = {};\r\n            let neighbour = curValue.slice(37);\r\n            tempObj[\"label\"] = neighbour;\r\n            tempObj[\"value\"] = neighbour;\r\n            tempObj[\"dataset\"] = \"dct\";\r\n            keyColOptions.push(tempObj);\r\n          }\r\n          // This clause deals with rdf:type dbo:xxxx\r\n          else if (curValue.includes(\"dbpedia.org/ontology/\") && !curValue.includes(\"Wikidata\")) {\r\n            let tempObj = {};\r\n            let neighbour = curValue.slice(28);\r\n            tempObj[\"label\"] = neighbour;\r\n            tempObj[\"value\"] = neighbour;\r\n            tempObj[\"dataset\"] = \"rdf\";\r\n            keyColOptions.push(tempObj);\r\n          }\r\n        }\r\n        // Take a look at keyColOptions\r\n        // console.log(keyColOptions);\r\n        // We create a copy of the optionsMap.\r\n        // Then change the entry in the optionsMap corresponding to the key column to what we have just fetched: keyColOptions.\r\n        let optionsMap = this.state.optionsMap.slice();\r\n        optionsMap[this.state.keyColIndex] = keyColOptions;\r\n        this.setState({\r\n          optionsMap: optionsMap,\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // This function updates the options for selections when we want to open selection for non-key column\r\n  // based on cells already filled in this column, and the cells in the key column\r\n  // aka: Michelle Obama is Barack Obama' wife\r\n\r\n  // It needs to update Action Panel to display the correct content.\r\n\r\n  // If this column is empty or completely filled, it will just pass keyColNeighbours to Action Panel.\r\n\r\n  getOtherOptions(e, colIndex) {\r\n\r\n    // console.log(\"Column index clicked is \"+colIndex);\r\n\r\n    // The first thing we need to do is to determine the content for otherColSelection\r\n    let otherColSelection = [];\r\n\r\n    // We check if this column is all-empty, or all filled\r\n    let colEmpty = true;\r\n    let colFilled = true;\r\n    let nonEmptyInfo = [];\r\n    for (let i = 0; i < this.state.tableData.length; ++i) {\r\n      // If some data is not \"\", that means this column is not empty\r\n      if (this.state.tableData[i][colIndex].data !== \"\") {\r\n        colEmpty = false;\r\n        nonEmptyInfo.push([i, this.state.tableData[i][colIndex].data]);\r\n      }\r\n      // If some data is \"\", that means this column is not filled\r\n      else {\r\n        colFilled = false;\r\n      }\r\n    }\r\n\r\n    // Case 1:\r\n    // If this column is non-empty, and not completely filled, we want to deal with special otherColSelection\r\n    if (colEmpty === false && colFilled === false) {\r\n      document.body.classList.add('waiting');\r\n      let prefixURL =\r\n        \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n      let suffixURL =\r\n        \"%0D%0A%7D%0D%0A%0D%0A&format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n      let queryBody = \"SELECT+%3Fsomevar%0D%0AWHERE+%7B\";\r\n      // Bugfix added on August 17th: instead of using every entry from nonEmptyInfo to determine the relation, we will use the first one\r\n      // for (let i = 0; i < nonEmptyInfo.length; ++i) {\r\n      for (let i = 0; i < 1; ++i) {\r\n        let curKeySubject = regexReplace(\r\n          this.state.tableData[nonEmptyInfo[i][0]][this.state.keyColIndex].data\r\n        );\r\n        let curEnteredSubject = regexReplace(nonEmptyInfo[i][1]);\r\n        queryBody +=\r\n          \"%0D%0A++++++++dbr%3A\" +\r\n          curKeySubject +\r\n          \"+%3Fsomevar+dbr%3A\" +\r\n          curEnteredSubject +\r\n          \".\";\r\n      }\r\n      let queryURL = prefixURL + queryBody + suffixURL;\r\n      let promiseArray = [];\r\n      promiseArray.push(fetchJSON(queryURL));\r\n      allPromiseReady(promiseArray).then((values) => {\r\n      let myJson = values[0];\r\n      // we create a temporary variable to hold results from myJson.results.bindings\r\n      let tempSelection = [];\r\n      for (let i = 0; i < myJson.results.bindings.length; ++i) {\r\n        let tempObj = {};\r\n        let neighbour = myJson.results.bindings[i].somevar.value.slice(28);\r\n        tempObj[\"label\"] = neighbour;\r\n        tempObj[\"value\"] = neighbour;\r\n        tempObj[\"type\"] = \"subject\"; // for now we only allow the subject search\r\n        tempSelection.push(tempObj);\r\n      }\r\n      // We push onto otherColSelection the right elements from keyColNeighbours, based on tempSelection\r\n      // console.log(this.state.keyColNeighbours);\r\n      // console.log(tempSelection);\r\n      for (let i = 0; i < tempSelection.length; ++i) {\r\n        for (let j = 0; j < this.state.keyColNeighbours.length; ++j) {\r\n          if (tempSelection[i].value === this.state.keyColNeighbours[j].value \r\n              && tempSelection[i].type === this.state.keyColNeighbours[j].type) {\r\n            otherColSelection.push(this.state.keyColNeighbours[j]);\r\n            break; \r\n          }\r\n        }\r\n      }\r\n      // Now, we do not want to have an empty otherColSelection.\r\n      // Thus, if it is, we just want to set it as this.state.keyColNeighbours\r\n      if (otherColSelection.length === 0) {\r\n        otherColSelection = this.state.keyColNeighbours;\r\n      }\r\n      // Take a look at otherColSelection\r\n      // console.log(otherColSelection);\r\n\r\n      // Now we have figured out the content for otherColSelection, we move on otherColChecked and otherCheckedIndex.\r\n      // Every time we are running this function, we need to reset otherColChecked and otherCheckedIndex\r\n\r\n      let otherColChecked = [];\r\n      for (let i = 0; i < otherColSelection.length; ++i) {\r\n        otherColChecked.push(false);\r\n      }\r\n      let otherCheckedIndex = -1;\r\n\r\n      let tempObj = \r\n        {\r\n          \"task\":\"showOtherColSelection\",\r\n          \"colIndex\":colIndex,\r\n        }\r\n\r\n      document.body.classList.remove('waiting');\r\n      this.setState({\r\n        otherColSelection:otherColSelection,\r\n        otherColChecked:otherColChecked,\r\n        otherCheckedIndex:otherCheckedIndex,\r\n        curActionInfo:tempObj,\r\n      })\r\n      })\r\n    }\r\n\r\n    // Case 2:\r\n    // If this column is empty or completely filled, we just set otherColSelection to be keyColNeighbours\r\n    else {\r\n      otherColSelection = this.state.keyColNeighbours;\r\n      // Take a look at otherColSelection\r\n      // console.log(otherColSelection);\r\n\r\n      // Now we have figured out the content for otherColSelection, we move on otherColChecked and otherCheckedIndex.\r\n      // Every time we are running this function, we need to reset otherColChecked and otherCheckedIndex\r\n\r\n      // Maybe some modifications need to be done here when colFilled === true\r\n      let otherColChecked = [];\r\n      for (let i = 0; i < otherColSelection.length; ++i) {\r\n        otherColChecked.push(false);\r\n      }\r\n      let otherCheckedIndex = -1;\r\n\r\n      let tempObj = \r\n        {\r\n          \"task\":\"showOtherColSelection\",\r\n          \"colIndex\":colIndex,\r\n        }\r\n\r\n      window.scrollTo(0, 0);\r\n      this.setState({\r\n        otherColSelection:otherColSelection,\r\n        otherColChecked:otherColChecked,\r\n        otherCheckedIndex:otherCheckedIndex,\r\n        curActionInfo:tempObj,\r\n      })\r\n    }\r\n  }\r\n\r\n  // This function handles the the selection of a column header.\r\n  // Note: we want to deal with the selection of key column header vs non key column header differently\r\n\r\n  selectColHeader(e, colIndex) {\r\n\r\n    let tableHeader = this.state.tableHeader.slice();\r\n\r\n    if (e !== null) {\r\n\r\n      // We first get the selectedOptions\r\n      let selectedOptions = _.cloneDeep(e);\r\n      // console.log(selectedOptions);\r\n      tableHeader[colIndex] = selectedOptions;\r\n\r\n      // This part deals with the selection of a key column header\r\n      if (colIndex === this.state.keyColIndex) {\r\n        let tempObj = {};\r\n        tempObj[\"task\"] = \"populateKeyColumn\";\r\n        tempObj[\"colIndex\"] = colIndex;\r\n        tempObj[\"neighbourArray\"] = [];\r\n        // Since neighbourArray is an array, let's push on selectedOptions one by one\r\n        for (let i = 0; i < selectedOptions.length; ++i) {\r\n          tempObj.neighbourArray.push(selectedOptions[i]);\r\n        }\r\n        // console.log(tempObj);\r\n        this.setState({\r\n          tableHeader: tableHeader,\r\n          curActionInfo: tempObj,\r\n        })\r\n      }\r\n\r\n      // This part deals with the selection of a non key column header\r\n      else {\r\n        // We want to change the label of non-key column headers with respect to the label of key column\r\n        // First step: set up the label text for the key column\r\n        let keyColLabel = \"\";\r\n        for (let i = 0; i < tableHeader[this.state.keyColIndex].length; ++i) {\r\n          let labelToAdd = i > 0 ? \"&\" + tableHeader[this.state.keyColIndex][i].label : tableHeader[this.state.keyColIndex][i].label;\r\n          keyColLabel+=labelToAdd;\r\n        }\r\n        // Then, since tableHeader[colIndex] is an array, we update all element's label from the array\r\n        for (let i = 0; i < selectedOptions.length; ++i) {\r\n          let ownLabel = tableHeader[colIndex][i].type === \"subject\" ? tableHeader[colIndex][i].value : \"is \" + tableHeader[colIndex][i].value + \" of\";\r\n          tableHeader[colIndex][i].label = ownLabel + \"--\" + keyColLabel;\r\n        }\r\n        // console.log(tableHeader);\r\n\r\n        // Now, we want to ask in ActionPanel whether user wants to populate the column based on the chosen column names\r\n        let tempObj = {};\r\n        tempObj[\"task\"] = \"populateOtherColumn\";\r\n        tempObj[\"colIndex\"] = colIndex;\r\n        tempObj[\"neighbourArray\"] = [];\r\n        // Since neighbourArray is an array, let's push on selectedOptions one by one\r\n        for (let i = 0; i < selectedOptions.length; ++i) {\r\n          tempObj.neighbourArray.push(selectedOptions[i]);\r\n        }\r\n        // Because we are allowing multi-selects now, type and range are no long two single strings.\r\n        // Rather, their values can be figured out from neighbourArray\r\n        // console.log(tempObj);\r\n        this.setState({\r\n          tableHeader: tableHeader,\r\n          curActionInfo: tempObj,\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // // console.log(\"Check table header here\");\r\n    // // console.log(this.state.tableHeader);\r\n    // //  We first create a copy of the existing table headers\r\n    // let tableHeader = this.state.tableHeader.slice();\r\n\r\n    // // This part deals with the selection of key column header\r\n    // if (colIndex === this.state.keyColIndex) {\r\n    //   // We create a copy of the selected option\r\n    //   if (e !== null) {\r\n    //     let selectedOptions = e.slice();\r\n    //     // console.log(selectedOptions);\r\n    //     tableHeader[colIndex] = selectedOptions;\r\n    //     let tempObj = {};\r\n    //     tempObj[\"task\"] = \"populateKeyColumn\";\r\n    //     tempObj[\"colIndex\"] = colIndex;\r\n    //     tempObj[\"neighbourArray\"] = [];\r\n    //     // Modification here: instead of simplying passing the value, we want to pass the selectedOptions as a whole\r\n    //     // Because we need its \"dataset\" attribute\r\n    //     for (let i = 0; i < selectedOptions.length; ++i) {\r\n    //       tempObj.neighbourArray.push(selectedOptions[i]);\r\n    //     }\r\n    //     // console.log(tempObj);\r\n    //     this.setState({\r\n    //       tableHeader: tableHeader,\r\n    //       curActionInfo: tempObj,\r\n    //     });\r\n    //   }\r\n    // }\r\n    // // This part deals with the selection of non key column header\r\n    // else {\r\n    //   // The first few lines fix some pass by reference problems\r\n    //   let evalue = e.value;\r\n    //   let elabel = e.label;\r\n    //   // let ecount = e.count;\r\n    //   tableHeader[colIndex] = { value: evalue, label: elabel };\r\n    //   // We want to change the label of non-key column headers with respect to the label of key column\r\n    //   // We first create the label text for the key column\r\n    //   let keyColLabel = \"\";\r\n    //   if (this.state.keyColIndex === 0) {\r\n    //     for (let i = 0; i < tableHeader[this.state.keyColIndex].length; ++i) {\r\n    //       if (i > 0) {\r\n    //         keyColLabel += \"&\";\r\n    //       }\r\n    //       keyColLabel += tableHeader[this.state.keyColIndex][i].label;\r\n    //     }\r\n    //   } else {\r\n    //     keyColLabel = tableHeader[this.state.keyColIndex].label;\r\n    //   }\r\n    //   // Bugfix for Go Table Creation: if at this stage, keyColLable is still \"\", that means we came from the tabel union task first.\r\n    //   // In this case, tableHeader[keyColIndex] is an object, not an array. \r\n    //   // So we just set keyColLabel as tableHeader[this.state.keyColIndex].label\r\n    //   if (keyColLabel === \"\") {\r\n    //     keyColLabel = tableHeader[this.state.keyColIndex].label;\r\n    //   }\r\n    //   // We then append the current column's label to it\r\n    //   // console.log(keyColLabel);\r\n    //   tableHeader[colIndex].label =\r\n    //     tableHeader[colIndex].label + \"--\" + keyColLabel;\r\n    //   // After we have selected the column header, not only do we want to fill in the name of the column, we also want to\r\n    //   // ask in ActionPanel whether user wants to populate the column based on the chosen column name\r\n    //   let tempObj = {};\r\n    //   tempObj[\"task\"] = \"populateOtherColumn\";\r\n    //   tempObj[\"colIndex\"] = colIndex;\r\n    //   tempObj[\"neighbour\"] = e.value;\r\n    //   tempObj[\"type\"] = e.type;\r\n\r\n    //   // If type is subject, let's check if this neighbour also has a \"range\" (rdfs:range)\r\n    //   if (e.type === \"subject\" && e.range !== undefined) {\r\n    //     tempObj[\"range\"] = e.range;\r\n    //   }\r\n    //   // console.log(tempObj);\r\n\r\n    //   this.setState({\r\n    //     tableHeader: tableHeader,\r\n    //     curActionInfo: tempObj,\r\n    //   });\r\n    // }\r\n  }\r\n\r\n  // This function is a helper function for populateKeyColumn. It is similar to getOtherColPromise.\r\n  // It makes an array of queries to find the union of neighbours for the first column (key column).\r\n\r\n  // Some modification needs to be made to the queries\r\n  // So that ?o in the first query and ?s in the second query have to be included as well.\r\n\r\n  // It takes in three parameters\r\n  // 1) tableData: tableData (with updated values in the first column)\r\n  // 2) type: either \"subject\" or \"object\"\r\n  // 3) colIndex:  integer representing which column's neighbours we are fetching\r\n\r\n  getNeighbourPromise(tableData, type, colIndex) {\r\n    // console.log(tableData);\r\n    // console.log(type);\r\n\r\n    // Query we make if type is subject\r\n\r\n    // select ?p ?o ?range ?subPropertyOf\r\n    // where {\r\n    // dbr:Barack_Obama ?p ?o.\r\n    // OPTIONAL {?p rdfs:range ?range}.\r\n    // OPTIONAL {?p rdfs:subPropertyOf ?subPropertyOf}.\r\n    // }\r\n\r\n    // Query we make if type is object\r\n\r\n    // select ?s ?p ?range ?subPropertyOf\r\n    // where {\r\n    // ?s ?p dbr:Barack_Obama.\r\n    // OPTIONAL {?p rdfs:range ?range}.\r\n    // OPTIONAL {?p rdfs:subPropertyOf ?subPropertyOf}.\r\n    // }\r\n\r\n    // BUGFIX August 17th: The query below may need to be used for performance issues\r\n\r\n    // select ?s ?p ?range ?subPropertyOf\r\n    // where {\r\n    // ?s ?p dbr:Barack_Obama.\r\n    // OPTIONAL {?p rdfs:range ?range}.\r\n    // OPTIONAL {?p rdfs:subPropertyOf ?subPropertyOf}.\r\n    // {\r\n    // select ?p (count(?s) as ?count) \r\n    // where {\r\n    // ?s ?p dbr:Barack_Obama\r\n    // }\r\n    // group by ?p\r\n    // having (count(?s) <= maxFetchCount)\r\n    // }\r\n    // }\r\n\r\n    let promiseArray = [];\r\n    let prefixURL =\r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURL =\r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      let cellValue = tableData[i][colIndex].data === \"N/A\" ? \"NONEXISTINGSTRING\" : regexReplace(tableData[i][colIndex].data);\r\n      // console.log(cellValue);\r\n      let queryBody;\r\n      if (type === \"subject\") {\r\n        queryBody =\r\n          \"select+%3Fp+%3Fo+%3Frange+%3FsubPropertyOf%0D%0Awhere+%7B%0D%0Adbr%3A\" +\r\n          cellValue +\r\n          \"+%3Fp+%3Fo.%0D%0AOPTIONAL+%7B%3Fp+rdfs%3Arange+%3Frange%7D.%0D%0AOPTIONAL+%7B%3Fp+rdfs%3AsubPropertyOf+%3FsubPropertyOf%7D.%0D%0A%7D&\";\r\n      }\r\n      else {\r\n        // queryBody = \r\n        //   \"select+%3Fs+%3Fp+%3Frange+%3FsubPropertyOf%0D%0Awhere+%7B%0D%0A%3Fs+%3Fp+dbr%3A\" +\r\n        //   cellValue +\r\n        //   \".%0D%0AOPTIONAL+%7B%3Fp+rdfs%3Arange+%3Frange%7D.%0D%0AOPTIONAL+%7B%3Fp+rdfs%3AsubPropertyOf+%3FsubPropertyOf%7D.%0D%0A%7D&\";\r\n\r\n        // Above code is the query before bugfix on August 17th. Below is the fixed version of the code\r\n        queryBody = \r\n          \"select+%3Fs+%3Fp+%3Frange+%3FsubPropertyOf%0D%0Awhere+%7B%0D%0A%3Fs+%3Fp+dbr%3A\" + \r\n          cellValue + \r\n          \".%0D%0AOPTIONAL+%7B%3Fp+rdfs%3Arange+%3Frange%7D.%0D%0AOPTIONAL+%7B%3Fp+rdfs%3AsubPropertyOf+%3FsubPropertyOf%7D.%0D%0A%7B%0D%0Aselect+%3Fp+%28count%28%3Fs%29+as+%3Fcount%29+%0D%0Awhere+%7B%0D%0A%3Fs+%3Fp+dbr%3A\" +\r\n          cellValue + \r\n          \"%0D%0A%7D%0D%0Agroup+by+%3Fp%0D%0Ahaving+%28count%28%3Fs%29+%3C%3D+\" + \r\n          maxFetchCount +\r\n          \"%29%0D%0A%7D%0D%0A%7D%0D%0A&\";\r\n      }\r\n      let queryURL = prefixURL + queryBody + suffixURL;\r\n      let curPromise = fetchJSON(queryURL);\r\n      promiseArray.push(curPromise);\r\n    }\r\n    return promiseArray;\r\n  }\r\n\r\n  // This function populates the key column\r\n  // It also fetches the neighbours of the key column (based on the first cell in the table)\r\n  // as well as setting the origins of cells in the key column\r\n\r\n  // Note: we need to do some modification here. Instead of having a fixed number of entries in the key column,\r\n  // Let's make it more flexible. (but also pose a limit, so we don't get way too many entries)\r\n\r\n  populateKeyColumn(e, colIndex, neighbourArray) {\r\n    // Let's first take a look at parameters passed in\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n\r\n    // Let's create a helper function to generate the query text.\r\n    let queryURL = keyQueryGen(neighbourArray)\r\n    // console.log(queryURL);\r\n\r\n    // If queryURL is error, we have encountered some previously unseen datatypes. In this case we just print an error.\r\n    if (queryURL === \"ERROR\") {\r\n      alert(\"Unsupported datatype in selected neighbours. Please select some other neighbours.\")\r\n    }\r\n\r\n    // Else we run the body of the funnction\r\n\r\n    else {\r\n      document.body.classList.add('waiting');\r\n\r\n      let promiseArray = [fetchJSON(queryURL)];\r\n\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        // let's first work with the first promise result: fill in table data with the entities we have fetched\r\n  \r\n        // console.log(values[0].results.bindings);\r\n\r\n        // We set the tableHeader[0] here, from a deep copy of tableHeader\r\n        // tableHeader[0] should be set as neighbourArray\r\n        let tableHeader = _.cloneDeep(this.state.tableHeader);\r\n        tableHeader[0] = neighbourArray;\r\n\r\n        // Addition: we want to display the first column's header correctly. Let's add support for that\r\n        let firstColHeaderInfo = [];\r\n        firstColHeaderInfo.push(neighbourArray);\r\n  \r\n        // This part sets the data for each cell\r\n        let tableData = _.cloneDeep(this.state.tableData);\r\n  \r\n        if (this.state.tableHeader[0].length === 0) {\r\n          tableData = setFirstColumnData(\r\n            values[0].results.bindings,\r\n            tableData,\r\n            tableHeader,\r\n            colIndex\r\n          )\r\n        }\r\n  \r\n        // console.log(tableData);\r\n  \r\n        // We need to make modification here: find neighbours of a column, instead of neighbours of a cell\r\n        // To do this, we need to use this tableData to ask more queries (number of queires is equal to tableData.length)\r\n        let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", colIndex);\r\n        let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", colIndex);\r\n        allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n        allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n          // We call updateNeighbourInfo here because we are changing the rows\r\n          let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n          let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n          let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n          // Lastly, we set up the information for the action panel\r\n          let tempObj = {};\r\n          tempObj[\"task\"] = \"showStartRecommend\";\r\n          tempObj[\"colIndex\"] = colIndex;\r\n          tempObj[\"recommendArray\"] = this.createStartRecommend(keyColNeighbours);\r\n  \r\n          // Support for undo: \r\n          // Let's save the previous state in an object\r\n          let lastAction = \"populateKeyColumn\";\r\n          let prevState = \r\n            {\r\n              \"keyColIndex\":this.state.keyColIndex,\r\n              \"keyColNeighbours\":this.state.keyColNeighbours,\r\n              \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n              \"curActionInfo\":this.state.curActionInfo,\r\n              \"tableData\":this.state.tableData,\r\n              \"tableHeader\":this.state.tableHeader,\r\n              \"firstColFilled\":this.state.firstColFilled,\r\n              \"firstColHeaderInfo\":this.state.firstColHeaderInfo,\r\n            };\r\n\r\n          document.body.classList.remove('waiting');\r\n  \r\n          this.setState({\r\n            keyColIndex: colIndex,\r\n            keyColNeighbours: keyColNeighbours,\r\n            firstDegNeighbours: firstDegNeighbours,\r\n            // curActionInfo: {\"task\":\"afterPopulateColumn\"},\r\n            curActionInfo: tempObj, // Changed on Aug 20th\r\n            tableData: tableData,\r\n            tableHeader: tableHeader,\r\n            firstColFilled: true,\r\n            firstColHeaderInfo: firstColHeaderInfo,\r\n            lastAction: lastAction,\r\n            prevState: prevState,\r\n          });\r\n        })\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  // This function adds more entities to the first column.\r\n  // It should be similar to populateKeyColumn, with some differences\r\n\r\n  confirmAddFirstCol(e, neighbourArray) {\r\n    // console.log(neighbourArray);\r\n    let queryURL = keyQueryGen(neighbourArray);\r\n\r\n    // Let's first make sure that the neighbourArray do not contain attributes of unknown datatypes.\r\n    if (queryURL === \"ERROR\") {\r\n      alert(\"Unsupported datatype in selected neighbours. Please select some other neighbours.\");\r\n    }\r\n\r\n    else {\r\n      document.body.classList.add(\"waiting\");\r\n\r\n      let promiseArray = [fetchJSON(queryURL)];\r\n\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        // console.log(values[0].results.bindings);\r\n        // Now we append the new query results to tableData\r\n        let numNewRows = Math.min(values[0].results.bindings.length, initialRowNum);\r\n        let tableData = [];\r\n        // We first push on numNewRows number of rows, while setting up data and origin\r\n        for (let i = 0; i < numNewRows; ++i) {\r\n          let tempRow = [];\r\n          for (let j = 0; j < this.state.tableHeader.length; ++j) {\r\n            if (j === 0) {\r\n              tempRow.push({\r\n                data: values[0].results.bindings[i].somevar.value.slice(28),\r\n                origin: [values[0].results.bindings[i].somevar.value.slice(28)]\r\n              })\r\n            }\r\n            else {\r\n              tempRow.push({ data: \"\", origin: []});\r\n            }\r\n          }\r\n          tableData.push(tempRow);\r\n        }\r\n        // We concat this.state.tableData and tableData together, and dedup by first column's data\r\n        tableData = _.cloneDeep(this.state.tableData).concat(tableData);\r\n        tableData = _.uniqBy(tableData, function(x) {return x[0].data;});\r\n        // console.log(tableData);\r\n\r\n        // Now, we move on to update firstDegNeighbours and keyColNeighbours\r\n        let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", 0);\r\n        let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", 0);\r\n        allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n        allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n  \r\n          // We call updateNeighbourInfo here because we are changing the rows\r\n          let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n          let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n          let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n          document.body.classList.remove('waiting');\r\n\r\n          let firstColHeaderInfo = _.cloneDeep(this.state.firstColHeaderInfo);\r\n          firstColHeaderInfo.push(neighbourArray);\r\n\r\n          // Support for undo\r\n          let lastAction = \"confirmAddFirstCol\";\r\n          let prevState = \r\n            {\r\n              \"tableData\": this.state.tableData,\r\n              \"keyColNeighbours\": this.state.keyColNeighbours,\r\n              \"firstDegNeighbours\": this.state.firstDegNeighbours,\r\n              \"firstColHeaderInfo\": this.state.firstColHeaderInfo,\r\n              \"previewColIndex\": this.state.previewColIndex,\r\n            }\r\n  \r\n          this.setState({\r\n            tableData: tableData,\r\n            keyColNeighbours: keyColNeighbours,\r\n            firstDegNeighbours: firstDegNeighbours,\r\n            firstColHeaderInfo: firstColHeaderInfo,\r\n            curActionInfo: {\"task\":\"afterPopulateColumn\"},\r\n            previewColIndex: -1,\r\n            lastAction: lastAction,\r\n            prevState: prevState,\r\n          });\r\n        })\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // // TEST FUNCTION----------------------------------------------------\r\n\r\n  // getOtherColPromiseTwo(neighbour, type) {\r\n  //   let promiseArray = [];\r\n  //   // The following is the query we will make\r\n\r\n  //   // SELECT ?key ?val\r\n  //   // WHERE{\r\n  //   //       ?key (dbo:spouse|dbp:spouse) ?val.\r\n  //   //       VALUES ?key {dbr:Barack_Obama dbr:Ronald_Reagan dbr:Donald_Trump }\r\n  //   // }\r\n\r\n\r\n  //   let prefixURL = \r\n  //     \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n  //   let suffixURL = \r\n  //     \"%7D%0D%0A%7D%0D%0A&format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=300000&debug=on&run=+Run+Query+\";\r\n  //   let queryBody;\r\n  //   // This clause handles the case of \"Obama -> property -> object\"\r\n  //   if (type === \"subject\") {\r\n  //     queryBody = \r\n  //       \"SELECT+%3Fkey+%3Fval%0D%0AWHERE%7B%0D%0A++++++%3Fkey+%28dbo%3A\" +\r\n  //       regexReplace(neighbour) +\r\n  //       \"%7Cdbp%3A\" +\r\n  //       regexReplace(neighbour) +\r\n  //       \"%29+%3Fval.%0D%0A++++++VALUES+%3Fkey+%7B\";\r\n  //   } \r\n  //   // This clause handles the case of \"subject -> property -> Obama\"\r\n  //   else {\r\n  //     queryBody = \r\n  //       \"SELECT+%3Fkey+%3Fval%0D%0AWHERE%7B%0D%0A++++++%3Fval+%28dbo%3A\" +\r\n  //       regexReplace(neighbour) +\r\n  //       \"%7Cdbp%3A\" +\r\n  //       regexReplace(neighbour) +\r\n  //       \"%29+%3Fkey.%0D%0A++++++VALUES+%3Fkey+%7B\";\r\n  //   }\r\n  //   for (let i = 0; i < this.state.tableData.length; ++i) {\r\n  //     let cellValue = regexReplace(\r\n  //       this.state.tableData[i][this.state.keyColIndex].data\r\n  //     );\r\n  //     // N/A's will block the search, let's replace it with some string that does not block the search\r\n  //     if (cellValue === \"N/A\") {\r\n  //       cellValue = \"NONEXISTINGSTRING\";\r\n  //     }\r\n  //     let curQueryText = \"dbr%3A\"+cellValue+\"+\";\r\n  //     queryBody+=curQueryText;\r\n  //   }\r\n  //   let queryURL = prefixURL + queryBody + suffixURL;\r\n  //   // console.log(queryURL);\r\n  //   promiseArray.push(fetchJSON(queryURL));\r\n  //   return promiseArray;\r\n  // }\r\n\r\n  // The following function serves as a helper function for \"populateOtherColumn\" and \"populateSameNeighbour\"\r\n  // It makes an array of queries, which may affect the performance of our system. Let's change it now.\r\n\r\n  getOtherColPromise(neighbour, type) {\r\n    let promiseArray = [];\r\n    let prefixURL =\r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURL =\r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    for (let i = 0; i < this.state.tableData.length; ++i) {\r\n      let cellValue = regexReplace(\r\n        this.state.tableData[i][this.state.keyColIndex].data\r\n      );\r\n      // N/A's will block the search, let's replace it with some string that does not block the search\r\n      if (cellValue === \"N/A\") {\r\n        cellValue = \"NONEXISTINGSTRING\";\r\n      }\r\n      let queryBody;\r\n      if (type === \"subject\") {\r\n        queryBody =\r\n          \"SELECT+%3Fsomevar%0D%0AWHERE+%7B%0D%0A++++++++dbr%3A\" +\r\n          cellValue +\r\n          \"+%28dbo%3A\" +\r\n          regexReplace(neighbour) +\r\n          \"%7Cdbp%3A\" +\r\n          regexReplace(neighbour) +\r\n          \"%29+%3Fsomevar.%0D%0A%7D%0D%0A%0D%0A&\";\r\n      } else {\r\n        queryBody =\r\n          \"SELECT+%3Fsomevar+%0D%0AWHERE+%7B%0D%0A++++++++%3Fsomevar+%28dbo%3A\" +\r\n          regexReplace(neighbour) +\r\n          \"%7Cdbp%3A\" +\r\n          regexReplace(neighbour) +\r\n          \"%29+dbr%3A\" +\r\n          cellValue +\r\n          \"%0D%0A%7D%0D%0A&\";\r\n      }\r\n      let queryURL = prefixURL + queryBody + suffixURL;\r\n      let curPromise = fetchJSON(queryURL);\r\n      promiseArray.push(curPromise);\r\n    }\r\n    return promiseArray;\r\n  }\r\n\r\n  // document.body.classList.add('waiting');\r\n\r\n  // console.log(neighbourIndex);\r\n\r\n  // Support for \"populateSameRange\":\r\n\r\n  // When the range is not equal to undefined, we want to ask user if they want to populate all other attributes from this range\r\n  // console.log(range);\r\n\r\n  // we need to make a number of queries in the form of: dbr:somekeycolumnentry dbp:neighbour|dbo:neighbour somevar\r\n  // let promiseArrayTwo = this.getOtherColPromiseTwo(neighbour, type); // this is for testing\r\n  // let promiseArray = this.getOtherColPromise(neighbour, type);\r\n\r\n  // allPromiseReady(promiseArray).then((values) => {\r\n  // // allPromiseReady(promiseArrayTwo).then((testValues) => {\r\n\r\n  // //   // Let's compare the different values we get from getOtherColPromise and getOtherColPromiseTwo\r\n  // //   console.log(values);\r\n  // //   console.log(testValues);\r\n\r\n  // //   // Now we need to process the testValues\r\n\r\n  // //   let pairArray = [];\r\n\r\n  // //   // First we removed the prefixes from resultArray\r\n  // //   for (let i=0; i<testValues[0].results.bindings.length; ++i) {\r\n  // //     pairArray.push(\r\n  // //       {\r\n  // //         \"key\":removePrefix(testValues[0].results.bindings[i].key.value),\r\n  // //         \"value\":removePrefix(testValues[0].results.bindings[i].val.value)\r\n  // //       }\r\n  // //     )\r\n  // //   }\r\n  // //   console.log(pairArray);\r\n\r\n  // //   // Then we create a keyArray\r\n  // //   let keyArray = [];\r\n\r\n  // //   for (let i=0; i<this.state.tableData.length; ++i) {\r\n  // //     keyArray.push(this.state.tableData[i][this.state.keyColIndex].data);\r\n  // //   }\r\n  // //   console.log(keyArray);\r\n  populateOtherColumn(e, colIndex, neighbourArray) {\r\n\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    // We use a boolean to keep track of if any cell contains multiple values\r\n    let hasMultiple = false;\r\n\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // curColumnArray is the dataArray for each entry in search column, for all neighbours in neighbourArray.\r\n      let curColumnArray = [];\r\n      // We loop through the neighbourArray\r\n      for (let j = 0; j < neighbourArray.length; ++j) {\r\n        // For each neighbour in neighbourArray, we check to see if entries in search column have values for this neighbour\r\n        let curNeighbour = neighbourArray[j];\r\n        let firstDegNeighbours = \r\n          curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n        // console.log(firstDegNeighbours);\r\n        let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n        // console.log(\"Current neighbour data is \"+curNeighbourData);\r\n        // If yes, we want to concat those values with curColumnArray\r\n        if (curNeighbourData !== undefined) {\r\n          curColumnArray = curColumnArray.concat(curNeighbourData);\r\n        }\r\n      }\r\n      // If curColumnArray is empty, that means this entry in searchColumn do not have any of the attributes from neighbourArray\r\n      if (curColumnArray.length === 0) {\r\n        tableData[i][colIndex].data = \"N/A\";\r\n      }\r\n      // Otherwise, we have found at least one value.\r\n      else {\r\n        // we first set the data for the cell using curColumnArray[0]\r\n        tableData[i][colIndex].data = curColumnArray[0];\r\n        // we then set origin for the cell. Need to use neighbourArray to get the correct text for the origin\r\n        let originToAdd = createNeighbourText(neighbourArray) + \":\" + curColumnArray[0];\r\n        let keyOrigin = tableData[i][this.state.keyColIndex].origin.slice();\r\n        keyOrigin.push(originToAdd);\r\n        tableData[i][colIndex].origin = keyOrigin;\r\n        // console.log(keyOrigin)\r\n\r\n        // Now, if curColumnArray has length longer than one, we want to set hasMultiple to true\r\n        // We also create an extra attribute for the current tableData cell, called dataArray, whose max length is maxNeighbourCount.\r\n        if (curColumnArray.length > 1) {\r\n          hasMultiple = true;\r\n          let lastIndex = Math.min(curColumnArray.length, maxNeighbourCount);\r\n          tableData[i][colIndex].dataArray = curColumnArray.slice(1, lastIndex);\r\n        } \r\n      }\r\n    }\r\n    // Now, we are done with updating tableData.\r\n    // We want to update tableHeader as well.\r\n    let tableHeader = _.cloneDeep(this.state.tableHeader);\r\n    tableHeader[colIndex] = neighbourArray;\r\n\r\n    // We start setting up the content for the Action Panel.\r\n\r\n    let recommendArray = createRecommendArray(neighbourArray, this.state.keyColNeighbours);\r\n    // console.log(recommendArray);\r\n\r\n    // tempObj stores the information passed to ActionPanel\r\n    let tempObj = {};\r\n\r\n    // Case 1: hasMultiple is true, and there are recommendations\r\n    if (hasMultiple === true && recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"sameNeighbourAndRecommendation\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n      tempObj[\"recommendArray\"] = recommendArray;\r\n    }\r\n    // Case 2: only hasMultiple is true\r\n    else if (hasMultiple === true) {\r\n      tempObj[\"task\"] = \"populateSameNeighbour\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n    }\r\n    // Case 3: only hasRecommendation is true\r\n    else if (recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"populateRecommendation\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"recommendArray\"] = recommendArray; \r\n    }\r\n    // Case 4: neither hasMultiple or hasRecommendation is true. In which case we just tell users that they can fill more columns.\r\n    else {\r\n      tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    }\r\n\r\n    // Support for undo: \r\n    // Let's save the previous state in an object\r\n    let lastAction = \"populateOtherColumn\";\r\n    let prevState = \r\n      {\r\n        \"curActionInfo\":this.state.curActionInfo,\r\n        \"tableData\":this.state.tableData,\r\n        \"tableHeader\":this.state.tableHeader,\r\n        \"previewColIndex\":this.state.previewColIndex,\r\n      };\r\n\r\n    this.setState({\r\n      curActionInfo: tempObj,\r\n      tableData: tableData,\r\n      tableHeader: tableHeader,\r\n      previewColIndex: -1,\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    });\r\n\r\n\r\n    // let tableData = _.cloneDeep(this.state.tableData);\r\n    // let firstDegNeighbours = type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n    // let longestDataArray = [];\r\n    // for (let i = 0; i < tableData.length; ++i) {\r\n    //   let dataArray = firstDegNeighbours[i][neighbour];\r\n    //   // console.log(dataArray);\r\n    //   // If dataArray is empty, this current entry in search column does not have this neighbour at all.\r\n    //   if (dataArray === undefined) {\r\n    //     tableData[i][colIndex].data = \"N/A\";\r\n    //   } \r\n    //   // Otherwise, we have found at least one value. Let's use dataArray[0]\r\n    //   else {\r\n    //     // we first set data for the cell\r\n    //     tableData[i][colIndex].data = dataArray[0];\r\n    //     // we then set origin for the cell. The origin depends on whether type is \"subject\" or \"object\"\r\n    //     let originToAdd = type === \"subject\" ? neighbour + \":\" + dataArray[0] : \"is \" + neighbour + \" of:\" + dataArray[0];\r\n    //     let keyOrigin = tableData[i][this.state.keyColIndex].origin.slice();\r\n    //     keyOrigin.push(originToAdd);\r\n    //     tableData[i][colIndex].origin = keyOrigin;\r\n    //     // If dataArray's length is longer than longestDataArray's length, we want to update it\r\n    //     if (dataArray.length > longestDataArray.length) {\r\n    //       longestDataArray = dataArray;\r\n    //     }\r\n    //   }\r\n    // }\r\n    // // console.log(longestDataArray);\r\n    // let maxCount = Math.min(longestDataArray.length, maxNeighbourCount);\r\n    // let remainNeighbourCount = maxCount - 1;\r\n\r\n    // console.log(remainNeighbourCount);\r\n    \r\n    // // Now we set up the content for ActionPanel\r\n    // let tempObj = {};\r\n\r\n    // // In this case, we give users option to populate duplicate neighbours\r\n    // if (remainNeighbourCount > 0) {\r\n    //   tempObj[\"task\"] = \"populateSameNeighbour\";\r\n    //   tempObj[\"colIndex\"] = colIndex;\r\n    //   tempObj[\"neighbour\"] = neighbour;\r\n    //   tempObj[\"type\"] = type;\r\n    //   tempObj[\"numCols\"] = remainNeighbourCount;\r\n    //   if (range !== undefined) {\r\n    //     tempObj[\"range\"] = range;\r\n    //   }\r\n    // }\r\n    // // In this case, users are not populating column with duplicate names, but it has a range.\r\n    // // We may need to ask user if they want to populate other columns from the same range\r\n    // else if (range !== undefined) {\r\n    //   let siblingNeighbour = [];\r\n    //   // console.log(\"Range is \"+range);\r\n    //   // console.log(this.state.keyColNeighbours);\r\n    //   for (let i = 0; i < this.state.keyColNeighbours.length; ++i) {\r\n    //     if (\r\n    //       this.state.keyColNeighbours[i].range === range &&\r\n    //       this.state.keyColNeighbours[i].value !== neighbour\r\n    //     ) {\r\n    //       siblingNeighbour.push(this.state.keyColNeighbours[i]);\r\n    //     }\r\n    //   }\r\n    //   // If we have found columns from the same range (other than the current neighbour),\r\n    //   console.log(siblingNeighbour);\r\n    //   // If sibling neighbour is non-empty, we give user the option to populate other columns from the same range.\r\n    //   if (siblingNeighbour.length > 0) {\r\n    //     // Let's do some string processing to improve UI clarity\r\n    //     let rangeLiteral = \"\";\r\n    //     if (range.includes(\"http://dbpedia.org/ontology/\")) {\r\n    //       rangeLiteral = range.slice(28);\r\n    //     } else if (range.includes(\"http://www.w3.org/2001/XMLSchema#\")) {\r\n    //       rangeLiteral = range.slice(33);\r\n    //     } else {\r\n    //       rangeLiteral = range;\r\n    //     }\r\n    //     tempObj[\"task\"] = \"populateSameRange\";\r\n    //     tempObj[\"colIndex\"] = colIndex;\r\n    //     tempObj[\"range\"] = rangeLiteral;\r\n    //     // console.log(siblingNeighbour);\r\n    //     tempObj[\"siblingNeighbour\"] = siblingNeighbour;\r\n    //   }\r\n    //   // Else, if we have NOT found anything from the same range, we tell user that they can populate more columns\r\n    //   else {\r\n    //     tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    //   }\r\n    // }\r\n    // // In this case, we tell users that they can populate more columns\r\n    // else {\r\n    //   tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    // }\r\n    // // Support for undo: \r\n    // // Let's save the previous state in an object\r\n    // let lastAction = \"populateOtherColumn\";\r\n    // let prevState = \r\n    //   {\r\n    //     \"curActionInfo\":this.state.curActionInfo,\r\n    //     \"tableData\":this.state.tableData,\r\n    //   };\r\n\r\n    // this.setState({\r\n    //   curActionInfo: tempObj,\r\n    //   tableData: tableData,\r\n    //   lastAction: lastAction,\r\n    //   prevState: prevState,\r\n    // });\r\n  }\r\n\r\n  // This function is a helper function that takes in 9 parameters:\r\n  // Note: this function does not make any fetch requests, thus does NOT involve promises.\r\n\r\n  // 1) colIndex:          index of the column that we just filled (ex. 1, if we just filled in column 1)\r\n  // 2) neighbourArray:    an array of neighbour objects (two important attributes: value, type)\r\n  // 3) numCols:           number of columns that we need to fill with the duplicated neighbour. (ex. 2, if we have filled in one almaMater, but there are three in total)\r\n  \r\n  // 4) keyColIndex:                 original key column index\r\n  // 5) tableHeader:                 original tableHeader\r\n  // 6) tableData:                   original tableData\r\n  // 7) optionsMap:                  original optionsMap\r\n  // 8) selectedClassAnnotation:     original selectedClassAnnotation\r\n\r\n  // 9) fillRecommendation:              When true, decrement requiredLength in code by 1.\r\n\r\n  // and returns an object with 5 values:\r\n  // 1) tableHeader:                tableHeader after modification\r\n  // 2) tableData:                  tableData after modification\r\n  // 3) optionsMap:                 optionsMap after modification\r\n  // 4) selectedClassAnnotation:    selectedClassAnnotation after modification\r\n  // 5) keyColIndex:                keyColIndex after modification\r\n\r\n  addAllNeighbour(\r\n    colIndex,\r\n    neighbourArray,\r\n    numCols,\r\n    keyColIndex,\r\n    tableHeader,\r\n    tableData,\r\n    optionsMap,\r\n    selectedClassAnnotation,\r\n    fillRecommendation\r\n  ) {\r\n    // Let's first check if all the variables are as expected\r\n\r\n    // console.log(\"Column index is: \"+colIndex);\r\n    // console.log(\"NeighbourArray is: \");\r\n    // console.log(neighbourArray);\r\n    // console.log(\"Number of columns to fill is: \"+numCols);\r\n    // console.log(\"Key column index \"+keyColIndex);\r\n    // console.log(\"Table header is: \");\r\n    // console.log(tableHeader);\r\n    // console.log(\"Table Data is: \");\r\n    // console.log(tableData);\r\n    // console.log(\"Options map is: \");\r\n    // console.log(optionsMap);\r\n    // console.log(\"selected class annotation is \");\r\n    // console.log(selectedClassAnnotation);\r\n    // console.log(\"End of attributes check\\n\\n\\n\\n\");\r\n\r\n    // First thing should be to insert \"numCols\" number of empty columns right after column with index \"colIndex\"\r\n    const rowNum = tableData.length;\r\n    const colNum = tableData[0].length;\r\n\r\n    // Let's check if we need to modify keyColIndex:\r\n    // if colIndex < keyColIndex, we need to increase keyColIndex by numCols\r\n    let keyColIndexUpdated = keyColIndex;\r\n    if (colIndex < keyColIndex) {\r\n      keyColIndexUpdated+=numCols;\r\n    }\r\n    // console.log(\"Updated key column index is \"+keyColIndexUpdated);\r\n\r\n    // We first take care of table data's (empty) additions\r\n    let tableDataUpdated = [];\r\n    for (let i = 0; i < rowNum; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < colIndex + 1; ++j) {\r\n        tempRow.push(tableData[i][j]);\r\n      }\r\n      // we add in numCols number of empty columns\r\n      for (let j = 0; j < numCols; ++j) {\r\n        tempRow.push({ data: \"\", origin: [] });\r\n      }\r\n      for (let k = colIndex + 1; k < colNum; ++k) {\r\n        tempRow.push(tableData[i][k]);\r\n      }\r\n      tableDataUpdated.push(tempRow);\r\n    }\r\n    // console.log(\"Updated table data is \");\r\n    // console.log(tableDataUpdated);\r\n\r\n    // we now take care of table header's addition.\r\n    let tableHeaderUpdated = [];\r\n    for (let j = 0; j < colIndex + 1; ++j) {\r\n      tableHeaderUpdated.push(tableHeader[j]);\r\n    }\r\n    // Now we decide what the newly pushed tableHeader should look like\r\n    let newTableHeader;\r\n    // If we are not populating new suggestions, we simply use tableHeader[colIndex]\r\n    if (fillRecommendation === false) {\r\n      newTableHeader = tableHeader[colIndex];\r\n    }\r\n    // else, it is an length one array of object. Object has 2 properties: value and label\r\n    else {\r\n      // We need to figure out what this label is\r\n      let keyColLabel = \"\";\r\n      for (let i = 0; i < tableHeader[keyColIndex].length; ++i) {\r\n        let labelToAdd = i > 0 ? \"&\" + tableHeader[keyColIndex][i].label : tableHeader[keyColIndex][i].label;\r\n        keyColLabel+=labelToAdd;\r\n      }\r\n      let ownLabel = neighbourArray[0].type === \"subject\" ? neighbourArray[0].value : \"is \" + neighbourArray[0].value + \" of\";\r\n      newTableHeader = [\r\n        {\r\n          \"value\" : neighbourArray[0].value,\r\n          \"label\" : ownLabel + \"--\" + keyColLabel,\r\n          \"type\"  : neighbourArray[0].type,\r\n        }\r\n      ]\r\n    }\r\n    for (let j = 0; j < numCols; ++j) {\r\n      tableHeaderUpdated.push(newTableHeader);\r\n    }\r\n    for (let k = colIndex + 1; k < colNum; ++k) {\r\n      tableHeaderUpdated.push(tableHeader[k]);\r\n    }\r\n    // console.log(\"Updated table header is \");\r\n    // console.log(tableHeaderUpdated);\r\n\r\n    // We now take care of selectedClassAnnotation. For now, we just add some empty arrays to it\r\n    let selectedClassAnnotationUpdated = [];\r\n    for (let j = 0; j < colIndex; ++j) {\r\n      selectedClassAnnotationUpdated.push(selectedClassAnnotation[j]);\r\n    }\r\n    for (let j = 0; j < numCols; ++j) {\r\n      selectedClassAnnotationUpdated.push([]);\r\n    }\r\n    for (let k = colIndex; k < colNum-1; ++k) {\r\n      selectedClassAnnotationUpdated.push(selectedClassAnnotation[k]);\r\n    }\r\n    // console.log(\"Updated class annotation is \");\r\n    // console.log(selectedClassAnnotationUpdated);\r\n\r\n    // we now take care of optionMap's addition. We just need to add some empty arrays to it\r\n    let optionsMapUpdated = [];\r\n    for (let j = 0; j < colIndex + 1; ++j) {\r\n      optionsMapUpdated.push(optionsMap[j]);\r\n    }\r\n    for (let j = 0; j < numCols; ++j) {\r\n      optionsMapUpdated.push([]);\r\n    }\r\n    for (let k = colIndex + 1; k < colNum; ++k) {\r\n      optionsMapUpdated.push(optionsMap[k]);\r\n    }\r\n    // console.log(\"Updated options map is \");\r\n    // console.log(optionsMapUpdated);\r\n\r\n    // Finally, we fill in the actual data for tableData. We need to take care of both data and origin\r\n\r\n    // Outer loop loops over all rows in the table\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // curColumnArray corresponds to the dataArray for each entry from the search column\r\n      let curColumnArray = [];\r\n      // we loop through the neighbourArray\r\n      for (let j = 0; j < neighbourArray.length; ++j) {\r\n        // For each neighbour in neighbourArray, we check to see if entries in search column have values for this neighbour\r\n        let curNeighbour = neighbourArray[j];\r\n        let firstDegNeighbours =\r\n          curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n        let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n        // If yes, we want to concat those values with curColumnArray\r\n        if (curNeighbourData !== undefined) {\r\n          curColumnArray = curColumnArray.concat(curNeighbourData);\r\n        }\r\n      }\r\n      // console.log(curColumnArray);\r\n      for (let curCol = colIndex + 1; curCol < colIndex + 1 + numCols; ++curCol) {\r\n        // Starting value for requiredLength is 2\r\n        let requiredLength = fillRecommendation === true ? curCol - colIndex : curCol - colIndex + 1;\r\n        // If curColumnArray's length does not meet the required length, we simply set data to N/A\r\n        if (curColumnArray.length < requiredLength) {\r\n          tableDataUpdated[i][curCol].data = \"N/A\";\r\n        }\r\n        else {\r\n          // We first set the data of the cell\r\n          let value = curColumnArray[requiredLength - 1];\r\n          tableDataUpdated[i][curCol].data = value;\r\n          // We then set the origin of the cell\r\n          let originToAdd = createNeighbourText(neighbourArray) + \":\" + value;\r\n          let keyOrigin = tableDataUpdated[i][keyColIndexUpdated].origin.slice();\r\n          keyOrigin.push(originToAdd);\r\n          tableDataUpdated[i][curCol].origin = keyOrigin;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      tableHeader: tableHeaderUpdated,\r\n      tableData: tableDataUpdated,\r\n      optionsMap: optionsMapUpdated,\r\n      selectedClassAnnotation: selectedClassAnnotationUpdated,\r\n      keyColIndex: keyColIndexUpdated,\r\n    };\r\n  }\r\n\r\n  // This function populates all neighbour with the same names in different rows, if that neighbour has multiple occurences.\r\n  // It should modify both tableData and firstDegNeighbours, but not keyColNeighbours.\r\n  // This is because we are not removing, or adding anything new, to the search column.\r\n\r\n  sameNeighbourDiffRow(e,colIndex,neighbourArray) {\r\n\r\n    // First we take a look at the parameters passed in\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n    // console.log(this.state.tableData);\r\n\r\n    let tableDataUpdated = [];\r\n    let subjectNeighbours = [];\r\n    let objectNeighbours = [];\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    let firstDegNeighbours = _.cloneDeep(this.state.firstDegNeighbours);\r\n\r\n    // The first loop deals with tableData's additions \r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // We first create a deep copy of the current row\r\n      let curRow = _.cloneDeep(tableData[i]);\r\n      // If the current cell in the selected column does NOT have dataArray attribute, we push it onto tableData as it is\r\n      if (curRow[colIndex].dataArray === undefined) {\r\n        tableDataUpdated.push(curRow);\r\n      }\r\n      // Else, we have to push on dataArray.length number of new rows onto tableData.\r\n      // We need to take care of the new cell's data, origin, and dataArray\r\n      else {\r\n        // First, we still need to push on curRow\r\n        tableDataUpdated.push(curRow);\r\n        // Then, we deal with rows that are not in the original table\r\n        for (let j = 0; j < curRow[colIndex].dataArray.length; ++j) {\r\n          let rowToAdd = _.cloneDeep(curRow);\r\n          // We set data\r\n          rowToAdd[colIndex].data = curRow[colIndex].dataArray[j];\r\n          // we then set origin for the cell. Need to use neighbourArray to get the correct text for the origin\r\n          let originToAdd = createNeighbourText(neighbourArray) + \":\" + curRow[colIndex].dataArray[j];\r\n          let keyOrigin = tableData[i][this.state.keyColIndex].origin.slice();\r\n          keyOrigin.push(originToAdd);\r\n          rowToAdd[colIndex].origin = keyOrigin;\r\n          // Lastly, we remove the dataArray attribute from rowToAdd\r\n          delete rowToAdd[colIndex].dataArray;\r\n          tableDataUpdated.push(rowToAdd);\r\n        }\r\n      }\r\n    }\r\n\r\n    // The second loop deals with firstDegNeighbours's additions\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // We first create a deep copy of the current row\r\n      let curRow = _.cloneDeep(tableData[i]);\r\n      // If the current cell in the selected column does NOT have dataArray attribute\r\n      // We push onto subjectNeighbours and objectNeighbours once\r\n      if (curRow[colIndex].dataArray === undefined) {\r\n        subjectNeighbours.push(firstDegNeighbours[\"subject\"][i]);\r\n        objectNeighbours.push(firstDegNeighbours[\"object\"][i]);\r\n      }\r\n      // Else, we have to push onto subject/objectNeighbours 1 + dataArray.length times.\r\n      else {\r\n        for (let j = 0; j < 1 + curRow[colIndex].dataArray.length; ++j) {\r\n          subjectNeighbours.push(firstDegNeighbours[\"subject\"][i]);\r\n          objectNeighbours.push(firstDegNeighbours[\"object\"][i]);\r\n        }\r\n      }\r\n    }\r\n    let firstDegNeighboursUpdated = \r\n      {\r\n        \"subject\":subjectNeighbours,\r\n        \"object\":objectNeighbours,\r\n      }\r\n    // We take a look at updated tableData and firstDegNeighbours\r\n    // console.log(tableDataUpdated);\r\n    // console.log(firstDegNeighboursUpdated);\r\n\r\n    // Now we set up the obj for Action Panel\r\n    // We check if the curActionInfo's task is sameNeighbourAndRecommendation or populateSameNeighbour\r\n    let tempObj = {};\r\n    let curActionInfo = _.cloneDeep(this.state.curActionInfo);\r\n\r\n    // If it is sameNeighbourAndRecommendation, we will turn it to populateRecommendation\r\n    if (curActionInfo.task === \"sameNeighbourAndRecommendation\") {\r\n      tempObj[\"task\"] = \"populateRecommendation\";\r\n      tempObj[\"colIndex\"] = curActionInfo.colIndex;\r\n      tempObj[\"recommendArray\"] = curActionInfo.recommendArray; \r\n    }\r\n    // Else, if it is sameNeighbourAndStartRecommend, we will turn it to showStartRecommend\r\n    else if (curActionInfo.task === \"sameNeighbourAndStartRecommend\") {\r\n      tempObj[\"task\"] = \"showStartRecommend\";\r\n      tempObj[\"colIndex\"] = curActionInfo.colIndex;\r\n      tempObj[\"recommendArray\"] = curActionInfo.recommendArray; \r\n    }\r\n    // Else, we turn the current action into afterPopulateColumn\r\n    else {\r\n      tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    }\r\n\r\n    // Support for undo: \r\n    // Let's save the previous state in an object\r\n    let lastAction = \"sameNeighbourDiffRow\";\r\n    let prevState = \r\n      {\r\n        \"curActionInfo\":this.state.curActionInfo,\r\n        \"tableData\":this.state.tableData,\r\n        \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n      };\r\n\r\n    this.setState({\r\n      curActionInfo: tempObj,\r\n      tableData: tableDataUpdated,\r\n      firstDegNeighbours: firstDegNeighboursUpdated,\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    })\r\n  }\r\n\r\n  // This function populates all neighbour with the same names in the same columns, if that neighbour has multiple occurences.\r\n\r\n  sameNeighbourOneRow(e, colIndex, neighbourArray) {\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n    // console.log(numCols);\r\n\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n\r\n    // Outer loop loops over all rows in the table\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // curColumnArray corresponds to the dataArray for each entry from the search column\r\n      let curColumnArray = [];\r\n      // we loop through the neighbourArray\r\n      for (let j = 0; j < neighbourArray.length; ++j) {\r\n        // For each neighbour in neighbourArray, we check to see if entries in search column have values for this neighbour\r\n        let curNeighbour = neighbourArray[j];\r\n        // console.log(curNeighbour.value);\r\n        let firstDegNeighbours =\r\n          curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n        let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n        // console.log(firstDegNeighbours);\r\n        // If yes, we want to concat those values with curColumnArray\r\n        if (curNeighbourData !== undefined) {\r\n          // console.log(curNeighbourData);\r\n          curColumnArray = curColumnArray.concat(curNeighbourData);\r\n        }\r\n      }\r\n      // console.log(curColumnArray);\r\n      // If curColumnArray is empty, that means this entry in searchColumn do not have any of the attributes from neighbourArray\r\n      if (curColumnArray.length === 0) {\r\n        tableData[i][colIndex].data = \"N/A\";\r\n      }\r\n      // Otherwise, we have found at least one value. And we want to set up the data and origin. \r\n      else {\r\n        // we first set the data for the cell using all values from curColumnArray (this is different from populateOtherColumn)\r\n        let curData = \"\";\r\n        for (let k = 0; k < curColumnArray.length; ++k) {\r\n          let dataToAdd = k > 0 ? \";\" + curColumnArray[k] : curColumnArray[k];\r\n          curData+=dataToAdd;\r\n          // console.log(\"Data to add is \"+dataToAdd);\r\n          // console.log(\"Current data is \"+curData);\r\n        }\r\n        tableData[i][colIndex].data = curData;\r\n        // we then set the origin for the cell\r\n        let originToAdd = createNeighbourText(neighbourArray) + \":\" + curData;\r\n        let keyOrigin = tableData[i][this.state.keyColIndex].origin.slice();\r\n        keyOrigin.push(originToAdd);\r\n        tableData[i][colIndex].origin = keyOrigin;\r\n      }\r\n    }\r\n\r\n    // Now we set up the obj for Action Panel\r\n    // We check if the curActionInfo's task is sameNeighbourAndRecommendation or populateSameNeighbour\r\n    let tempObj = {};\r\n    let curActionInfo = _.cloneDeep(this.state.curActionInfo);\r\n\r\n    // If it is sameNeighbourAndRecommendation, we will turn it to populateRecommendation\r\n    if (curActionInfo.task === \"sameNeighbourAndRecommendation\") {\r\n      tempObj[\"task\"] = \"populateRecommendation\";\r\n      tempObj[\"colIndex\"] = curActionInfo.colIndex;\r\n      tempObj[\"recommendArray\"] = curActionInfo.recommendArray; \r\n    }\r\n    // Else, if it is sameNeighbourAndStartRecommend, we will turn it to showStartRecommend\r\n    else if (curActionInfo.task === \"sameNeighbourAndStartRecommend\") {\r\n      tempObj[\"task\"] = \"showStartRecommend\";\r\n      tempObj[\"colIndex\"] = curActionInfo.colIndex;\r\n      tempObj[\"recommendArray\"] = curActionInfo.recommendArray; \r\n    }\r\n    // Else, we turn the current action into afterPopulateColumn\r\n    else {\r\n      tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    }\r\n\r\n    // Support for undo: \r\n    let lastAction = \"sameNeighbourOneRow\";\r\n    let prevState = \r\n      {\r\n        \"curActionInfo\":this.state.curActionInfo,\r\n        \"tableData\":this.state.tableData,\r\n      };\r\n\r\n    this.setState({\r\n      curActionInfo: tempObj,\r\n      tableData: tableData,\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    });\r\n  }\r\n\r\n  // The following function populates one recommendation neighbour\r\n  populateRecommendation(e, colIndex, neighbourArray) {\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n\r\n    // First thing we need to do should be the same as contextAddColumn\r\n    const rowNum = this.state.tableData.length;\r\n    const colNum = this.state.tableData[0].length;\r\n\r\n    // we first take care of table data's addition\r\n    let tableData = [];\r\n    for (let i = 0; i < rowNum; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < colIndex + 1; ++j) {\r\n        tempRow.push(this.state.tableData[i][j]);\r\n      }\r\n      // we add in one column of empty data\r\n      tempRow.push({ data: \"\", origin: [] });\r\n      for (let k = colIndex + 1; k < colNum; ++k) {\r\n        tempRow.push(this.state.tableData[i][k]);\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n    // console.log(tableData);\r\n\r\n    // we now take care of tabler header, and selectedClassAnnotation's addition\r\n    let tableHeader = [];\r\n    for (let j = 0; j < colIndex + 1; ++j) {\r\n      tableHeader.push(this.state.tableHeader[j]);\r\n    }\r\n    tableHeader.push([]);\r\n    for (let k = colIndex + 1; k < colNum; ++k) {\r\n      tableHeader.push(this.state.tableHeader[k]);\r\n    }\r\n    // console.log(tableHeader);\r\n\r\n    // we now take care of selectedClassAnnotation\r\n    let selectedClassAnnotation = [];\r\n    for (let j = 0; j < colIndex; ++j) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[j]);\r\n    }\r\n    selectedClassAnnotation.push([]);\r\n    for (let k = colIndex; k < colNum-1; ++k) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[k]);\r\n    }\r\n    // console.log(selectedClassAnnotation);\r\n\r\n    // If colIndex is less than keyColIndex, we need to increase keyColIndex by 1\r\n    let keyColIndex = this.state.keyColIndex;\r\n    if (colIndex < keyColIndex) {\r\n      ++keyColIndex;\r\n    }\r\n    // console.log(keyColIndex);\r\n\r\n    // Now, the part that's the same as contextAddColumn is over.\r\n    // The part below will be largely the same as populateOtherColumn.\r\n\r\n    // An important things for us to do how is to increment colIndex\r\n    ++colIndex;\r\n\r\n    // We use a boolean to keep track of if any cell contains multiple values\r\n    let hasMultiple = false;\r\n\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // curColumnArray is the dataArray for each entry in search column, for all neighbours in neighbourArray.\r\n      let curColumnArray = [];\r\n      // We loop through the neighbourArray\r\n      for (let j = 0; j < neighbourArray.length; ++j) {\r\n        // For each neighbour in neighbourArray, we check to see if entries in search column have values for this neighbour\r\n        let curNeighbour = neighbourArray[j];\r\n        let firstDegNeighbours = \r\n          curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n        // console.log(firstDegNeighbours);\r\n        let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n        // console.log(\"Current neighbour data is \"+curNeighbourData);\r\n        // If yes, we want to concat those values with curColumnArray\r\n        if (curNeighbourData !== undefined) {\r\n          curColumnArray = curColumnArray.concat(curNeighbourData);\r\n        }\r\n      }\r\n      // If curColumnArray is empty, that means this entry in searchColumn do not have any of the attributes from neighbourArray\r\n      if (curColumnArray.length === 0) {\r\n        tableData[i][colIndex].data = \"N/A\";\r\n      }\r\n      // Otherwise, we have found at least one value.\r\n      else {\r\n        // we first set the data for the cell using curColumnArray[0]\r\n        tableData[i][colIndex].data = curColumnArray[0];\r\n        // we then set origin for the cell. Need to use neighbourArray to get the correct text for the origin\r\n        let originToAdd = createNeighbourText(neighbourArray) + \":\" + curColumnArray[0];\r\n        let keyOrigin = tableData[i][keyColIndex].origin.slice();\r\n        keyOrigin.push(originToAdd);\r\n        tableData[i][colIndex].origin = keyOrigin;\r\n        // console.log(keyOrigin)\r\n\r\n        // Now, if curColumnArray has length longer than one, we want to set hasMultiple to true\r\n        // We also create an extra attribute for the current tableData cell, called dataArray, whose max length is maxNeighbourCount.\r\n        if (curColumnArray.length > 1) {\r\n          hasMultiple = true;\r\n          let lastIndex = Math.min(curColumnArray.length, maxNeighbourCount);\r\n          tableData[i][colIndex].dataArray = curColumnArray.slice(1, lastIndex);\r\n        } \r\n      }\r\n    }\r\n    // Now, we are done with updating tableData.\r\n    // We want to update tableHeader as well.\r\n    tableHeader[colIndex] = neighbourArray;\r\n\r\n    // In the third part of the code, We start setting up the content for the Action Panel.\r\n\r\n    // First thing we want to do is to update the recommendArray: \r\n    // We want to remove the recommendation just added from the recommendArray\r\n    let recommendArray = _.cloneDeep(this.state.curActionInfo.recommendArray)\r\n    let curRecommendation = neighbourArray[0];\r\n    let sliceIndex = -1;\r\n\r\n    // This for loop checks which index we want to remove\r\n    for (let i = 0; i < recommendArray.length; ++i) {\r\n      if (recommendArray[i].value === curRecommendation.value && recommendArray[i].type === curRecommendation.type) {\r\n        sliceIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // console.log(sliceIndex);\r\n    // console.log(curRecommendation);\r\n    // console.log(recommendArray);\r\n    \r\n    // This if condition removes the found element\r\n    if (sliceIndex !== -1) {\r\n      recommendArray.splice(sliceIndex, 1);\r\n    }\r\n\r\n    // tempObj stores the information passed to ActionPanel\r\n    let tempObj = {};\r\n    // console.log(this.state.curActionInfo);\r\n    if (hasMultiple === true && recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"sameNeighbourAndRecommendation\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n      tempObj[\"recommendArray\"] = recommendArray;\r\n    }\r\n    else if (hasMultiple === false && recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"populateRecommendation\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"recommendArray\"] = recommendArray;\r\n    }\r\n    else if (hasMultiple === true) {\r\n      tempObj[\"task\"] = \"populateSameNeighbour\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n    }\r\n    else {\r\n      tempObj[\"task\"] = \"afterPopulateColumn\"\r\n    }\r\n\r\n    // console.log(tableData);\r\n    // console.log(tableHeader);\r\n    // console.log(selectedClassAnnotation);\r\n    // console.log(keyColIndex);\r\n    // console.log(tempObj);\r\n\r\n    // Lastly, we add support for undo, and set the states\r\n    let lastAction = \"populateRecommendation\";\r\n    let prevState =\r\n      {\r\n        \"tableData\": this.state.tableData,\r\n        \"tableHeader\": this.state.tableHeader,\r\n        \"curActionInfo\": this.state.curActionInfo,\r\n        \"keyColIndex\": this.state.keyColIndex,\r\n        \"selectedClassAnnotation\": this.state.selectedClassAnnotation,\r\n        \"tabIndex\": this.state.tabIndex,\r\n        \"previewColIndex\": this.state.previewColIndex,\r\n      } \r\n\r\n    this.setState({\r\n      tableData: tableData,\r\n      tableHeader: tableHeader,\r\n      selectedClassAnnotation: selectedClassAnnotation,\r\n      keyColIndex: keyColIndex,\r\n      curActionInfo: tempObj,\r\n      tabIndex: 0,\r\n      previewColIndex: -1,\r\n      prevState: prevState,\r\n      lastAction: lastAction,\r\n    })\r\n  }\r\n\r\n  // This function\r\n\r\n  createStartRecommend(keyColNeighbours) {\r\n    let recommendArray = [];\r\n    let numRecommend = Math.min(5, keyColNeighbours.length);\r\n    for (let i = 0; i < numRecommend; ++i) {\r\n      recommendArray.push(keyColNeighbours[i]);\r\n    }\r\n    return recommendArray;\r\n  }\r\n\r\n  // This function below should mostly be similar to populateRecommendation, with some small differences. \r\n\r\n  populateStartRecommend(e, colIndex, neighbourArray) {\r\n    // console.log(colIndex);\r\n    // console.log(neighbourArray);\r\n    // console.log(this.state.curActionInfo);\r\n\r\n    // First thing we need to do should be the same as contextAddColumn\r\n    const rowNum = this.state.tableData.length;\r\n    const colNum = this.state.tableData[0].length;\r\n\r\n    // we first take care of table data's addition\r\n    let tableData = [];\r\n    for (let i = 0; i < rowNum; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < colIndex + 1; ++j) {\r\n        tempRow.push(this.state.tableData[i][j]);\r\n      }\r\n      // we add in one column of empty data\r\n      tempRow.push({ data: \"\", origin: [] });\r\n      for (let k = colIndex + 1; k < colNum; ++k) {\r\n        tempRow.push(this.state.tableData[i][k]);\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n    // console.log(tableData);\r\n\r\n    // we now take care of tabler header, and selectedClassAnnotation's addition\r\n    let tableHeader = [];\r\n    for (let j = 0; j < colIndex + 1; ++j) {\r\n      tableHeader.push(this.state.tableHeader[j]);\r\n    }\r\n    tableHeader.push([]);\r\n    for (let k = colIndex + 1; k < colNum; ++k) {\r\n      tableHeader.push(this.state.tableHeader[k]);\r\n    }\r\n    // console.log(tableHeader);\r\n\r\n    // we now take care of selectedClassAnnotation\r\n    let selectedClassAnnotation = [];\r\n    for (let j = 0; j < colIndex; ++j) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[j]);\r\n    }\r\n    selectedClassAnnotation.push([]);\r\n    for (let k = colIndex; k < colNum-1; ++k) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[k]);\r\n    }\r\n    // console.log(selectedClassAnnotation);\r\n\r\n    // If colIndex is less than keyColIndex, we need to increase keyColIndex by 1\r\n    let keyColIndex = this.state.keyColIndex;\r\n    if (colIndex < keyColIndex) {\r\n      ++keyColIndex;\r\n    }\r\n    // console.log(keyColIndex);\r\n\r\n    // Now, the part that's the same as contextAddColumn is over.\r\n    // The part below will be largely the same as populateOtherColumn.\r\n\r\n    // An important things for us to do how is to increment colIndex\r\n    ++colIndex;\r\n\r\n    // We use a boolean to keep track of if any cell contains multiple values\r\n    let hasMultiple = false;\r\n\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // curColumnArray is the dataArray for each entry in search column, for all neighbours in neighbourArray.\r\n      let curColumnArray = [];\r\n      // We loop through the neighbourArray\r\n      for (let j = 0; j < neighbourArray.length; ++j) {\r\n        // For each neighbour in neighbourArray, we check to see if entries in search column have values for this neighbour\r\n        let curNeighbour = neighbourArray[j];\r\n        let firstDegNeighbours = \r\n          curNeighbour.type === \"subject\" ? this.state.firstDegNeighbours.subject : this.state.firstDegNeighbours.object;\r\n        // console.log(firstDegNeighbours);\r\n        let curNeighbourData = firstDegNeighbours[i][curNeighbour.value];\r\n        // console.log(\"Current neighbour data is \"+curNeighbourData);\r\n        // If yes, we want to concat those values with curColumnArray\r\n        if (curNeighbourData !== undefined) {\r\n          curColumnArray = curColumnArray.concat(curNeighbourData);\r\n        }\r\n      }\r\n      // If curColumnArray is empty, that means this entry in searchColumn do not have any of the attributes from neighbourArray\r\n      if (curColumnArray.length === 0) {\r\n        tableData[i][colIndex].data = \"N/A\";\r\n      }\r\n      // Otherwise, we have found at least one value.\r\n      else {\r\n        // we first set the data for the cell using curColumnArray[0]\r\n        tableData[i][colIndex].data = curColumnArray[0];\r\n        // we then set origin for the cell. Need to use neighbourArray to get the correct text for the origin\r\n        let originToAdd = createNeighbourText(neighbourArray) + \":\" + curColumnArray[0];\r\n        let keyOrigin = tableData[i][keyColIndex].origin.slice();\r\n        keyOrigin.push(originToAdd);\r\n        tableData[i][colIndex].origin = keyOrigin;\r\n        // console.log(keyOrigin)\r\n\r\n        // Now, if curColumnArray has length longer than one, we want to set hasMultiple to true\r\n        // We also create an extra attribute for the current tableData cell, called dataArray, whose max length is maxNeighbourCount.\r\n        if (curColumnArray.length > 1) {\r\n          hasMultiple = true;\r\n          let lastIndex = Math.min(curColumnArray.length, maxNeighbourCount);\r\n          tableData[i][colIndex].dataArray = curColumnArray.slice(1, lastIndex);\r\n        } \r\n      }\r\n    }\r\n    // Now, we are done with updating tableData.\r\n    // We want to update tableHeader as well.\r\n    tableHeader[colIndex] = neighbourArray;\r\n\r\n    // In the third part of the code, We start setting up the content for the Action Panel.\r\n\r\n    // First thing we want to do is to update the recommendArray: \r\n    // We want to remove the recommendation just added from the recommendArray\r\n    let recommendArray = _.cloneDeep(this.state.curActionInfo.recommendArray)\r\n    let curRecommendation = neighbourArray[0];\r\n    let sliceIndex = -1;\r\n\r\n    // This for loop checks which index we want to remove\r\n    for (let i = 0; i < recommendArray.length; ++i) {\r\n      if (recommendArray[i].value === curRecommendation.value && recommendArray[i].type === curRecommendation.type) {\r\n        sliceIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // console.log(sliceIndex);\r\n    // console.log(curRecommendation);\r\n    // console.log(recommendArray);\r\n    \r\n    // This if condition removes the found element\r\n    if (sliceIndex !== -1) {\r\n      recommendArray.splice(sliceIndex, 1);\r\n    }\r\n\r\n    // tempObj stores the information passed to ActionPanel\r\n    let tempObj = {};\r\n    // console.log(this.state.curActionInfo);\r\n    if (hasMultiple === true && recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"sameNeighbourAndStartRecommend\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n      tempObj[\"recommendArray\"] = recommendArray;\r\n    }\r\n    else if (hasMultiple === false && recommendArray.length > 0) {\r\n      tempObj[\"task\"] = \"showStartRecommend\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"recommendArray\"] = recommendArray;\r\n    }\r\n    else if (hasMultiple === true) {\r\n      tempObj[\"task\"] = \"populateSameNeighbour\";\r\n      tempObj[\"colIndex\"] = colIndex;\r\n      tempObj[\"neighbourArray\"] = neighbourArray;\r\n    }\r\n    else {\r\n      tempObj[\"task\"] = \"afterPopulateColumn\";\r\n    }\r\n\r\n    // console.log(tableData);\r\n    // console.log(tableHeader);\r\n    // console.log(selectedClassAnnotation);\r\n    // console.log(keyColIndex);\r\n    // console.log(tempObj);\r\n\r\n    // Lastly, we add support for undo, and set the states\r\n    let lastAction = \"populateStartRecommend\";\r\n    let prevState =\r\n      {\r\n        \"tableData\": this.state.tableData,\r\n        \"tableHeader\": this.state.tableHeader,\r\n        \"curActionInfo\": this.state.curActionInfo,\r\n        \"keyColIndex\": this.state.keyColIndex,\r\n        \"selectedClassAnnotation\": this.state.selectedClassAnnotation,\r\n        \"tabIndex\": this.state.tabIndex,\r\n        \"previewColIndex\": this.state.previewColIndex,\r\n      } \r\n\r\n    this.setState({\r\n      tableData: tableData,\r\n      tableHeader: tableHeader,\r\n      selectedClassAnnotation: selectedClassAnnotation,\r\n      keyColIndex: keyColIndex,\r\n      curActionInfo: tempObj,\r\n      tabIndex: 0,\r\n      previewColIndex: -1,\r\n      prevState: prevState,\r\n      lastAction: lastAction,\r\n    })\r\n  }\r\n\r\n  // The following function adds a new column to the table, to the right of the selected column.\r\n  // In here, let's also set tabIndex to 0.\r\n\r\n  contextAddColumn(e, colIndex) {\r\n    const rowNum = this.state.tableData.length;\r\n    const colNum = this.state.tableData[0].length;\r\n\r\n    // we first take care of table data's addition\r\n    let tableData = [];\r\n    for (let i = 0; i < rowNum; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < colIndex + 1; ++j) {\r\n        tempRow.push(this.state.tableData[i][j]);\r\n      }\r\n      // we add in one column of empty data\r\n      tempRow.push({ data: \"\", origin: [] });\r\n      for (let k = colIndex + 1; k < colNum; ++k) {\r\n        tempRow.push(this.state.tableData[i][k]);\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n\r\n    // we now take care of tabler header, and selectedClassAnnotation's addition\r\n    let tableHeader = [];\r\n    for (let j = 0; j < colIndex + 1; ++j) {\r\n      tableHeader.push(this.state.tableHeader[j]);\r\n    }\r\n    tableHeader.push([]);\r\n    for (let k = colIndex + 1; k < colNum; ++k) {\r\n      tableHeader.push(this.state.tableHeader[k]);\r\n    }\r\n\r\n    // we now take care of selectedClassAnnotation\r\n    let selectedClassAnnotation = [];\r\n    for (let j = 0; j < colIndex; ++j) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[j]);\r\n    }\r\n    selectedClassAnnotation.push([]);\r\n    for (let k = colIndex; k < colNum-1; ++k) {\r\n      selectedClassAnnotation.push(this.state.selectedClassAnnotation[k]);\r\n    }\r\n\r\n    // If colIndex is less than keyColIndex, we need to increase keyColIndex by 1\r\n    let keyColIndex = this.state.keyColIndex;\r\n    if (colIndex < keyColIndex) {\r\n      ++keyColIndex;\r\n    }\r\n\r\n    // console.log(this.state.selectedClassAnnotation);\r\n    // console.log(tableHeader);\r\n\r\n    // Support for undo: \r\n    let lastAction = \"contextAddColumn\";\r\n    let prevState = \r\n        {\r\n          \"tableData\": this.state.tableData,\r\n          \"tableHeader\": this.state.tableHeader,\r\n          \"curActionInfo\": this.state.curActionInfo,\r\n          \"keyColIndex\": this.state.keyColIndex,\r\n          \"selectedClassAnnotation\": this.state.selectedClassAnnotation,\r\n          \"tabIndex\": this.state.tabIndex,\r\n          \"previewColIndex\": this.state.previewColIndex,\r\n        };\r\n\r\n    this.setState({\r\n      tableData: tableData,\r\n      tableHeader: tableHeader,\r\n      curActionInfo: {\"task\":\"afterPopulateColumn\"},\r\n      keyColIndex: keyColIndex,\r\n      selectedClassAnnotation: selectedClassAnnotation,\r\n      tabIndex: 0, // we want to set the currently active tab to be wrangling actions\r\n      previewColIndex: -1, // we want to set the preview column index to -1\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    });\r\n  }\r\n  \r\n  // The following function handles the deletion of a selected column.\r\n  // This function should be largely similar to contextAddColumn\r\n\r\n  contextDeleteColumn(e, colIndex) {\r\n    // console.log(\"This is the column we are trying to delete \"+colIndex);\r\n\r\n    // We disable the deletion of the search column\r\n    if (colIndex === this.state.keyColIndex) {\r\n      alert(\"The current column is the search column.\\n\\nPlease set another search column before deleting the current column.\");\r\n    }\r\n\r\n    // We also disable the deletion of the first column\r\n    else if (colIndex === 0) {\r\n      alert(\"Deleting the first column causes unexpected behavior.\\n\\nPlease do not delete the first column.\");\r\n    }\r\n\r\n    // Else, we can proceed to deletion.\r\n    else {\r\n      // We handle tableData, tableHeader, optionsMap, and selectedClassAnnotation's deletion\r\n      let tableData = _.cloneDeep(this.state.tableData);\r\n      let tableHeader = this.state.tableHeader.slice();\r\n      let optionsMap = this.state.optionsMap.slice();\r\n      let selectedClassAnnotation = this.state.selectedClassAnnotation.slice();\r\n\r\n      // tableData\r\n      for (let i = 0; i < tableData.length; ++i) {\r\n        tableData[i].splice(colIndex, 1);\r\n      }\r\n      // tableHeader, optionsMap, and selectedClassAnnotation\r\n      tableHeader.splice(colIndex, 1);\r\n      optionsMap.splice(colIndex, 1);\r\n      if (colIndex > 0) {\r\n        selectedClassAnnotation.splice(colIndex-1, 1);\r\n      }\r\n      // If colIndex is less than keyColIndex, we need to decrease keyColIndex by 1, if keyColIndex > 0\r\n      let keyColIndex = this.state.keyColIndex;\r\n      if (colIndex < keyColIndex) {\r\n        --keyColIndex;\r\n      }\r\n\r\n      // When we are deleting a column, we do not necessarily want to go to tab 0.\r\n      // However, if we are in tab 1, we want to toggle off all property neighbours\r\n      let propertyNeighbours = _.cloneDeep(this.state.propertyNeighbours);\r\n      if (this.state.tabIndex === 1) {\r\n        for (let i = 0; i < propertyNeighbours.length; ++i) {\r\n          propertyNeighbours[i].isOpen = false;\r\n        }\r\n      }\r\n\r\n      // Support for undo: \r\n      let lastAction = \"contextDeleteColumn\";\r\n      let prevState = \r\n          {\r\n            \"tableData\": this.state.tableData,\r\n            \"tableHeader\": this.state.tableHeader,\r\n            \"selectedClassAnnotation\": this.state.selectedClassAnnotation,\r\n            \"keyColIndex\": this.state.keyColIndex,\r\n            \"previewColIndex\": this.state.previewColIndex,\r\n            \"propertyNeighbours\": this.state.propertyNeighbours,\r\n            \"curActionInfo\": this.state.curActionInfo,\r\n          };\r\n\r\n      this.setState({\r\n        tableData: tableData,\r\n        tableHeader: tableHeader,\r\n        selectedClassAnnotation: selectedClassAnnotation,\r\n        keyColIndex: keyColIndex,\r\n        previewColIndex: -1, // we want to set the preview column index to -1\r\n        propertyNeighbours: propertyNeighbours,\r\n        curActionInfo: {\"task\":\"afterPopulateColumn\"},\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      });\r\n    }\r\n  }\r\n\r\n  // The following function handles the sorting of a column from context menu.\r\n  // It is a prototype. Needs to be refined in the future.\r\n\r\n  contextSortColumn(e, colIndex, order) {\r\n    // console.log(\"The column we are sorting is \"+colIndex);\r\n    document.body.classList.add('waiting');\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n\r\n    // We first loop through this column to determine if it's a numeric column or a string column\r\n    let numericCol = true;\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      // We only care about entries that are not N/A\r\n      if (tableData[i][colIndex].data !== \"N/A\") {\r\n        if (isNaN(Number(tableData[i][colIndex].data))) {\r\n          numericCol = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // In this case we are sorting a numerical column\r\n    if (numericCol) {\r\n      tableData.sort(function (a, b) {\r\n        let aValue = a[colIndex].data;\r\n        let bValue = b[colIndex].data;\r\n        // We want to put all N/A's at the bottom\r\n        if (aValue === \"N/A\") {\r\n          return 1;\r\n        }\r\n        else if (bValue === \"N/A\") {\r\n          return -1;\r\n        } \r\n        // Else, we sort by the given order.\r\n        else {\r\n          if (order === \"ascending\") {\r\n            return Number(aValue) - Number(bValue);\r\n          }\r\n          else {\r\n            return Number(bValue) - Number(aValue);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // In this case we are sorting a string-based column\r\n    else {\r\n      tableData.sort(function (a, b) {\r\n        let aValue = a[colIndex].data;\r\n        let bValue = b[colIndex].data;\r\n        // We want to put all N/A's at the bottom\r\n        if (aValue === \"N/A\") {\r\n          return 1;\r\n        }\r\n        else if (bValue === \"N/A\") {\r\n          return -1;\r\n        } \r\n        // Else, we sort by the given order.\r\n        else {\r\n          if (order === \"ascending\") {\r\n            return aValue < bValue ? -1 : 1;\r\n          }\r\n          else {\r\n            return aValue < bValue ? 1 : -1;\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // console.log(\"Table Data is: \");\r\n    // console.log(tableData);\r\n    // console.log(\"Search entry is \");\r\n    // console.log(searchEntry);\r\n\r\n    // console.log(\"Table Data is: \");\r\n    // console.log(tableData);\r\n    // console.log(\"Search entry is \");\r\n    // console.log(searchEntry);\r\n\r\n    // We need a bugfix here: since tableData is reordered, firstColSelection now do not have the correct data anymore.\r\n    // We have to update firstColSelection to include the correct data.\r\n    let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", this.state.keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", this.state.keyColIndex);\r\n    allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      document.body.classList.remove('waiting');\r\n\r\n      // Support for undo: \r\n      let lastAction = \"contextSortColumn\";\r\n      let prevState = \r\n          {\r\n            \"tableData\": this.state.tableData,\r\n            \"firstDegNeighbours\": this.state.firstDegNeighbours,\r\n            \"previewColIndex\": this.state.previewColIndex,\r\n          };\r\n\r\n      this.setState({\r\n        tableData: tableData,\r\n        firstDegNeighbours: firstDegNeighbours,\r\n        previewColIndex: -1,\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      });\r\n    })\r\n    })\r\n  }\r\n\r\n  // The following function dedups the selected column.\r\n  // Note: this function has to make modifications to both firstDegNeighbours and keyColNeighbours\r\n\r\n  contextDedupColumn(e, colIndex) {\r\n    document.body.classList.add('waiting');\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    // console.log(colIndex);\r\n    // console.log(tableData);\r\n\r\n    // We simply dedup this column by calling the uniqBy function from the lodash library\r\n    tableData = _.uniqBy(tableData, function(x) {return x[colIndex].data;});\r\n    // console.log(this.state.tableData);\r\n    // console.log(tableData);\r\n\r\n    // Now we deal with firstDegNeighbours and keyColNeighbours' updates\r\n    // Since we are changing the number of rows, we need to call updateNeighbourInfo\r\n    // Note: the colIndex we give to getNeighbourPromise should be this.state.keyColIndex\r\n    let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", this.state.keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", this.state.keyColIndex);\r\n    allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      document.body.classList.remove('waiting');\r\n\r\n      // Support for undo:\r\n      let lastAction = \"contextDedupColumn\";\r\n      let prevState = \r\n        {\r\n          \"tableData\": this.state.tableData,\r\n          \"keyColNeighbours\": this.state.keyColNeighbours,\r\n          \"firstDegNeighbours\": this.state.firstDegNeighbours,\r\n          \"curActionInfo\": this.state.curActionInfo,\r\n          \"tabIndex\": this.state.tabIndex,\r\n          \"previewColIndex\": this.state.previewColIndex,\r\n        }\r\n\r\n      this.setState({\r\n        tableData: tableData,\r\n        keyColNeighbours: keyColNeighbours,\r\n        firstDegNeighbours: firstDegNeighbours,\r\n        curActionInfo: {\"task\":\"afterPopulateColumn\"},\r\n        tabIndex: 0,\r\n        previewColIndex: -1,\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      })\r\n    })\r\n    })\r\n  }\r\n\r\n  // This function handles click event on the filter icon.\r\n  // We want to let the Action Panel display 4 different filtering methods:\r\n  // 1) Sort ascending\r\n  // 2) Sort descending\r\n  // 3) Filter\r\n  // 4) Dedup\r\n\r\n  showFilterMethods(e, colIndex) {\r\n    // console.log(\"Selected column is \"+colIndex);\r\n\r\n    // We just need to pass on the colIndex\r\n    let tempObj = {};\r\n    tempObj[\"task\"] = \"showFilterMethods\";\r\n    tempObj[\"colIndex\"] = colIndex;\r\n    \r\n    this.setState({\r\n      curActionInfo: tempObj,\r\n      tabIndex: 0, // we also want to set the currentlly active tab index to 0\r\n    })\r\n  }\r\n\r\n  // The following functions sets the selected column to be the search column.\r\n\r\n  contextSetColumn(e, colIndex) {\r\n\r\n    // console.log(\"Col index of search cell is \"+colIndex);\r\n\r\n    // Let's do a preliminary check here to make sure that users do not set empty columns as search columns\r\n    let colEmpty = true;\r\n    for (let i = 0; i < this.state.tableData.length; ++i) {\r\n      if (this.state.tableData[i][colIndex].data !== \"\") {\r\n        colEmpty = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // We give users an alert if they try to set an empty columns as the search column\r\n    if (colEmpty === true) {\r\n      alert(\"This column is currently empty. Try set the data for this column before setting it as the search column.\");\r\n    }\r\n    else {\r\n      document.body.classList.add('waiting');\r\n\r\n      // Code here should largely be similar to what we have in populateKeyColumn\r\n\r\n      let tableData = _.cloneDeep(this.state.tableData);\r\n\r\n      // We need to find neighbours of a column.\r\n      // We need to use tableData to ask more queries (number of queries is equal to tableData.length)\r\n      let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", colIndex);\r\n      let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", colIndex);\r\n\r\n      allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n      allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n        // We call updateNeighbourInfo here because we are changing the rows\r\n        let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n        let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n        let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n        document.body.classList.remove('waiting');\r\n\r\n        // Support for undo: \r\n        let lastAction = \"contextSetColumn\";\r\n        let prevState = \r\n            {\r\n              \"keyColIndex\": this.state.keyColIndex,\r\n              \"keyColNeighbours\": this.state.keyColNeighbours,\r\n              \"firstDegNeighbours\": this.state.firstDegNeighbours,\r\n              \"curActionInfo\": this.state.curActionInfo,\r\n              \"tabIndex\": this.state.tabIndex,\r\n              \"previewColIndex\": this.state.previewColIndex,\r\n            };\r\n\r\n        this.setState({\r\n          keyColIndex: colIndex,\r\n          keyColNeighbours: keyColNeighbours,\r\n          firstDegNeighbours: firstDegNeighbours,\r\n          curActionInfo: {\"task\":\"afterPopulateColumn\"},\r\n          tabIndex: 0, // we want to set the currently active tab to be wrangling actions\r\n          previewColIndex: -1,\r\n          lastAction: lastAction,\r\n          prevState: prevState,\r\n        });\r\n      })\r\n      })\r\n    }\r\n  }\r\n\r\n  // // The following function displays the origin of a cell in the Action Panel.\r\n\r\n  // contextCellOrigin(e, rowIndex, colIndex) {\r\n  //   // To get the origin of a cell, we simply returns its \"origin field\"\r\n  //   // The trick is to set the origin field correctly in previous functions\r\n  //   // The place to do that should be in the two populating columns\r\n\r\n  //   let cellSelected = this.state.tableData[rowIndex][colIndex];\r\n\r\n  //   let originElement = [];\r\n  //   for (let i = 0; i < cellSelected.origin.length; ++i) {\r\n  //     originElement.push(<p>{niceRender(cellSelected.origin[i])}</p>);\r\n  //   }\r\n\r\n  //   // This origin literal correctly contains the cell Origin we want to display\r\n  //   // Now we just need to show it in the ActionPanel\r\n  //   let tempObj = {};\r\n  //   tempObj[\"task\"] = \"contextCellOrigin\";\r\n  //   tempObj[\"origin\"] = originElement;\r\n\r\n  //   // Support for undo: \r\n  //   let lastAction = \"contextCellOrigin\";\r\n  //   let prevState = \r\n  //       {\r\n  //         \"curActionInfo\": this.state.curActionInfo,\r\n  //         \"tabIndex\": this.state.tabIndex,\r\n  //       };\r\n    \r\n  //   this.setState({\r\n  //     curActionInfo: tempObj,\r\n  //     tabIndex: 0, // we want to set the currently active tab to be wrangling actions\r\n  //     lastAction: lastAction,\r\n  //     prevState: prevState,\r\n  //   });\r\n  // }\r\n\r\n  // This function has three functionalities: \r\n  // Show the selected cell's origin, show the selected cell's preview, and update the bottom iframe's URL\r\n\r\n  originPreviewPage(e, rowIndex, colIndex) {\r\n    document.body.classList.add('waiting');\r\n    // console.log(\"Row index is \"+rowIndex);\r\n    // console.log(\"Col index is \"+colIndex);\r\n\r\n    // This first part deals with preview\r\n\r\n    // Let's first run queries to fetch the dbp neighbours and dbo neighbours for the selected cell (withe some filtering)\r\n    // In here, we need both the ?p and ?o. This is different from before.\r\n\r\n    let promiseArray = [];\r\n\r\n    // Below is the first query we will make. In here we are using the tableCell as SUBJECT\r\n\r\n    // select ?p ?value\r\n    // where {\r\n    // dbr:Barack_Obama ?p ?value.\r\n    // }\r\n\r\n    let prefixURLOne = \r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURLOne = \r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    let queryBodyOne = \r\n      \"select+%3Fp+%3Fvalue%0D%0Awhere+%7B%0D%0Adbr%3A\" + \r\n      regexReplace(this.state.tableData[rowIndex][colIndex].data) +\r\n      \"+%3Fp+%3Fvalue.%0D%0A%7D&\";\r\n    let queryURLOne = prefixURLOne + queryBodyOne + suffixURLOne;\r\n    let otherColPromiseSubject = fetchJSON(queryURLOne);\r\n    promiseArray.push(otherColPromiseSubject);\r\n\r\n    // Below is the second query we will make. In here we are using the tableCell as OBJECT.\r\n\r\n    // select ?p ?value\r\n    // where {\r\n    // ?value ?p dbr:Barack_Obama.\r\n    // }\r\n\r\n    let prefixURLTwo = \r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURLTwo = \r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    let queryBodyTwo =\r\n      \"select+%3Fp+%3Fvalue%0D%0Awhere+%7B%0D%0A%3Fvalue+%3Fp+dbr%3A\" +\r\n      regexReplace(this.state.tableData[rowIndex][colIndex].data) +\r\n      \".%0D%0A%7D&\";\r\n    let queryURLTwo = prefixURLTwo + queryBodyTwo + suffixURLTwo;\r\n    let otherColPromiseObject = fetchJSON(queryURLTwo);\r\n    promiseArray.push(otherColPromiseObject);\r\n\r\n    allPromiseReady(promiseArray).then((values) => {\r\n      // console.log(values[0]);\r\n      // console.log(values[1]);\r\n      // let previewInfoArray = [];\r\n      let subjectInfoArray = \r\n        updatePreviewInfo(\r\n          values[0].results.bindings,\r\n          \"subject\"\r\n        );\r\n      let objectInfoArray = \r\n        updatePreviewInfo(\r\n          values[1].results.bindings,\r\n          \"object\"\r\n        );\r\n      // console.log(subjectInfoArray);\r\n      // console.log(objectInfoArray);\r\n      \r\n      // Here is where we make the modifications: instead of passing information to Action Panel, let's store them as states\r\n      let previewInfoArray = subjectInfoArray.concat(objectInfoArray);\r\n      let previewInfoExpanded = [];\r\n      for (let i = 0; i < previewInfoArray.length; ++i) {\r\n        previewInfoExpanded.push(false);\r\n      }\r\n      let selectedCell = _.cloneDeep(this.state.tableData[rowIndex][colIndex]);\r\n      let iframeURL = \"https://en.wikipedia.org/wiki/\" + this.state.tableData[rowIndex][colIndex].data;\r\n\r\n      let tempObj = {};\r\n      tempObj[\"task\"] = \"originPreviewPage\";\r\n      // // previewInfoArray correctly contains the cell preview we want to display\r\n      // // Now we just need to show it in the ActionPanel\r\n      // let tempObj = {};\r\n      // tempObj[\"task\"] = \"originPreviewPage\";\r\n      // tempObj[\"cellValue\"] = this.state.tableData[rowIndex][colIndex].data;\r\n      // tempObj[\"preview\"] = previewInfoArray;\r\n\r\n      // // Now, everything about cell preview has been completed. \r\n      // // Let's move on to deal with open link.\r\n      // let iframeURL = \"https://en.wikipedia.org/wiki/\" + this.state.tableData[rowIndex][colIndex].data;\r\n\r\n      // // Lastly, let's deal with cell origin\r\n      // let cellSelected = this.state.tableData[rowIndex][colIndex];\r\n\r\n      // let originElement = [];\r\n      // for (let i = 0; i < cellSelected.origin.length; ++i) {\r\n      //   originElement.push(<p>{niceRender(cellSelected.origin[i])}</p>);\r\n      // }\r\n      // // We push this property to tempObj\r\n      // tempObj[\"origin\"] = originElement;\r\n\r\n      // Support for undo: \r\n      document.body.classList.remove('waiting');\r\n      let lastAction = \"originPreviewPage\";\r\n      let prevState = \r\n          {\r\n            \"curActionInfo\": this.state.curActionInfo,\r\n            \"tabIndex\": this.state.tabIndex,\r\n            \"pageHidden\": this.state.pageHidden,\r\n            \"iframeURL\": this.state.iframeURL,\r\n            \"previewInfoArray\": this.state.previewInfoArray,\r\n            \"previewInfoExpanded\": this.state.previewInfoExpanded,\r\n            \"selectedCell\": this.state.selectedCell,\r\n            \"previewColIndex\": this.state.previewColIndex,\r\n          };\r\n      \r\n      this.setState({\r\n        curActionInfo: tempObj,\r\n        tabIndex: 0, // we want to set the currently active tab to be wrangling actions\r\n        previewColIndex: -1,\r\n        pageHidden: false,\r\n        iframeURL: iframeURL,\r\n        previewInfoArray: previewInfoArray,\r\n        previewInfoExpanded: previewInfoExpanded,\r\n        selectedCell: selectedCell,\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      });\r\n    });\r\n  }\r\n\r\n  toggleTable(e, index) {\r\n    let tableOpenList = this.state.tableOpenList.slice();\r\n    tableOpenList[index] = !tableOpenList[index];\r\n    // When we toggle on one table, we want to close all other tables\r\n    for (let i = 0; i < tableOpenList.length; ++i) {\r\n      if (i !== index) {\r\n        tableOpenList[i] = false;\r\n      }\r\n    }\r\n    this.setState({\r\n      tableOpenList: tableOpenList,\r\n    });\r\n  }\r\n\r\n  // The following function is a helper function for handleStartTable.\r\n\r\n  // It takes in 2 parameters:\r\n  // 1) tableDataExplore\r\n  // 2) selectedClassAnnotation\r\n\r\n  // It returns a Promise of an object with 5 properties:\r\n  // 1) keyColIndex\r\n  // 2) tableHeader\r\n  // 3) tableData\r\n  // 4) keyColNeighbours\r\n  // 5) optionsMap.\r\n\r\n  // This object contains all the information we needed for the Excel-style table.\r\n\r\n  getTableStates(tableDataExplore, selectedClassAnnotation) {\r\n    // We need to take care of keyColIndex, tableHeader, tableData, optionsMap, and keyColNeighbours\r\n\r\n    // tableDataExplore contains all the information we need to set the five states listed above\r\n    // We just need to make use of the \"data\" and \"origin\" attributes. rowSpan and colSpan have no impact here.\r\n    // Also, since we are not modifying tableDataExplore, we do not need to make a copy of it.\r\n\r\n    // First, let's deal with keyColIndex. \r\n    // We will use the first column such that it's class annotation is not [] or [\"Number\"] or [\"originURL\"]\r\n    // If no such column exists, we default it to the first column\r\n\r\n    // console.log(selectedClassAnnotation);\r\n\r\n    let keyColIndex = -1;\r\n    for (let i=0;i<selectedClassAnnotation.length;++i) {\r\n      if (selectedClassAnnotation[i].length > 0 \r\n          && !(selectedClassAnnotation[i].length === 1 && selectedClassAnnotation[i][0] === \"Number\")\r\n          && !(selectedClassAnnotation[i].length === 1 && selectedClassAnnotation[i][0] === \"originURL\")\r\n        ) {\r\n        keyColIndex = i+1; \r\n        break;\r\n      }\r\n    }\r\n    if (keyColIndex === -1) {\r\n      keyColIndex = 0;\r\n    }\r\n    // console.log(\"Key Column Index is: \");\r\n    // console.log(keyColIndex);\r\n\r\n    // Now, let's deal with tableHeader. Note: these tableHeaders only have value and label, no range or type\r\n    // Also note that since table headers can be multi-selects, each tableHeader element is in the form of a length one array\r\n    let tableHeader = [];\r\n    for (let j=0;j<tableDataExplore[0].length;++j) {\r\n      tableHeader.push(\r\n        [\r\n          {\"value\":tableDataExplore[0][j].data\r\n          ,\"label\":tableDataExplore[0][j].data}\r\n        ]\r\n      )\r\n    }\r\n    // console.log(\"Table header is: \");\r\n    // console.log(tableHeader);\r\n\r\n    // Now, let's deal with tableData. Wee need to handle both data and origin.\r\n    let tableData = [];\r\n    // console.log(tableDataExplore);\r\n    // This starts the loop for rows\r\n    for (let i=1;i<tableDataExplore.length;++i) {\r\n      let tempRow = [];\r\n      // This starts the loop for columns\r\n      for (let j=0;j<tableDataExplore[i].length;++j) {\r\n        // First set the data\r\n        let data = tableDataExplore[i][j].data;\r\n        // Then set the origin\r\n        let origin = [];\r\n        let originText = tableDataExplore[i][j].origin+\": \"+tableHeader[j][0].value+\": \"+tableDataExplore[i][j].data;\r\n        origin.push(originText);\r\n        tempRow.push({\"data\":data,\"origin\":origin});\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n    // console.log(\"Table data is: \");\r\n    // console.log(tableData);\r\n\r\n    // Now, let's deal with keyColNeighbours and optionsMap\r\n    // Note: the following part should be similar to what we have in contextSetColumn\r\n\r\n    let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", keyColIndex);\r\n    return allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    return allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n      \r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      return Promise.resolve(\r\n        {\r\n          \"keyColIndex\":keyColIndex,\r\n          \"tableHeader\":tableHeader,\r\n          \"tableData\":tableData,\r\n          \"keyColNeighbours\":keyColNeighbours,\r\n          \"firstDegNeighbours\":firstDegNeighbours,\r\n        }\r\n      )\r\n    })\r\n    })\r\n  }\r\n\r\n  // The following function handles the selection of table.\r\n\r\n  handleStartTable(e, tableIndex) {\r\n    document.body.classList.add('waiting');\r\n    \r\n    // We need to let table panel display the selected table\r\n    // And we need to update the Action Panel to display the first degree properties of the origigitnal page\r\n    // We do a fetch request here (Sixth Query). It gets the property neighbours of the original page that are links, as well as dct:subject\r\n    // Lastly, we need to set usecaseSelected to \"startSubject\"\r\n\r\n    // First query gets the property neighbours\r\n    let queryPromise = [];\r\n    let prefixURLOne =\r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURLOne =\r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    let queryBodyOne =\r\n      \"SELECT+%3Fp+%3Fo%0D%0AWHERE+%7B%0D%0A++++++dbr%3A\" +\r\n      urlReplace(this.state.urlPasted.slice(30)) +\r\n      \"+%3Fp+%3Fo.%0D%0A++++++BIND%28STR%28%3Fp%29+AS+%3FpString+%29.%0D%0A++++++FILTER%28isIRI%28%3Fo%29+%26%26+regex%28%3FpString%2C%22property%22%2C%22i%22%29+%26%26+%28%21regex%28%3FpString%2C%22text%22%2C%22i%22%29%29%29.%0D%0A%7D%0D%0A&\";\r\n    let queryURLOne = prefixURLOne + queryBodyOne + suffixURLOne;\r\n    let queryOne = fetchJSON(queryURLOne);\r\n    queryPromise.push(queryOne);\r\n\r\n    // Second query gets the dct:subject neighbours\r\n    let prefixURLTwo =\r\n      \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n    let suffixURLTwo =\r\n      \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n    let queryBodyTwo =\r\n      \"SELECT+%3Fo%0D%0AWHERE+%7B%0D%0A++++++dbr%3A\" +\r\n      urlReplace(this.state.urlPasted.slice(30)) +\r\n      \"+dct%3Asubject+%3Fo%0D%0A%7D&\";\r\n    let queryURLTwo = prefixURLTwo + queryBodyTwo + suffixURLTwo;\r\n    // console.log(queryURLTwo);\r\n    let queryTwo = fetchJSON(queryURLTwo);\r\n    queryPromise.push(queryTwo);\r\n\r\n    // Third query here should get the class annotations\r\n    queryPromise.push(\r\n      findClassAnnotation(this.state.originTableArray[tableIndex])\r\n    );\r\n\r\n    // now we process the query results\r\n    allPromiseReady(queryPromise).then((queryResults) => {\r\n      // console.log(queryResults[0].results.bindings);\r\n      // console.log(queryResults[1].results.bindings);\r\n      // console.log(queryResults[2]);\r\n      let selectedClassAnnotation = queryResults[2];\r\n      console.log(selectedClassAnnotation);\r\n\r\n      // First we fetch the property neighbours\r\n      // Let's also do some prefetching at this stage: let's remove the propertyNeighbours with too many siblings (150)\r\n      // and remove the propertyNeighbours with only one child (aka the originally pasted page)\r\n\r\n      let propertyNeighboursPO = [];\r\n      let promiseArray = [];\r\n      let bindingArray = [];\r\n\r\n      // The part below deals with the property neighbours\r\n      bindingArray = queryResults[0].results.bindings;\r\n      for (let i = 0; i < bindingArray.length; ++i) {\r\n        let predicate = bindingArray[i].p.value.slice(28);\r\n        // console.log(\"Predicate is \"+predicate);\r\n        let object = bindingArray[i].o.value.slice(28);\r\n        // console.log(\"Object is \"+object);\r\n        // If object includes some weird literal values, we replace it with \"NONEXISTING\"\r\n        if (object.includes(\"/\")) {\r\n          object = \"NONEXISTING\";\r\n        }\r\n        let prefixURL =\r\n          \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n        let suffixURL =\r\n          \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n        let queryBody =\r\n          \"SELECT+%3Fs+%0D%0AWHERE+%7B%0D%0A%09%3Fs+dbp%3A\" +\r\n          regexReplace(predicate) +\r\n          \"+dbr%3A\" +\r\n          regexReplace(object) +\r\n          \"%0D%0A%7D%0D%0A&\";\r\n        let queryURL = prefixURL + queryBody + suffixURL;\r\n        let curPromise = fetchJSON(queryURL);\r\n        propertyNeighboursPO.push({ predicate: predicate, object: object });\r\n        promiseArray.push(curPromise);\r\n      }\r\n\r\n      // The part below deals with the dct:subject neighbours\r\n      bindingArray = queryResults[1].results.bindings;\r\n      for (let i = 0; i < bindingArray.length; ++i) {\r\n        let object = bindingArray[i].o.value.slice(37);\r\n        let prefixURL =\r\n          \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n        let suffixURL =\r\n          \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n        let queryBody =\r\n          \"SELECT+%3Fs%0D%0AWHERE+%7B%0D%0A++++++%3Fs+dct%3Asubject+dbc%3A\" +\r\n          regexReplace(object) +\r\n          \"%0D%0A%7D&\";\r\n        let queryURL = prefixURL + queryBody + suffixURL;\r\n        let curPromise = fetchJSON(queryURL);\r\n        propertyNeighboursPO.push({ predicate: \"subject\", object: object });\r\n        promiseArray.push(curPromise);\r\n      }\r\n\r\n      // The part below processes all the siblings and remove neighbours with too many or too few siblings\r\n\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        let propertyNeighbours = [];\r\n        let urlOrigin = decodeURIComponent(this.state.urlPasted.slice(30));\r\n        // console.log(urlOrigin);\r\n        for (let i = 0; i < values.length; ++i) {\r\n          let curSiblingArray = values[i].results.bindings;\r\n          // Note, this 150 below should also be adjustable by users\r\n          if (curSiblingArray.length > 1 && curSiblingArray.length < 150) {\r\n            let siblingArray = [];\r\n            for (let i = 0; i < curSiblingArray.length; ++i) {\r\n              let siblingName = curSiblingArray[i].s.value.slice(28);\r\n              siblingArray.push({\r\n                isOpen: false,\r\n                name: siblingName,\r\n                tableArray: [],\r\n              });\r\n            }\r\n            // console.log(siblingArray);\r\n            propertyNeighbours.push({\r\n              predicate: propertyNeighboursPO[i].predicate,\r\n              object: propertyNeighboursPO[i].object,\r\n              isOpen: false,\r\n              siblingArray: siblingArray,\r\n            });\r\n          }\r\n        }\r\n        // we do a rudimentary ranking here: sort the property neighbours by the length of siblingArray\r\n        propertyNeighbours.sort((a, b) =>\r\n          a.siblingArray.length < b.siblingArray.length ? 1 : -1\r\n        );\r\n        // Then we call the parse table helper function to update the tableDataExplore\r\n        let selectedTableHTML = this.state.originTableArray[tableIndex];\r\n        // setTableFromHTML is the function that prepares the data for tableDataExplore\r\n        let tableDataExplore = setTableFromHTML(selectedTableHTML, urlOrigin);\r\n\r\n        // Modeless Change: We need to call the helper function this.getTableStates.\r\n        // By processing the tableDataExplore to get the right states for the Excel-style table.\r\n\r\n        // To do this, we need to call this.getTableStates here. We just need to pass in tableDataExplore and selectedClassAnnotation \r\n        let statePromise = [this.getTableStates(tableDataExplore, selectedClassAnnotation)];\r\n        allPromiseReady(statePromise).then((values) => {\r\n          let stateInfo = values[0];\r\n          // console.log(stateInfo);\r\n\r\n          // Lastly, we set up the information for the action panel\r\n          let tempObj = {};\r\n          tempObj[\"task\"] = \"showStartRecommend\";\r\n          tempObj[\"colIndex\"] = stateInfo.keyColIndex;\r\n          tempObj[\"recommendArray\"] = this.createStartRecommend(stateInfo.keyColNeighbours);\r\n\r\n          document.body.classList.remove('waiting');\r\n          // Support for undo: \r\n          let lastAction = \"handleStartTable\";\r\n          let prevState = \r\n              {\r\n                \"firstColFilled\": this.state.firstColFilled,\r\n                \"selectedTableIndex\": this.state.selectedTableIndex,\r\n                \"propertyNeighbours\": this.state.propertyNeighbours,\r\n                \"curActionInfo\": this.state.curActionInfo,\r\n                \"selectedClassAnnotation\": this.state.selectedClassAnnotation,\r\n                \"keyColIndex\": this.state.keyColIndex,\r\n                \"keyColNeighbours\": this.state.keyColNeighbours,\r\n                \"firstDegNeighbours\": this.state.firstDegNeighbours,\r\n                \"tableData\": this.state.tableData,\r\n                \"tableHeader\": this.state.tableHeader,\r\n                \"usecaseSelected\": this.state.usecaseSelected,\r\n                \"tabIndex\": this.state.tabIndex,\r\n              };\r\n\r\n          this.setState({\r\n            firstColFilled: true,\r\n            selectedTableIndex: tableIndex,\r\n            propertyNeighbours: propertyNeighbours,\r\n            // curActionInfo: {\"task\":\"afterPopulateColumn\"},\r\n            curActionInfo: tempObj, // Changed on Aug 20th\r\n            selectedClassAnnotation: selectedClassAnnotation,\r\n            keyColIndex: stateInfo.keyColIndex,\r\n            keyColNeighbours: stateInfo.keyColNeighbours,\r\n            firstDegNeighbours: stateInfo.firstDegNeighbours,\r\n            tableData: stateInfo.tableData,\r\n            tableHeader: stateInfo.tableHeader,\r\n            usecaseSelected: \"startTable\",\r\n            tabIndex: 1,\r\n            lastAction: lastAction,\r\n            prevState: prevState,\r\n          });\r\n        })\r\n      });\r\n    });\r\n  }\r\n\r\n  togglePropertyNeighbours(e, index) {\r\n    document.body.classList.add('waiting');\r\n    \r\n    // First let's do the toggling task\r\n    let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n    propertyNeighbours[index].isOpen = !propertyNeighbours[index].isOpen;\r\n\r\n    // we want to loop through all siblings if we are toggling a propertyNeighbour on\r\n    if (propertyNeighbours[index].isOpen === true) {\r\n      let bindingArray = propertyNeighbours[index].siblingArray;\r\n      let siblingArray = [];\r\n      let siblingNameArray = []; // this array keeps track of the sibling names\r\n      let promiseArray = [];\r\n      for (let i = 0; i < bindingArray.length; ++i) {\r\n        let siblingName = bindingArray[i].name;\r\n        let siblingURL = \"https://en.wikipedia.org/wiki/\" + siblingName;\r\n        let curPromise = fetchText(siblingURL);\r\n        promiseArray.push(curPromise);\r\n        siblingNameArray.push(siblingName);\r\n      }\r\n\r\n      // Since we only want to display siblings with useful tables, we do some checking here\r\n      allPromiseReady(promiseArray).then((values) => {\r\n        // tableArrayPromise stores an array of promises that resolve to tableArray\r\n        let tableArrayPromise = [];\r\n        for (let i = 0; i < values.length; ++i) {\r\n          let pageHTML = values[i];\r\n          // This is a helper function that fetches useful tables from pageHTML\r\n          // console.log(\"The class annotation for the selected table is: \");\r\n          // console.log(this.state.selectedClassAnnotation);\r\n          tableArrayPromise.push(\r\n            findTableFromHTML(\r\n              this.state.tableHeader,\r\n              pageHTML,\r\n              this.state.selectedClassAnnotation,\r\n              this.state.semanticEnabled,\r\n              this.state.unionCutOff,\r\n              siblingNameArray[i]\r\n            )\r\n          );\r\n          // we potentially want to do something different here if urlOrigin === siblingNameArray[i]\r\n          // We only want to keep siblings that do have useful tables\r\n          // if (tableArray.length !== 0) {\r\n          // siblingArray.push({\"isOpen\":false,\"name\":siblingNameArray[i],\"tableArray\":tableArray});\r\n          // }\r\n        }\r\n        allPromiseReady(tableArrayPromise).then((tableArrayValues) => {\r\n          for (let i = 0; i < tableArrayValues.length; ++i) {\r\n            siblingArray.push({\r\n              isOpen: false,\r\n              name: siblingNameArray[i],\r\n              tableArray: tableArrayValues[i],\r\n            });\r\n          }\r\n          // This following line sorts the siblingArray\r\n          siblingArray.sort(function (a, b) {\r\n            let aTableLength = a.tableArray.length;\r\n            let bTableLength = b.tableArray.length;\r\n            let aName = a.name;\r\n            let bName = b.name;\r\n            if (aTableLength === bTableLength) {\r\n              return aName < bName ? -1 : aName > bName ? 1 : 0;\r\n            } else {\r\n              return aTableLength > bTableLength ? -1 : 1;\r\n            }\r\n          });\r\n          propertyNeighbours[index].siblingArray = siblingArray;\r\n          document.body.classList.remove('waiting');\r\n          this.setState({\r\n            propertyNeighbours: propertyNeighbours,\r\n          });\r\n        });\r\n      });\r\n    } else {\r\n      document.body.classList.remove('waiting');\r\n      this.setState({\r\n        propertyNeighbours: propertyNeighbours,\r\n      });\r\n    }\r\n  }\r\n\r\n  // The following function handles the toggling of a sibling URL\r\n\r\n  toggleSibling(e, firstIndex, secondIndex) {\r\n    // Handle the toggling task\r\n    // console.log(\"Here we start the sibling toggle\");\r\n    // console.log(\"The current property neighbour is \");\r\n    // console.log(\r\n    //   \"The current property neighbour is \",\r\n    //   this.state.propertyNeighbours.slice()\r\n    // );\r\n    let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n    // console.log(propertyNeighbours);\r\n    let selectedSibling =\r\n      propertyNeighbours[firstIndex].siblingArray[secondIndex];\r\n\r\n    // Note that if this sibling's tableArray is empty, we probably do not want to toggle it.\r\n    if (selectedSibling.tableArray.length === 0) {\r\n      // console.log(\"Selected sibling has no tables: \" + selectedSibling.name);\r\n      let iframeURL = \"https://en.wikipedia.org/wiki/\" + selectedSibling.name;\r\n      this.setState({\r\n        pageHidden: false,\r\n        iframeURL: iframeURL,\r\n      });\r\n    } else {\r\n      // if the sibling's tableArray is not empty, we want to toggle it\r\n      selectedSibling.isOpen = !selectedSibling.isOpen;\r\n      // console.log(\"Let's take a look at the current property neighbour\");\r\n      // console.log(propertyNeighbours[firstIndex]);\r\n      // if (propertyNeighbours[firstIndex].isOpen === false) {\r\n      // propertyNeighbours[firstIndex].isOpen = true;\r\n      // console.log(\"In here we should have fixed the problem.\");\r\n      // console.log(propertyNeighbours);\r\n      // }\r\n      // We also want to change the iframe displayed at the bottom if we are toggling a sibling open\r\n      if (selectedSibling.isOpen === true) {\r\n        // console.log(\"If we get here, then sibling page should be opened\");\r\n        let iframeURL = \"https://en.wikipedia.org/wiki/\" + selectedSibling.name;\r\n        // console.log(propertyNeighbours[firstIndex].isOpen);\r\n        propertyNeighbours[firstIndex].isOpen = true;\r\n        // console.log(propertyNeighbours[firstIndex]);\r\n        // console.log(propertyNeighbours[firstIndex].isOpen);\r\n        // console.log(\"First index is: \" + firstIndex);\r\n        // console.log(\"In here we should have fixed the problem.\");\r\n        // console.log(\"This is the property neighbour we will pass in\");\r\n        // console.log(propertyNeighbours);\r\n        this.setState({\r\n          propertyNeighbours: propertyNeighbours,\r\n          iframeURL: iframeURL,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          propertyNeighbours: propertyNeighbours,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // The following function handles the toggling of other table (that's the same as the selected table)\r\n\r\n  toggleOtherTable(e, firstIndex, secondIndex, thirdIndex) {\r\n    // First handle the toggling task\r\n    let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n    const selectedTable =\r\n      propertyNeighbours[firstIndex].siblingArray[secondIndex].tableArray[\r\n        thirdIndex\r\n      ];\r\n    // console.log(selectedTable.data);\r\n    selectedTable.isOpen = !selectedTable.isOpen;\r\n    this.setState({\r\n      propertyNeighbours: propertyNeighbours,\r\n    });\r\n  }\r\n\r\n  // The following funcion unions the table that user has selected to the table in the TablePanel\r\n  // by changing tableDataExplore\r\n\r\n  unionTable(firstIndex, secondIndex, otherTableHTML, colMapping) {\r\n    document.body.classList.add('waiting');\r\n    // First we create a copy of the current tableData\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    // console.log(tableData);\r\n\r\n    // Then we get the clean data and set the origin for the other table.\r\n    // We do so by calling setTableFromHTML, and setUnionData.\r\n    let otherTableOrigin = this.state.propertyNeighbours[firstIndex].siblingArray[secondIndex].name;\r\n    let otherTableData = setTableFromHTML(otherTableHTML, otherTableOrigin);\r\n    otherTableData = setUnionData(otherTableData);\r\n    // console.log(otherTableData);\r\n\r\n    // console.log(colMapping);\r\n\r\n    // Note: we have to create a copy of colMapping, otherwise we are modifying the reference\r\n    let tempMapping = colMapping.slice();\r\n    tableData = tableConcat(\r\n      tableData,\r\n      otherTableData,\r\n      tempMapping\r\n    );\r\n\r\n    // console.log(tableData);\r\n\r\n    // Now, since we are changing the number of rows, we need to call updateNeighbourInfo\r\n    // Note: the colIndex we give to getNeighbourPromise should be this.state.keyColIndex\r\n    let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", this.state.keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", this.state.keyColIndex);\r\n    allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      document.body.classList.remove('waiting');\r\n      // Suppport for undo.\r\n      let lastAction = \"unionTable\";\r\n      let prevState = \r\n          {\r\n            \"tableData\":this.state.tableData,\r\n            \"keyColNeighbours\":this.state.keyColNeighbours,\r\n            \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n            \"previewColIndex\": this.state.previewColIndex,\r\n          };\r\n      \r\n      this.setState({\r\n        tableData: tableData,\r\n        keyColNeighbours: keyColNeighbours,\r\n        firstDegNeighbours: firstDegNeighbours,\r\n        previewColIndex: -1,\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      })\r\n    })\r\n    })\r\n  }\r\n\r\n  // The following function unions all similar tables found under a sibling page with the selected table\r\n  unionPage(firstIndex, secondIndex) {\r\n    document.body.classList.add('waiting');\r\n    // First we create a copy of the current tableDataExplore\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    // We get the tableArray and name of the current sibling page\r\n    let tableArray = \r\n      this.state.propertyNeighbours[firstIndex].siblingArray[secondIndex].tableArray;\r\n    let otherTableOrigin = \r\n      this.state.propertyNeighbours[firstIndex].siblingArray[secondIndex].name;\r\n\r\n    for (let i = 0; i < tableArray.length; ++i) {\r\n      // We get the clean data for the current \"other table\"\r\n      let otherTableData = setTableFromHTML(\r\n        tableArray[i].data,\r\n        otherTableOrigin\r\n      );\r\n      // We fetch the header row now\r\n      let headerRow = otherTableData[0];\r\n      otherTableData = setUnionData(otherTableData);\r\n      // console.log(headerRow);\r\n      // console.log(this.state.tableHeader);\r\n\r\n      // Let's do some checking here: we do not want to union the same table with itself\r\n      let sameTable = false;\r\n      if (otherTableOrigin === decodeURIComponent(this.state.urlPasted.slice(30)) && headerRow.length === tableData[0].length) {\r\n        let diffColFound = false;\r\n        for (let m=0; m<headerRow.length; ++m) {\r\n          if (headerRow[m].data !== this.state.tableHeader[m].value) {\r\n            diffColFound = true;\r\n            break;\r\n          }\r\n        }\r\n        if (diffColFound === false) {\r\n          sameTable = true;\r\n        }\r\n      }\r\n      // We create a copy of the colMapping of the current \"other table\"\r\n      let tempMapping = tableArray[i].colMapping.slice();\r\n\r\n      // if sameTable is false, we can safely union the data\r\n      if (sameTable === false) {\r\n        tableData = tableConcat(\r\n          tableData,\r\n          otherTableData,\r\n          tempMapping\r\n        );\r\n      }\r\n    }\r\n    // Now, since we are changing the number of rows, we need to call updateNeighbourInfo\r\n    // Note: the colIndex we give to getNeighbourPromise should be this.state.keyColIndex\r\n    let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", this.state.keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", this.state.keyColIndex);\r\n    allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      document.body.classList.remove('waiting');\r\n      // Suppport for undo.\r\n      let lastAction = \"unionPage\";\r\n      let prevState = \r\n          {\r\n            \"tableData\":this.state.tableData,\r\n            \"keyColNeighbours\":this.state.keyColNeighbours,\r\n            \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n            \"previewColIndex\": this.state.previewColIndex,\r\n          };\r\n      \r\n      this.setState({\r\n        tableData: tableData,\r\n        keyColNeighbours: keyColNeighbours,\r\n        firstDegNeighbours: firstDegNeighbours,\r\n        previewColIndex: -1,\r\n        lastAction: lastAction,\r\n        prevState: prevState,\r\n      })\r\n    })\r\n    })\r\n  }\r\n\r\n  // The following function unions all similar tables found under a property(parent) neighbour with the selected table\r\n  // This is the highest level of union.\r\n\r\n  unionProperty(firstIndex) {\r\n    // First we create a copy of the current tableDataExplore\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n\r\n    // we get the siblingArray of the current property neighbour\r\n    let siblingArray = this.state.propertyNeighbours[firstIndex].siblingArray;\r\n\r\n    for (let i = 0; i < siblingArray.length; ++i) {\r\n      // We get the tableArray and name of the current sibling page\r\n      let tableArray = siblingArray[i].tableArray;\r\n      let otherTableOrigin = siblingArray[i].name;\r\n      // console.log(otherTableOrigin);\r\n      // If the current sibling has no tables that are unionable, we break out of the loop.\r\n      // Because siblingArray is sorted by the length of their tableArray\r\n      if (tableArray.length === 0) {\r\n        break;\r\n      }\r\n      // Else, we want to union all unionable tables from the current sibling page\r\n      else {\r\n        for (let j = 0; j < tableArray.length; ++j) {\r\n          // We get the clean data for the current \"other table\"\r\n          let otherTableData = setTableFromHTML(\r\n            tableArray[j].data,\r\n            otherTableOrigin\r\n          );\r\n          // We fetch the column header row\r\n          let headerRow = otherTableData[0];\r\n          otherTableData = setUnionData(otherTableData);\r\n          // Let's do some checking here: we do not want to union the same table with itself\r\n          let sameTable = false;\r\n          if (otherTableOrigin === decodeURIComponent(this.state.urlPasted.slice(30)) && headerRow.length === tableData[0].length) {\r\n            let diffColFound = false;\r\n            for (let m=0; m<headerRow.length; ++m) {\r\n              if (headerRow[m].data !== this.state.tableHeader[m].value) {\r\n                diffColFound = true;\r\n                break;\r\n              }\r\n            }\r\n            if (diffColFound === false) {\r\n              sameTable = true;\r\n            }\r\n          }\r\n          // We create a copy of the colMapping of the current \"oother table\"\r\n          let tempMapping = tableArray[j].colMapping.slice();\r\n\r\n          // if sameTable is false, we can safely union the data\r\n          if (sameTable === false) {\r\n            tableData = tableConcat(\r\n              tableData,\r\n              otherTableData,\r\n              tempMapping\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Support for undo: \r\n    let lastAction = \"unionProperty\";\r\n    let prevState = \r\n        {\r\n          \"tableData\":this.state.tableData,\r\n        };\r\n\r\n    this.setState({\r\n      tableData: tableData,\r\n      lastAction: lastAction,\r\n      prevState: prevState,\r\n    });\r\n  }\r\n\r\n  // This function handles the change of \"semanticEnabled\" setting\r\n\r\n  toggleSemantic(e) {\r\n    // we want to toggle off all the property neighbours in the action panel\r\n    // because changing semanticEnabled changes our search criteria\r\n    let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n    for (let i = 0; i < propertyNeighbours.length; ++i) {\r\n      propertyNeighbours[i].isOpen = false;\r\n    }\r\n\r\n    this.setState({\r\n      semanticEnabled: e.target.value,\r\n      propertyNeighbours: propertyNeighbours,\r\n    });\r\n  }\r\n\r\n  // This function handles the change of the unionCutoff percentage\r\n\r\n  unionCutOffChange(e) {\r\n    // we want to toggle off all the property neighbours in the action panel\r\n    // because changing union cutoff changes our search criteria\r\n    let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n    for (let i = 0; i < propertyNeighbours.length; ++i) {\r\n      propertyNeighbours[i].isOpen = false;\r\n    }\r\n    this.setState({\r\n      unionCutOff: e.target.value,\r\n      propertyNeighbours: propertyNeighbours,\r\n    });\r\n  }\r\n\r\n  // This function handles opening the filter for a particular column\r\n\r\n  openFilter(e, colIndex) {\r\n    // In this function, we want to set showFilter to true, and update dataAndChecked based on colIndex\r\n\r\n    let dataArray = [];\r\n    for (let i = 0; i < this.state.tableData.length; ++i) {\r\n      dataArray.push(this.state.tableData[i][colIndex].data);\r\n    }\r\n    dataArray = [...new Set(dataArray)];\r\n    // Let's sort this dataArray a bit: we put N/A at the beginning of the array\r\n    dataArray.sort(\r\n      function(a,b) { \r\n        return a === \"N/A\" ? -1 : b === \"N/A\" ? 1 : 0; \r\n      }\r\n    );\r\n\r\n    let dataAndChecked = [];\r\n    for (let i=0;i<dataArray.length;++i) {\r\n      dataAndChecked.push(\r\n        {\r\n          \"data\":dataArray[i],\r\n          \"checked\":true\r\n        }\r\n      )\r\n    }\r\n    // console.log(dataAndChecked);\r\n\r\n    this.setState({\r\n      dataAndChecked: dataAndChecked,\r\n      showFilter: true,\r\n      checkAll: true,   // we want to set checkAll to true whenever we open the filter modal\r\n      curFilterIndex: colIndex,\r\n    })\r\n  }\r\n\r\n  // This function handles cancelling the filter (so we close it).\r\n\r\n  cancelFilter(e) {\r\n    this.setState({\r\n      dataAndChecked: [],\r\n      showFilter: false,\r\n      curFilterIndex: -1,\r\n    })\r\n  }\r\n  \r\n\r\n  // This function handles toggling the data checkboxes in filter modal.\r\n\r\n  toggleChecked(e, checkIndex) {\r\n    let dataAndChecked = this.state.dataAndChecked;\r\n    dataAndChecked[checkIndex].checked = !dataAndChecked[checkIndex].checked;\r\n    this.setState({\r\n      dataAndChecked:dataAndChecked,\r\n    })\r\n  }\r\n\r\n  // This function handles toggling the Check/Uncheck all checkbox in filter modal.\r\n\r\n  toggleAll(e) {\r\n    let checkAll = this.state.checkAll;\r\n    let dataAndChecked = this.state.dataAndChecked;\r\n    checkAll = !checkAll;\r\n    // Now we loop through dataAndChecked to set all the checked attribute\r\n    for (let i = 0; i < dataAndChecked.length; ++i) {\r\n      dataAndChecked[i].checked = checkAll;\r\n    }\r\n    this.setState({\r\n      checkAll: checkAll,\r\n      dataAndChecked: dataAndChecked,\r\n    })\r\n  }\r\n\r\n  // This function handles applying the filter to tableData, based on dataAndChecked\r\n\r\n  applyFilter(e) {\r\n    // console.log(this.state.dataAndChecked);\r\n    // console.log(this.state.curFilterIndex);\r\n\r\n    // The following part are added for debugging purposes\r\n    let allFalse = true;\r\n    for (let i = 0; i < this.state.dataAndChecked.length; ++i) {\r\n      if (this.state.dataAndChecked[i].checked === true) {\r\n        allFalse = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // We do not want users to toggle every value off\r\n    if (allFalse === true) {\r\n      alert(\"Please do not remove every value from the table!\");\r\n    }\r\n\r\n    // This else clause contains the original function body\r\n    else {\r\n      let valuesToKeep = [];\r\n      for (let i=0;i<this.state.dataAndChecked.length;++i) {\r\n        if (this.state.dataAndChecked[i].checked === true) {\r\n          valuesToKeep.push(this.state.dataAndChecked[i].data);\r\n        }\r\n      }\r\n      let tableData = _.cloneDeep(this.state.tableData);\r\n      for (let i=0;i<tableData.length;++i) {\r\n        if (!valuesToKeep.includes(tableData[i][this.state.curFilterIndex].data)) {\r\n          tableData.splice(i,1);\r\n          --i;\r\n        }\r\n      }\r\n\r\n      // Now, since we are changing the number of rows, we need to call updateNeighbourInfo\r\n      // Note: the colIndex we give to getNeighbourPromise should be this.state.keyColIndex\r\n      let promiseArrayOne = this.getNeighbourPromise(tableData, \"subject\", this.state.keyColIndex);\r\n      let promiseArrayTwo = this.getNeighbourPromise(tableData, \"object\", this.state.keyColIndex);\r\n      allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n      allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n        // We call updateNeighbourInfo here because we are changing the rows\r\n        let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n        let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n        let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n        // Suppport for undo.\r\n        let lastAction = \"applyFilter\";\r\n        let prevState = \r\n            {\r\n              \"tableData\":this.state.tableData,\r\n              \"curActionInfo\":this.state.curActionInfo,\r\n              \"keyColNeighbours\":this.state.keyColNeighbours,\r\n              \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n              \"previewColIndex\": this.state.previewColIndex,\r\n            };\r\n        \r\n        this.setState({\r\n          dataAndChecked: [],\r\n          showFilter: false,\r\n          curFilterIndex: -1,\r\n          tableData: tableData,\r\n          keyColNeighbours: keyColNeighbours,\r\n          firstDegNeighbours: firstDegNeighbours,\r\n          previewColIndex: -1,\r\n          lastAction: lastAction,\r\n          prevState: prevState,\r\n        })\r\n      })\r\n      })\r\n    }\r\n  }\r\n\r\n  // This function hanles switching tabs\r\n\r\n  handleTabSwitch(index) {\r\n    // If we are switching to \"Union Table\" tab from \"Wrangling Actions\" tab, we want to toggle off all the property neighbours.\r\n    // Since we might have potentially changed the table in table panel, thus changed the search criteria as well\r\n    if (index === 1) {\r\n      let propertyNeighbours = this.state.propertyNeighbours.slice();\r\n      for (let i = 0; i < propertyNeighbours.length; ++i) {\r\n        propertyNeighbours[i].isOpen = false;\r\n      }\r\n      this.setState({\r\n        propertyNeighbours: propertyNeighbours,\r\n        tabIndex: index,\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        tabIndex: index,\r\n      })\r\n    }\r\n  }\r\n\r\n  // This function undos the previous change that user has made to the result table in table panel\r\n\r\n  undoPreviousStep() {\r\n    // We first get which action we need to undo\r\n    let lastAction = this.state.lastAction;\r\n    // Then we fetch the previous state\r\n    let prevState = this.state.prevState;\r\n    // console.log(lastAction);\r\n    // console.log(prevState);\r\n\r\n    // Note, since we are allowing one step undo only, we set lastAction to \"\" everytime we run this function\r\n\r\n    // Case 1: Undo the ULR Paste. \r\n    // In this case we need to restore urlPasted, iframeURL, originTableArray, and tableOpenList\r\n    if (lastAction === \"handleURLPaste\") {\r\n      this.setState({\r\n        urlPasted: prevState.urlPasted,\r\n        iframeURL: prevState.iframeURL,\r\n        originTableArray: prevState.originTableArray,\r\n        tableOpenList: prevState.tableOpenList,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 2: Undo the selection of the task: startSubject.\r\n    // In this case we need to restore usecaseSelected, tableData, firstColSelection, firstColChecked, tabIndex, and curActionInfo\r\n\r\n    else if (lastAction === \"handleStartSubject\") {\r\n      this.setState({\r\n        usecaseSelected: prevState.usecaseSelected,\r\n        tableData: prevState.tableData,\r\n        firstColSelection: prevState.firstColSelection,\r\n        firstColChecked: prevState.firstColChecked,\r\n        tabIndex: prevState.tabIndex,\r\n        curActionInfo: prevState.curActionInfo,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 3: Undo the selection of the task: startTable.\r\n    // In this case we need to restore many states. See code below.\r\n\r\n    else if (lastAction === \"handleStartTable\") {\r\n      this.setState({\r\n        firstColFilled: prevState.firstColFilled,\r\n        selectedTableIndex: prevState.selectedTableIndex,\r\n        propertyNeighbours: prevState.propertyNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        keyColIndex: prevState.keyColIndex,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        usecaseSelected: prevState.usecaseSelected,\r\n        tabIndex: prevState.tabIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 4: Undo the population of key column.\r\n    // In this case we need to restore keyColIndex, keyColNeighbours, firstDegNeighbours, firstColFilled, \r\n    //                                 curActionInfo, tableData, tableHeader\r\n\r\n    else if (lastAction === \"populateKeyColumn\") {\r\n      this.setState({\r\n        keyColIndex: prevState.keyColIndex,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        firstColFilled: prevState.firstColFilled,\r\n        firstColHeaderInfo: prevState.firstColHeaderInfo,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 5: Undo the population of a new column.\r\n    // In this case we need to restore curActionInfo, tableData.\r\n    else if (lastAction === \"populateOtherColumn\") {\r\n      this.setState({\r\n        curActionInfo: prevState.curActionInfo,\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 6: Undo the population of same neighbour in different columns.\r\n    // In this case we need to restore curActionInfo, tableData, tableHeader, optionsMap.\r\n    else if (lastAction === \"sameNeighbourDiffRow\") {\r\n      this.setState({\r\n        curActionInfo: prevState.curActionInfo,\r\n        tableData: prevState.tableData,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 7: Undo the population of same neighbour in the same column.\r\n    // In this case we need to restore the curActionInfo, tableData.\r\n    else if (lastAction === \"sameNeighbourOneRow\") {\r\n      this.setState({\r\n        curActionInfo: prevState.curActionInfo,\r\n        tableData: prevState.tableData,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 9: Undo the union of tables.\r\n    // In this case we need to restore tableData\r\n    else if (lastAction === \"unionTable\" || lastAction === \"unionPage\" || lastAction === \"unionProperty\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 10: Undo the addition of a new column\r\n    else if (lastAction === \"contextAddColumn\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        curActionInfo: prevState.curActionInfo,\r\n        keyColIndex: prevState.keyColIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        tabIndex: prevState.tabIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 11: Undo the set of search cell.\r\n    else if (lastAction === \"contextSetColumn\") {\r\n      this.setState({\r\n        keyColIndex: prevState.keyColIndex,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        tabIndex: prevState.tabIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // // Case 12: Undo the showing of cell origin.\r\n    // else if (lastAction === \"contextCellOrigin\") {\r\n    //   this.setState({\r\n    //     curActionInfo: prevState.curActionInfo,\r\n    //     tabIndex: prevState.tabIndex,\r\n    //     lastAction: \"\",\r\n    //   })\r\n    // }\r\n\r\n    // Case 12: Undo the showing of cell preview.\r\n    else if (lastAction === \"originPreviewPage\") {\r\n      this.setState({\r\n        curActionInfo: prevState.curActionInfo,\r\n        tabIndex: prevState.tabIndex,\r\n        pageHidden: prevState.pageHidden,\r\n        iframeURL: prevState.iframeURL,\r\n        previewInfoArray: prevState.previewInfoArray,\r\n        previewInfoExpanded: prevState.previewInfoExpanded,\r\n        selectedCell: prevState.selectedCell,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 13: Undo the deletion of column.\r\n    else if (lastAction === \"contextDeleteColumn\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        keyColIndex: prevState.keyColIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        propertyNeighbours: prevState.propertyNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 14: Undo the sorting of a column.\r\n    else if (lastAction === \"contextSortColumn\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 14: Undo the deduping of a column.\r\n    else if (lastAction === \"contextDedupColumn\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        tabIndex: prevState.tabIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 15: Undo the row filtering based on column filters.\r\n    else if (lastAction === \"applyFilter\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        curActionInfo: prevState.curActionInfo,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // Case 16: Undo the joining of two tables.\r\n    else if (lastAction === \"runJoin\") {\r\n      this.setState({\r\n        curActionInfo: prevState.curActionInfo,\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        previewColIndex: prevState.previewColIndex,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    else if (lastAction === \"confirmAddFirstCol\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        firstDegNeighbours: prevState.firstDegNeighbours,\r\n        keyColNeighbours: prevState.keyColNeighbours,\r\n        firstColHeaderInfo: prevState.firstColHeaderInfo,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    else if (lastAction === \"toggleOtherNeighbour\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        previewColIndex: prevState.previewColIndex,\r\n        otherColChecked: prevState.otherColChecked,\r\n        otherColCheckedIndex: prevState.otherColCheckedIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    else if (lastAction === \"populateRecommendation\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        keyColIndex: prevState.keyColIndex,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        curActionInfo: prevState.curActionInfo,\r\n        tabIndex: prevState.tabIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    else if (lastAction === \"populateStartRecommend\") {\r\n      this.setState({\r\n        tableData: prevState.tableData,\r\n        tableHeader: prevState.tableHeader,\r\n        keyColIndex: prevState.keyColIndex,\r\n        selectedClassAnnotation: prevState.selectedClassAnnotation,\r\n        curActionInfo: prevState.curActionInfo,\r\n        tabIndex: prevState.tabIndex,\r\n        previewColIndex: prevState.previewColIndex,\r\n        lastAction: \"\",\r\n      })\r\n    }\r\n\r\n    // This is an empty else clause.\r\n    else {\r\n\r\n    }\r\n  }\r\n\r\n  // The two following functions opens/closes the modal for union table settings.\r\n\r\n  openModal() {\r\n    this.setState({\r\n      showSetting: true,\r\n    })\r\n  }\r\n\r\n  closeModal() {\r\n    this.setState({\r\n      showSetting: false,\r\n    })\r\n  }\r\n\r\n  // The following function toggles this.state.showTableSelection.\r\n\r\n  toggleTableSelection() {\r\n    let showTableSelection = !this.state.showTableSelection;\r\n    this.setState({\r\n      showTableSelection: showTableSelection,\r\n    })\r\n  }\r\n\r\n  // The following function handles the toggling of \"show unionable tables\" and \"show joinable tables\".\r\n  // based on whether the string passed in is \"union\" or \"join\"\r\n\r\n  toggleUnionJoin(e, str) {\r\n    // In this case we are toggling on/off unionable tables \r\n    if (str === \"union\") {\r\n      this.setState({\r\n        showUnionTables: !this.state.showUnionTables,\r\n        showJoinTables: false,\r\n      })\r\n    }\r\n    // In this case we are toggling on/off joinable tables \r\n    else {\r\n      // Note: every time before we toggle on joinable tables, let's set all this.state.tableOpenList to false\r\n      let tableOpenList = this.state.tableOpenList.slice();\r\n      for (let i = 0; i < tableOpenList.length; ++i) {\r\n        tableOpenList[i] = false;\r\n      }\r\n      this.setState({\r\n        showUnionTables: false,\r\n        showJoinTables: !this.state.showJoinTables,\r\n        tableOpenList: tableOpenList,\r\n      })\r\n    }\r\n  }\r\n\r\n  // The following function handles the join of a selected table with the table in tablePanel.\r\n\r\n  handleJoinTable(e, i) {\r\n    // We need to get two arrays of column headers. One for the table panel table, one for the selected table to join.\r\n    let tableHeader = _.cloneDeep(this.state.tableHeader);\r\n    let originTableHeader = [];\r\n    let joinTableHeader = [];\r\n\r\n    // Note: both originTableHeader and joinTableHeader are array of objects with three properties: label, value, and index\r\n\r\n    // First we get the header for the origin table\r\n    // console.log(tableHeader);\r\n    // Let's loop through this tableHeader to fill the originTableHeader\r\n    for (let i = 0; i < tableHeader.length; ++i) {\r\n      // If the current element in table header has length of 0, it means it's empty\r\n      if (tableHeader[i].length === 0) {\r\n        break;\r\n      }\r\n      else {\r\n        // We loop through the tableHeader[i]\r\n        let value = \"\";\r\n        for (let j = 0; j < tableHeader[i].length; ++j) {\r\n          let valueToAdd = j > 0 ? \"&\" + tableHeader[i][j].value : tableHeader[i][j].value;\r\n          value+=valueToAdd;\r\n        }\r\n        originTableHeader.push(\r\n          {\r\n            \"value\":value,\r\n            \"label\":value,\r\n            \"index\":i\r\n          }\r\n        )\r\n      }\r\n    }\r\n    // console.log(originTableHeader);\r\n\r\n    // Now that we have originTableHeader working correctly, let's get the joinTableHeader\r\n    let urlOrigin = decodeURIComponent(this.state.urlPasted.slice(30));\r\n    let joinTableData = setTableFromHTML(this.state.originTableArray[i], urlOrigin);\r\n    // console.log(joinTable);\r\n\r\n    // We start the index from 1, because 0 index corresponds to OriginURL\r\n    for (let i = 0; i < joinTableData[0].length; ++i) {\r\n      joinTableHeader.push(\r\n        {\r\n          \"value\":joinTableData[0][i].data,\r\n          \"label\":joinTableData[0][i].data,\r\n          \"index\":i\r\n        }\r\n      )\r\n    }\r\n\r\n    // Now we take a look at originTableHeader, joinTableHeader, and joinTable\r\n    // console.log(originTableHeader);\r\n    // console.log(joinTableHeader);\r\n    // console.log(joinTableData);\r\n\r\n    // It seems like we have fetched the right values. \r\n    // Now we use these to update states, so that jon modal can display the right content.\r\n\r\n    // Bugfix here: if either tableHeader is empty, we want to show an alert message\r\n    if (originTableHeader.length === 0 || joinTableHeader.length === 0) {\r\n      alert(\"One of the join tables have no data. Join cannot be performed.\");\r\n    }\r\n    else {\r\n      this.setState({\r\n        showJoinModal: true,\r\n        joinTableIndex: i,\r\n        joinTableData: joinTableData,\r\n        originColOptions: originTableHeader,\r\n        joinColOptions: joinTableHeader,\r\n      })\r\n    }\r\n  }\r\n\r\n  // The following function handles cancelling the join operation.\r\n\r\n  cancelJoin(e) {\r\n    this.setState({\r\n      showJoinModal: false,\r\n    })\r\n  }\r\n\r\n  // The following function handles the selection of join columns.\r\n  // It updates either originJoinIndex, or joinJoinIndex, based on the second parameter passed in\r\n\r\n  selectJoinColumn(e, table) {\r\n    // console.log(e.index);\r\n    if (table === \"originTable\") {\r\n      this.setState({\r\n        originJoinIndex: e.index,\r\n      })\r\n    }\r\n    else {\r\n      this.setState({\r\n        joinJoinIndex: e.index,\r\n      })\r\n    }\r\n  }\r\n\r\n  // The function handles the actual join of two selected tables. \r\n  // Currently, the only join type supported is left join\r\n\r\n  // Since join is equal to column addition, we need to update tableData, tableHeader, optionsMap, and selectedClassAnnotation\r\n  runJoin(e) {\r\n    // First check all the info that we needed\r\n    let joinTableData = this.state.joinTableData.slice();\r\n    let originJoinIndex = this.state.originJoinIndex;\r\n    let joinJoinIndex = this.state.joinJoinIndex;\r\n    // console.log(joinTableData);\r\n    // console.log(originJoinIndex);\r\n    // console.log(joinJoinIndex);\r\n    \r\n    // If the join table has n columns, then we are adding n-1 new columns to the table in table panel.\r\n    // Since we only allow join of one column from each table.\r\n\r\n    // Let's deal with tableHeader, optionsMap, and selectedCalssAnnotation, before we move on to tableData.\r\n    let tableHeaderUpdated = this.state.tableHeader.slice();\r\n    let optionsMapUpdated = this.state.optionsMap.slice();\r\n    let selectedClassAnnotationUpdated = this.state.selectedClassAnnotation.slice();\r\n\r\n    // First we handle tableHeader's addition.\r\n    // We first loop through tableHeader to remove all the empty ones\r\n    for (let i = 0; i < tableHeaderUpdated.length; ++i) {\r\n      if (tableHeaderUpdated[i] === \"\") {\r\n        tableHeaderUpdated.splice(i,1);\r\n        --i;\r\n      }\r\n    }\r\n    // Now we push on the new columns. Note that it has to be in the form of an array\r\n    for (let i = 0; i < joinTableData[0].length; ++i) {\r\n      if (i !== joinJoinIndex) {\r\n        tableHeaderUpdated.push(\r\n          [\r\n            {\r\n              \"value\":joinTableData[0][i].data,\r\n              \"label\":joinTableData[0][i].data\r\n            }\r\n          ]\r\n        )\r\n      }\r\n    }\r\n    // console.log(tableHeaderUpdated); \r\n\r\n    // Then we handle optionsMap's addition. We do not need to do much here.\r\n    // We start the index from 1, because we only add in n-1 new columns.\r\n    for (let i = 1; i < joinTableData[0].length; ++i) {\r\n      optionsMapUpdated.push([]);\r\n    }\r\n    // console.log(optionsMapUpdated);\r\n\r\n    // Then we handle selectedClassAnnotation's addition.\r\n    let queryPromise = [findClassAnnotation(this.state.originTableArray[this.state.joinTableIndex])];\r\n    allPromiseReady(queryPromise).then((values) => {\r\n    // Note, we need to push on an empty [] to values here, corresponding to the originURL column's class annotation\r\n    values[0].splice(0, 0, []);\r\n    for (let i = 0; i < values[0].length; ++i) {\r\n      if (i !== joinJoinIndex) {\r\n        selectedClassAnnotationUpdated.push(values[0][i]);\r\n      }\r\n    }\r\n    console.log(selectedClassAnnotationUpdated);\r\n    \r\n    // Lastly, and most importantly, we want to handle tableData's change.\r\n    // Let's start with an empty tableDataUpdated. Loop through tableData. \r\n    // Use a bool to keep track of if tableData[i][originJoinIndex] is in join table. For every yes, we push one element onto tableDataUpdated.\r\n    // If at the end, the bool is still no, we push on tableData[i] with a bunch of N/A's at the position of the newly added columns.\r\n    let tableData = _.cloneDeep(this.state.tableData);\r\n    let tableDataUpdated = [];\r\n    // Let's first run some code to process joinTableData, so that it shares the same format as tableData\r\n    // Now, let's deal with tableData. Wee need to handle both data and origin.\r\n    let joinTableHeader = [];\r\n    for (let j=0;j<joinTableData[0].length;++j) {\r\n      joinTableHeader.push(\r\n        {\"value\":joinTableData[0][j].data\r\n        ,\"label\":joinTableData[0][j].data}\r\n      )\r\n    }\r\n    let joinTableDataUpdated = [];\r\n    // console.log(tableDataExplore);\r\n    // This starts the loop for rows\r\n    for (let i=1;i<joinTableData.length;++i) {\r\n      let tempRow = [];\r\n      // This starts the loop for columns\r\n      for (let j=0;j<joinTableData[i].length;++j) {\r\n        // First set the data\r\n        let data = joinTableData[i][j].data;\r\n        // Then set the origin\r\n        let origin = [];\r\n        let originText = joinTableData[i][j].origin+\": \"+joinTableHeader[j].value+\": \"+joinTableData[i][j].data;\r\n        origin.push(originText);\r\n        tempRow.push({\"data\":data,\"origin\":origin});\r\n      }\r\n      joinTableDataUpdated.push(tempRow);\r\n    }\r\n\r\n    // Take a look at tableData, and joinTableDataUpdated\r\n    // console.log(tableData);\r\n    // console.log(joinTableDataUpdated);\r\n\r\n    // Now we can finally start the join operator\r\n    for (let i = 0; i < tableData.length; ++i) {\r\n      let curJoinEntry = tableData[i][originJoinIndex].data;\r\n      console.log(\"Current entry to join is \"+curJoinEntry);\r\n      let curEntryFound = false;\r\n      // We start the index from 1 because the first column in joinTableData is the header\r\n      for (let j = 0; j < joinTableDataUpdated.length; ++j) {\r\n        if (joinTableDataUpdated[j][joinJoinIndex].data === curJoinEntry) {\r\n          // console.log(\"A match has been found at index \"+j);\r\n          // Let's create the tempRow that we want to push onto tableDataUpdated\r\n\r\n          let tempRow = _.cloneDeep(tableData[i]);\r\n          for (let k = 0; k < joinTableDataUpdated[j].length; ++k) {\r\n            if (k !== joinJoinIndex) {\r\n              tempRow.push(joinTableDataUpdated[j][k]);\r\n            }\r\n          }\r\n          tableDataUpdated.push(tempRow);\r\n          curEntryFound = true;\r\n        }\r\n      }\r\n      // If this current entry does NOT have a corresponding entry in the join table,\r\n      // We push it directly onto tableDataUpdated, with the addtion of some N/A's.\r\n      if (curEntryFound === false) {\r\n        // Let's create the tempRow that we want to push onto tableDataUpdated\r\n\r\n        // Code Placeholder\r\n        let tempRow = _.cloneDeep(tableData[i]);\r\n        for (let k = 0; k < joinTableDataUpdated[0].length; ++k) {\r\n          if (k !== joinJoinIndex) {\r\n            tempRow.push(\r\n              {\r\n                \"data\":\"N/A\",\r\n                \"origin\":[]\r\n              }\r\n            );\r\n          }\r\n        }\r\n        tableDataUpdated.push(tempRow);\r\n      }\r\n    }\r\n    // console.log(tableDataUpdated);\r\n\r\n    // Now, we have correctly got everything we needed: tableDataUpdated, tableHeaderUpdated, optionsMapUpdated, selectedClassAnnotationUpdated\r\n    // Let's add some support for undo, and do not forget to close the joinModal\r\n\r\n    // Bugfix: since this function potentially changes the number of rows too, we need to update firstDegNeighbours and keyColNeighbours\r\n    let promiseArrayOne = this.getNeighbourPromise(tableDataUpdated, \"subject\", this.state.keyColIndex);\r\n    let promiseArrayTwo = this.getNeighbourPromise(tableDataUpdated, \"object\", this.state.keyColIndex);\r\n    allPromiseReady(promiseArrayOne).then((valuesOne) => {\r\n    allPromiseReady(promiseArrayTwo).then((valuesTwo) => {\r\n\r\n      // We call updateNeighbourInfo here because we are changing the rows\r\n      let updatedNeighbours = updateNeighbourInfo(valuesOne, valuesTwo);\r\n      let keyColNeighbours = updatedNeighbours.keyColNeighbours;\r\n      let firstDegNeighbours = updatedNeighbours.firstDegNeighbours;\r\n\r\n      // Support for undo: \r\n      let lastAction = \"runJoin\";\r\n      let prevState = \r\n        {\r\n          \"curActionInfo\":this.state.curActionInfo,\r\n          \"tableData\":this.state.tableData,\r\n          \"tableHeader\":this.state.tableHeader,\r\n          \"keyColNeighbours\":this.state.keyColNeighbours,\r\n          \"firstDegNeighbours\":this.state.firstDegNeighbours,\r\n          \"selectedClassAnnotation\":this.state.selectedClassAnnotation,\r\n          \"previewColIndex\": this.state.previewColIndex,\r\n        };\r\n\r\n      this.setState({\r\n        curActionInfo:{\"task\":\"afterPopulateColumn\"},\r\n        tableData:tableDataUpdated,\r\n        tableHeader:tableHeaderUpdated,\r\n        keyColNeighbours:keyColNeighbours,\r\n        firstDegNeighbours:firstDegNeighbours,\r\n        selectedClassAnnotation:selectedClassAnnotationUpdated,\r\n        showJoinModal: false,\r\n        previewColIndex: -1,\r\n        lastAction:lastAction,\r\n        prevState:prevState,\r\n      })\r\n    })\r\n    })\r\n    })\r\n  }\r\n\r\n  // This function handles the expansion/collapse of an attribute in cell preview and origin\r\n  togglePreviewElement(e, i) {\r\n    let previewInfoExpanded = this.state.previewInfoExpanded.slice();\r\n    previewInfoExpanded[i] = !previewInfoExpanded[i];\r\n    this.setState({\r\n      previewInfoExpanded: previewInfoExpanded,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let bodyEle;\r\n    let bottomContentClass = \" bottom-content\";\r\n    let topContentClass = \"row top-content\";\r\n    if (this.state.pageHidden) {\r\n      bottomContentClass = \" bottom-content-hidden\";\r\n      topContentClass = \"row top-content-large\";\r\n    }\r\n    // If user has not pasted the URL, we want to display the landing page\r\n    if (this.state.urlPasted === \"\") {\r\n      bodyEle = \r\n        <LandingPage \r\n          handleURLPaste={this.handleURLPaste} \r\n        />;\r\n    }\r\n    // Else, we show the three panels: TablePanel, ActionPanel, and PagePanel\r\n    else {\r\n      bodyEle = (\r\n        <div>\r\n          <div className=\"header\">\r\n            <Header \r\n              // Following states are passed for general purposes\r\n              copyTable={this.copyTable}\r\n              undoPreviousStep={this.undoPreviousStep}\r\n              openModal = {this.openModal}\r\n            />\r\n          </div> \r\n          <div className=\"mainbody\">\r\n            <div className=\"\">\r\n              <div className={topContentClass}>\r\n                <div className=\"col-md-7 small-padding table-panel\">\r\n                  <TablePanel\r\n                    urlPasted={this.state.urlPasted}\r\n                    usecaseSelected={this.state.usecaseSelected}\r\n                    // Following states are passed to \"startSubject\"\r\n                    tableHeader={this.state.tableHeader}\r\n                    tableData={this.state.tableData}\r\n                    keyColIndex={this.state.keyColIndex}\r\n                    onCellChange={this.cellChange}\r\n                    selectColHeader={this.selectColHeader}\r\n                    getKeyOptions={this.getKeyOptions}\r\n                    optionsMap={this.state.optionsMap}\r\n                    contextAddColumn={this.contextAddColumn}\r\n                    contextDeleteColumn={this.contextDeleteColumn}\r\n                    contextSetColumn={this.contextSetColumn}\r\n                    originPreviewPage={this.originPreviewPage}\r\n                    showFilterMethods={this.showFilterMethods}\r\n                    // Following states control the render of first column header\r\n                    firstColFilled={this.state.firstColFilled}\r\n                    handlePlusClick={this.handlePlusClick}\r\n                    firstColHeaderInfo={this.state.firstColHeaderInfo}\r\n                    // Following states control the render of other column header\r\n                    getOtherOptions={this.getOtherOptions}\r\n                    // Following states control the render of column preview\r\n                    previewColIndex={this.state.previewColIndex}\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-5 small-padding action-panel\">\r\n                  <ActionPanel\r\n                    urlPasted={this.state.urlPasted}\r\n                    usecaseSelected={this.state.usecaseSelected}\r\n                    curActionInfo={this.state.curActionInfo}\r\n                    handleStartSubject={this.handleStartSubject}\r\n                    populateKeyColumn={this.populateKeyColumn}\r\n                    populateOtherColumn={this.populateOtherColumn}\r\n                    sameNeighbourDiffRow={this.sameNeighbourDiffRow}\r\n                    sameNeighbourOneRow={this.sameNeighbourOneRow}\r\n                    populateRecommendation={this.populateRecommendation}\r\n                    populateStartRecommend={this.populateStartRecommend}\r\n                    // Folloiwng states are passed to \"startTable\"\r\n                    handleStartTable={this.handleStartTable}\r\n                    propertyNeighbours={this.state.propertyNeighbours}\r\n                    togglePropertyNeighbours={this.togglePropertyNeighbours}\r\n                    toggleSibling={this.toggleSibling}\r\n                    toggleOtherTable={this.toggleOtherTable}\r\n                    unionTable={this.unionTable}\r\n                    unionPage={this.unionPage}\r\n                    unionProperty={this.unionProperty}\r\n                    // Follow state handles tab switch\r\n                    tabIndex={this.state.tabIndex}\r\n                    handleTabSwitch={this.handleTabSwitch}\r\n                    // Following states are passed during start up\r\n                    showTableSelection={this.state.showTableSelection}\r\n                    toggleTableSelection={this.toggleTableSelection}\r\n                    originTableArray={this.state.originTableArray}\r\n                    tableOpenList={this.state.tableOpenList}\r\n                    toggleTable={this.toggleTable}\r\n                    selectedTableIndex={this.state.selectedTableIndex}\r\n                    // Following states are for union/join tables\r\n                    showUnionTables={this.state.showUnionTables}\r\n                    showJoinTables={this.state.showJoinTables}\r\n                    toggleUnionJoin={this.toggleUnionJoin}\r\n                    handleJoinTable={this.handleJoinTable}\r\n                    // Following states are for first column's header selection\r\n                    firstColSelection={this.state.firstColSelection}\r\n                    firstColChecked={this.state.firstColChecked}\r\n                    firstColFilled={this.state.firstColFilled}\r\n                    keyColIndex={this.state.keyColIndex}\r\n                    toggleFirstNeighbour={this.toggleFirstNeighbour}\r\n                    tableHeader={this.state.tableHeader}\r\n                    keyCheckedIndex={this.state.keyCheckedIndex}\r\n                    addToFirstCol={this.addToFirstCol}\r\n                    confirmAddFirstCol={this.confirmAddFirstCol}\r\n                    // Following states are for other column's header selection\r\n                    otherColSelection={this.state.otherColSelection}\r\n                    otherColChecked={this.state.otherColChecked}\r\n                    otherCheckedIndex={this.state.otherCheckedIndex}\r\n                    toggleOtherNeighbour={this.toggleOtherNeighbour}\r\n                    // Following states are for column's processing methods\r\n                    contextSortColumn={this.contextSortColumn}\r\n                    contextDedupColumn={this.contextDedupColumn}\r\n                    openFilter={this.openFilter}\r\n                    // Following states are for displaying cell's preview and origin\r\n                    previewInfoArray={this.state.previewInfoArray}\r\n                    previewInfoExpanded={this.state.previewInfoExpanded}\r\n                    selectedCell={this.state.selectedCell}\r\n                    togglePreviewElement={this.togglePreviewElement}\r\n                    // Following states are for showStartRecommend\r\n                    keyColNeighbours={this.state.keyColNeighbours}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className={bottomContentClass}>\r\n                <div>\r\n                  <PagePanel\r\n                    pageHidden={this.state.pageHidden}\r\n                    iframeURL={this.state.iframeURL}\r\n                    toggleWikiPage={this.toggleWikiPage}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <SettingModal \r\n                  showSetting={this.state.showSetting}\r\n                  closeModal={this.closeModal}\r\n                  semanticEnabled={this.state.semanticEnabled}\r\n                  toggleSemantic={this.toggleSemantic}\r\n                  unionCutOff={this.state.unionCutOff}\r\n                  unionCutOffChange={this.unionCutOffChange}\r\n                />\r\n              </div>\r\n              <div>\r\n                <FilterModal\r\n                  showFilter={this.state.showFilter}\r\n                  dataAndChecked={this.state.dataAndChecked}\r\n                  checkAll={this.state.checkAll}\r\n                  applyFilter={this.applyFilter}\r\n                  cancelFilter={this.cancelFilter}\r\n                  toggleChecked={this.toggleChecked}\r\n                  toggleAll={this.toggleAll}\r\n                />\r\n              </div>\r\n              <div>\r\n                <JoinModal \r\n                  showJoin={this.state.showJoinModal}\r\n                  cancelJoin={this.cancelJoin}\r\n                  originColOptions={this.state.originColOptions}\r\n                  joinColOptions={this.state.joinColOptions}\r\n                  originJoinIndex={this.state.originJoinIndex}\r\n                  joinJoinIndex={this.state.joinJoinIndex}\r\n                  selectJoinColumn={this.selectJoinColumn}\r\n                  runJoin={this.runJoin}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"footer\">\r\n            <Footer />\r\n          </div> \r\n        </div>\r\n      );\r\n    }\r\n    return <div>{bodyEle}</div>;\r\n  }\r\n}\r\n\r\nexport default MainBody;\r\n\r\n// This function takes in a queryURL and returns its JSON format\r\nfunction fetchJSON(url) {\r\n  let urlCORS = \"https://mysterious-ridge-15861.herokuapp.com/\"+url;\r\n  return fetch(urlCORS)\r\n        .then(function (response) {\r\n          if (!response.ok) {\r\n            throw Error(1);\r\n          }\r\n          return response;\r\n        })\r\n        .then(function (response) {\r\n          return response.json();\r\n        })\r\n        .catch(function (error) {\r\n          document.body.classList.remove('waiting');\r\n          // alert(\"Some error occured when accessing SPARQL public endpoint. If semantic mapping is enabled, disable it and try again.\");\r\n          return 1;\r\n        })\r\n}\r\n\r\n// This function takes in a queryURL and returns its Text format\r\nfunction fetchText(url) {\r\n  let urlCORS = \"https://mysterious-ridge-15861.herokuapp.com/\"+url;\r\n  return fetch(urlCORS).then((response) => response.text());\r\n}\r\n\r\n// This function ensures that all promises in promiseArray are ready\r\nfunction allPromiseReady(promiseArray) {\r\n  return Promise.all(promiseArray);\r\n}\r\n\r\n// This function replaces string so that the result can be used in queryURL.\r\n// It currently replaces \"(\", \")\", \"'\", \"-\", \" \", \"&\", \".\", \"\"\",and \"/\"\r\nfunction regexReplace(str) {\r\n  return str\r\n    .replace(/\\$/g, \"%5Cu0024\")\r\n    .replace(/%/g, \"%5Cu0025\")\r\n    .replace(/!/g, \"%5Cu0021\")\r\n    .replace(/\"/g, \"%5Cu0022\")\r\n    .replace(/#/g, \"%5Cu0023\")\r\n    .replace(/&/g, \"%5Cu0026\")\r\n    .replace(/'/g, \"%5Cu0027\")\r\n    .replace(/\\(/g, \"%5Cu0028\")\r\n    .replace(/\\)/g, \"%5Cu0029\")\r\n    .replace(/\\*/g, \"%5Cu002A\")\r\n    .replace(/\\+/g, \"%5Cu002B\")\r\n    .replace(/-/g, \"%5Cu002D\")\r\n    .replace(/;/g, \"%5Cu003B\")\r\n    .replace(/</g, \"%5Cu003C\")\r\n    .replace(/=/g, \"%5Cu003D\")\r\n    .replace(/>/g, \"%5Cu003E\")\r\n    .replace(/\\?/g, \"%5Cu003F\")\r\n    .replace(/\\./g, \"%5Cu002E\")\r\n    .replace(/\\//g, \"%5Cu002F\")\r\n    .replace(/,/g, \"%5Cu002C\")\r\n    .replace(/\\s/g, \"_\")\r\n    .replace(/@/g, \"%5Cu0040\")\r\n    .replace(/\\^/g, \"%5Cu005E\")\r\n    .replace(/~/g, \"%5Cu007E\")\r\n    .replace(/`/g, \"%5Cu0060\")\r\n    .replace(/\\|/g, \"%5Cu007C\")\r\n    .replace(/\\[/g, \"%5Cu005B\")\r\n    .replace(/\\\\/g, \"%5Cu005C\")\r\n    .replace(/\\]/g, \"%5Cu005D\")\r\n    .replace(/\\{/g, \"%5Cu007B\")\r\n    .replace(/\\}/g, \"%5Cu007D\");\r\n}\r\n\r\n// This function replaces the URL pasted\r\nfunction urlReplace(str) {\r\n  return str\r\n    .replace(/%E2%80%93/g, \"%5Cu2013\")\r\n    .replace(/\\$/g, \"%5Cu0024\")\r\n    .replace(/!/g, \"%5Cu0021\")\r\n    .replace(/\"/g, \"%5Cu0022\")\r\n    .replace(/#/g, \"%5Cu0023\")\r\n    .replace(/&/g, \"%5Cu0026\")\r\n    .replace(/'/g, \"%5Cu0027\")\r\n    .replace(/\\(/g, \"%5Cu0028\")\r\n    .replace(/\\)/g, \"%5Cu0029\")\r\n    .replace(/\\*/g, \"%5Cu002A\")\r\n    .replace(/\\+/g, \"%5Cu002B\")\r\n    .replace(/-/g, \"%5Cu002D\")\r\n    .replace(/;/g, \"%5Cu003B\")\r\n    .replace(/</g, \"%5Cu003C\")\r\n    .replace(/=/g, \"%5Cu003D\")\r\n    .replace(/>/g, \"%5Cu003E\")\r\n    .replace(/\\?/g, \"%5Cu003F\")\r\n    .replace(/\\./g, \"%5Cu002E\")\r\n    .replace(/\\//g, \"%5Cu002F\")\r\n    .replace(/,/g, \"%5Cu002C\")\r\n    .replace(/\\s/g, \"_\")\r\n    .replace(/@/g, \"%5Cu0040\")\r\n    .replace(/\\^/g, \"%5Cu005E\")\r\n    .replace(/~/g, \"%5Cu007E\")\r\n    .replace(/`/g, \"%5Cu0060\")\r\n    .replace(/\\|/g, \"%5Cu007C\")\r\n    .replace(/\\[/g, \"%5Cu005B\")\r\n    .replace(/\\\\/g, \"%5Cu005C\")\r\n    .replace(/\\]/g, \"%5Cu005D\")\r\n    .replace(/\\{/g, \"%5Cu007B\")\r\n    .replace(/\\}/g, \"%5Cu007D\");\r\n}\r\n\r\n// This function removes the prefix \"http://dbpedia.org/resource/\" from query results, if it includes one\r\n\r\nfunction removePrefix(str) {\r\n  let prefixToRemove = \"http://dbpedia.org/resource/\";\r\n  // If dbResult contains prefix of \"http://dbpedia.org/resource/\", we want to remove it\r\n  if (str.includes(prefixToRemove) === true) {\r\n     str = str.slice(28);\r\n  }\r\n  return str;\r\n}\r\n\r\n// This function updates the key column's neighbours for ONE entry from the search column.\r\n\r\n// It taks three parameters:\r\n//  1) array \"keyColNeighbour\" storing list of neighbours for the key column\r\n//  2) array \"resultsBinding\", storing the returned result of queryURL from Virtuoso\r\n//  3) string \"type\", either \"subject\" or \"object\"\r\n\r\n// It returns the updated keyColNeighbours\r\nfunction updateKeyColNeighbours(keyColNeighbours, resultsBinding, type) {\r\n\r\n  // we first filter out those in resultsBinding according to three criterias\r\n\r\n  // 1) p.value.slice(28).length must > 1\r\n  // 2) p.value must include \"ontology\" or \"property\" (so it is one of dbo:XXXX or dbp:XXXX)\r\n  // 3) p.value must not include certain strings (which likely correspond to meaningless attributes)\r\n\r\n  let processedBinding = resultsBinding.filter(\r\n    a => a.p.value.slice(28).length > 1 &&\r\n         (a.p.value.includes(\"ontology\") || a.p.value.includes(\"property\")) &&\r\n         !(a.p.value.includes(\"wikiPage\") \r\n         || a.p.value.includes(\"align\") \r\n         || a.p.value.includes(\"abstract\") \r\n         || a.p.value.includes(\"caption\") \r\n         || a.p.value.includes(\"image\") \r\n         || a.p.value.includes(\"width\") \r\n         || a.p.value.includes(\"thumbnail\") \r\n         || a.p.value.includes(\"blank\")\r\n         || a.p.value.includes(\"fec\")\r\n         || a.p.value.includes(\"viaf\")\r\n         || a.p.value.includes(\"soundRecording\")\r\n         || a.p.value.includes(\"votesmart\")\r\n         || a.p.value.includes(\"wordnet\")\r\n         || a.p.value.includes(\"float\")\r\n         || a.p.value.includes(\"bbr\")\r\n         || a.p.value === \"http://dbpedia.org/property/alt\"\r\n         || a.p.value === \"http://dbpedia.org/property/by\"\r\n         || a.p.value === \"http://dbpedia.org/property/onlinebooks\"\r\n         || a.p.value === \"http://dbpedia.org/property/signature\"\r\n         || a.p.value === \"http://dbpedia.org/property/video\"\r\n         || a.p.value === \"http://dbpedia.org/property/logo\"\r\n         || a.p.value === \"http://dbpedia.org/property/shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/body\"\r\n         || a.p.value === \"http://dbpedia.org/property/hShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/hBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/aShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/aBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Body\"\r\n         || a.p.value === \"http://dbpedia.org/property/nba\"\r\n         || a.p.value === \"http://dbpedia.org/ontology/termPeriod\"\r\n         )\r\n  );\r\n\r\n  // We then do some filtering based on subPropertyOf.\r\n  // Because of our observation, we only want to keep entries whose subPropertyOf attribute is from the DUL dataset.\r\n  // processedBinding = processedBinding.filter(a => a.subPropertyOf === undefined || a.subPropertyOf.value.includes(\"DUL.owl\"));\r\n  processedBinding = processedBinding.filter(function(a) {\r\n    if (a.subPropertyOf !== undefined) {\r\n      return a.subPropertyOf.value.includes(\"DUL.owl\");\r\n    }\r\n    return true;\r\n  })\r\n\r\n  // we then sort the resultsBinding by p.value.slice(28)\r\n  processedBinding = processedBinding.sort((a, b) =>\r\n    a.p.value.slice(28) > b.p.value.slice(28) ? 1 : -1\r\n  );\r\n\r\n  // we take a look at processedBinding at this stage\r\n  // console.log(processedBinding);\r\n\r\n  // Let's only start the loop is processedBinding is non-empty\r\n  if (processedBinding.length > 0) {\r\n    // We set count of neighbour ready to be added\r\n    let neighbourCount = 1;  \r\n\r\n    // We set literal of neighbour ready to be added.\r\n    // Morever, we get the value of the neighbour ready to be added, depending on type.\r\n    // Initialized with the first neighbour.\r\n\r\n    let neighbourToAdd = processedBinding[0].p.value.slice(28); \r\n    let valuesToAdd = [];\r\n    valuesToAdd.push(type === \"subject\" ? removePrefix(processedBinding[0].o.value) : removePrefix(processedBinding[0].s.value))\r\n\r\n    // we set range of neighbour ready to be added. \"\" if doesn't exist.\r\n    let neighbourRange = processedBinding[0].range !== undefined ? processedBinding[0].range.value : \"\";\r\n\r\n    // we the subPropertyOf of neighbour ready to be added. \"\" if doesn't exist.\r\n    let neighbourSubPropertyOf = processedBinding[0].subPropertyOf !== undefined ? processedBinding[0].subPropertyOf.value : \"\";\r\n    \r\n    // We loop over processedBinding\r\n    for (let i = 1; i < processedBinding.length; ++i) {\r\n      let curNeighbour = processedBinding[i].p.value.slice(28);\r\n      // If the current neighbour is equal to neighbourToAdd, we increment the count, and push onto valuesToAdd\r\n      if (curNeighbour === neighbourToAdd) {\r\n        ++neighbourCount;\r\n        valuesToAdd.push(type === \"subject\" ? removePrefix(processedBinding[i].o.value) : removePrefix(processedBinding[i].s.value))\r\n      }\r\n      // else, we push neighbourToAdd to keyColNeighbours. \r\n      else {\r\n        // set value.\r\n        let objValue = neighbourToAdd;\r\n        // set label. We want to change the neighbour label if type === \"object\".\r\n        let objLabel = neighbourToAdd;\r\n        if (type === \"object\") {\r\n          objLabel = \"is \" + objLabel + \" of\";\r\n        }\r\n        // set type\r\n        let objType = type;\r\n        // set count\r\n        let objCount = neighbourCount;\r\n        // set data. Let's do some processing here: we want to ensure that valuesToAdd has a max length of maxNeighbourCount\r\n        let objData = valuesToAdd.length <= maxNeighbourCount ? valuesToAdd : valuesToAdd.slice(0, maxNeighbourCount);\r\n        // set range\r\n        let objRange = neighbourRange;\r\n        // set subPropertyOf\r\n        let objSubPropertyOf = neighbourSubPropertyOf;\r\n\r\n        // Set object from all its attributes\r\n        let tempObj = {\r\n          \"value\":objValue, \r\n          \"label\":objLabel, \r\n          \"type\":objType, \r\n          \"count\":objCount, \r\n          \"filledCount\":1, \r\n          \"data\":objData,\r\n          \"range\":objRange,\r\n          \"subPropertyOf\":objSubPropertyOf\r\n        };\r\n        // We push this tempObj onto keyColNeighbours\r\n        keyColNeighbours.push(tempObj)\r\n\r\n        // We now need to reset neighbourCount, neighbourToAdd, neighbourRange, neighbourSubPropertyOf, and valuesToAdd\r\n        neighbourCount = 1;\r\n        neighbourToAdd = curNeighbour;\r\n        valuesToAdd = [type === \"subject\" ? removePrefix(processedBinding[i].o.value) : removePrefix(processedBinding[i].s.value)];\r\n        neighbourRange = processedBinding[i].range !== undefined ? processedBinding[i].range.value : \"\";\r\n        neighbourSubPropertyOf = processedBinding[i].subPropertyOf !== undefined ? processedBinding[i].subPropertyOf.value : \"\";\r\n      }\r\n    }\r\n    // Now, after the loop is done, we need to do one more iteration to determine how we want to add the last neighbour.\r\n    \r\n    // set value.\r\n    let objValue = neighbourToAdd;\r\n    // set label. We want to change the neighbour label if type === \"object\".\r\n    let objLabel = neighbourToAdd;\r\n    if (type === \"object\") {\r\n      objLabel = \"is \" + objLabel + \" of\";\r\n    }\r\n    // set type\r\n    let objType = type;\r\n    // set count\r\n    let objCount = neighbourCount;\r\n    // set data. Let's do some processing here: we want to ensure that valuesToAdd has a max length of maxNeighbourCount\r\n    let objData = valuesToAdd.length <= maxNeighbourCount ? valuesToAdd : valuesToAdd.slice(0, maxNeighbourCount);\r\n    // set range\r\n    let objRange = neighbourRange;\r\n    // set subPropertyOf\r\n    let objSubPropertyOf = neighbourSubPropertyOf;\r\n\r\n    // Set object from all its attributes\r\n    let tempObj = {\r\n        \"value\":objValue, \r\n        \"label\":objLabel, \r\n        \"type\":objType, \r\n        \"count\":objCount, \r\n        \"filledCount\":1, \r\n        \"data\":objData,\r\n        \"range\":objRange,\r\n        \"subPropertyOf\":objSubPropertyOf\r\n      };\r\n    // we push this tempObj onto keyColNeighbours\r\n    keyColNeighbours.push(tempObj)\r\n  }\r\n\r\n  // console.log(keyColNeighbours);\r\n  // console.log(processedBinding);\r\n\r\n  return keyColNeighbours;\r\n}\r\n\r\n// This helper function is designed to process the result bindings passed from contextCellPreview.\r\n// It should share some similarity with updateKeyColNeighbours\r\n\r\n// It takes two parameters:\r\n//  1) array \"resultsBinding\", storing the returned result of queryURL from Virtuoso\r\n//  2) string \"type\", either \"subject\" or \"object\"\r\n\r\n// It returns previewInfoArray, a list of objects used to display a cell's preview info\r\n// This object has two properties:\r\n// 1) key: a string\r\n// 2) value: an array of strings\r\nfunction updatePreviewInfo(resultsBinding, type) {\r\n  // console.log(previewInfoArray);\r\n  // console.log(resultsBinding);\r\n  // console.log(type);\r\n\r\n  // Let's do some preprocessing of resultsBinding. We want to do sorting, deduping, and some filtering.\r\n\r\n  // we first filter out those in resultsBinding according to three criterias\r\n\r\n  // 1) p.value.slice(28).length must > 1\r\n  // 2) p.value must include \"ontology\" or \"property\" (so it is one of dbo:XXXX or dbp:XXXX)\r\n  // 3) p.value must not include certain strings (which likely correspond to meaningless attributes)\r\n\r\n  let processedBinding = resultsBinding.filter(\r\n    a => a.p.value.slice(28).length > 1 &&\r\n         (a.p.value.includes(\"ontology\") || a.p.value.includes(\"property\")) &&\r\n         !(a.p.value.includes(\"wikiPage\") \r\n         || a.p.value.includes(\"align\") \r\n         || a.p.value.includes(\"abstract\") \r\n         || a.p.value.includes(\"caption\") \r\n         || a.p.value.includes(\"image\") \r\n         || a.p.value.includes(\"width\") \r\n         || a.p.value.includes(\"thumbnail\") \r\n         || a.p.value.includes(\"blank\")\r\n         || a.p.value.includes(\"fec\")\r\n         || a.p.value.includes(\"viaf\")\r\n         || a.p.value.includes(\"soundRecording\")\r\n         || a.p.value.includes(\"votesmart\")\r\n         || a.p.value.includes(\"wordnet\")\r\n         || a.p.value.includes(\"float\")\r\n         || a.p.value.includes(\"bbr\")\r\n         || a.p.value === \"http://dbpedia.org/property/alt\"\r\n         || a.p.value === \"http://dbpedia.org/property/by\"\r\n         || a.p.value === \"http://dbpedia.org/property/onlinebooks\"\r\n         || a.p.value === \"http://dbpedia.org/property/signature\"\r\n         || a.p.value === \"http://dbpedia.org/property/video\"\r\n         || a.p.value === \"http://dbpedia.org/property/logo\"\r\n         || a.p.value === \"http://dbpedia.org/property/shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/body\"\r\n         || a.p.value === \"http://dbpedia.org/property/hShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/hBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/aShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/aBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Body\"\r\n         || a.p.value === \"http://dbpedia.org/property/nba\"\r\n         || a.p.value === \"http://dbpedia.org/ontology/termPeriod\"\r\n         )\r\n  );\r\n\r\n\r\n  // we then sort the resultsBinding by p.value.slice(28)\r\n  processedBinding = processedBinding.sort((a, b) =>\r\n    a.p.value.slice(28) > b.p.value.slice(28) ? 1 : -1\r\n  );\r\n\r\n  // Now let's create the previewInfoArray based on processedBinding\r\n  // console.log(processedBinding);\r\n\r\n  let previewInfoArray = [];\r\n\r\n  if (processedBinding.length > 1) {\r\n    // We first push on the first element from processedBinding\r\n\r\n    previewInfoArray.push(\r\n      {\r\n        \"key\": type === \"subject\" ? processedBinding[0].p.value.slice(28) : \"is \"+processedBinding[0].p.value.slice(28)+\" of\",\r\n        \"value\": [removePrefix(processedBinding[0].value.value)],\r\n      }\r\n    )\r\n    let curIndex = 0;\r\n    for (let i = 1; i < processedBinding.length; ++i) {\r\n      let curNeighbour = processedBinding[i].p.value.slice(28);\r\n      let prevNeighbour = processedBinding[i-1].p.value.slice(28);\r\n      // console.log(curNeighbour);\r\n      // console.log(prevNeighbour);\r\n\r\n      // If this neighbour is the same as the previous one, we want to append this neighbour's value\r\n      // to the element's value array in previewInfoArray at curIndex\r\n      if (curNeighbour === prevNeighbour) {\r\n        // Note, we dont want each element in previewInfoArray to contain too many elements (5), so we do a check here.\r\n        if (previewInfoArray[curIndex].value.length < maxNeighbourCount) {\r\n          previewInfoArray[curIndex].value.push(removePrefix(processedBinding[i].value.value));\r\n        }\r\n      }\r\n      // Else, we push a fresh element onto previewInforArray, and update curIndex\r\n      else {\r\n        previewInfoArray.push(\r\n          {\r\n            \"key\": type === \"subject\" ? processedBinding[i].p.value.slice(28) : \"is \"+processedBinding[i].p.value.slice(28)+\" of\",\r\n            \"value\":[removePrefix(processedBinding[i].value.value)],\r\n          }\r\n        )\r\n        ++curIndex;\r\n      }\r\n    }\r\n  }\r\n\r\n  // At the current stage, previewInfoArray contains all the dbo and dbp neighbours. \r\n  // Let's also add support for the DB categories, so that those can be displayed in cell preview as well.\r\n  let categoryPreviewInfoArray = [];\r\n  if (type === \"subject\") {\r\n    let categoryBinding = resultsBinding.filter(\r\n      a => a.p.value.includes(\"dc/terms/subject\")\r\n    ) \r\n    // console.log(categoryBinding);\r\n    if (categoryBinding.length > 0) {\r\n      categoryPreviewInfoArray.push(\r\n        {\r\n          \"key\": \"Category\",\r\n          \"value\": [categoryBinding[0].value.value.slice(37)]\r\n        }\r\n      );\r\n      for (let i = 1; i < categoryBinding.length; ++i) {\r\n        categoryPreviewInfoArray[0].value.push(categoryBinding[i].value.value.slice(37));\r\n      }\r\n    }\r\n  }\r\n  // We concat categoryPreviewInfoArray with previewInfoArray.\r\n  previewInfoArray = categoryPreviewInfoArray.concat(previewInfoArray);\r\n  // console.log(previewInfoArray);\r\n\r\n  return previewInfoArray;\r\n}\r\n\r\n// This function processes the resultsBinding passed from handleStartSubject, to create the info needed for Action Panel.\r\n// It should share some similarity with updatePreviewInfo\r\n\r\n// It takes one parameter:\r\n// 1) array \"resultsBinding\", storing the returned result of queryURL from Virtuoso\r\n// Note: \"type\" parameter is not needed, since we are not dealing with object neighbours\r\n\r\nfunction updateFirstColSelection(resultsBinding) {\r\n\r\n  // we first filter out those in resultsBinding according to three criterias\r\n  // Note: the second criteria is a bit different from updateKeyColNeighbours and updatePreviewInfo\r\n\r\n  // 1) p.value.slice(28).length must > 1\r\n  // 2) p.value must include \"ontology\", \"property\", or \"dc/terms/subject\" (so it is one of dbo:XXXX, dbp:XXXX, or dct:subject)\r\n  // 3) p.value must not include certain strings (which likely correspond to meaningless attributes)\r\n\r\n  let processedBinding = resultsBinding.filter(\r\n    a => a.p.value.slice(28).length > 1 \r\n         &&\r\n         (a.p.value.includes(\"ontology\") \r\n         || a.p.value.includes(\"property\")\r\n         || a.p.value.includes(\"dc/terms/subject\")\r\n         ) \r\n         &&\r\n         !(a.p.value.includes(\"wikiPage\") \r\n         || a.p.value.includes(\"align\") \r\n         || a.p.value.includes(\"abstract\") \r\n         || a.p.value.includes(\"caption\") \r\n         || a.p.value.includes(\"image\") \r\n         || a.p.value.includes(\"width\") \r\n         || a.p.value.includes(\"thumbnail\") \r\n         || a.p.value.includes(\"blank\")\r\n         || a.p.value.includes(\"fec\")\r\n         || a.p.value.includes(\"viaf\")\r\n         || a.p.value.includes(\"soundRecording\")\r\n         || a.p.value.includes(\"votesmart\")\r\n         || a.p.value.includes(\"wordnet\")\r\n         || a.p.value.includes(\"float\")\r\n         || a.p.value.includes(\"bbr\")\r\n         || a.p.value === \"http://dbpedia.org/property/alt\"\r\n         || a.p.value === \"http://dbpedia.org/property/by\"\r\n         || a.p.value === \"http://dbpedia.org/property/onlinebooks\"\r\n         || a.p.value === \"http://dbpedia.org/property/signature\"\r\n         || a.p.value === \"http://dbpedia.org/property/video\"\r\n         || a.p.value === \"http://dbpedia.org/property/logo\"\r\n         || a.p.value === \"http://dbpedia.org/property/shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/patternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/body\"\r\n         || a.p.value === \"http://dbpedia.org/property/hShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/hPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/hBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/aShorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/aPatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/aBody\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Shorts\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternS\"\r\n         || a.p.value === \"http://dbpedia.org/property/3PatternB\"\r\n         || a.p.value === \"http://dbpedia.org/property/3Body\"\r\n         || a.p.value === \"http://dbpedia.org/property/nba\"\r\n         || a.p.value === \"http://dbpedia.org/ontology/termPeriod\"\r\n         )\r\n  );\r\n  \r\n  // We then sort the processedBinding by some criterias.\r\n\r\n  // First Criteria: dct:subjects should show up at the top of the list, sorted by o.value.slice(37).\r\n\r\n  // Since a customized sort is a bit hard to write, let's break this array into two, sort each one, then concat them back together\r\n  let dctArray = [];\r\n  let dbopArray = [];\r\n  for (let i = 0; i < processedBinding.length; ++i) {\r\n    if (processedBinding[i].p.value === \"http://purl.org/dc/terms/subject\") {\r\n      dctArray.push(processedBinding[i]);\r\n    }\r\n    else {\r\n      dbopArray.push(processedBinding[i]);\r\n    }\r\n  }\r\n\r\n  // We first sort the dctArray by o.value.slice(37).\r\n\r\n  dctArray.sort((a, b) => (a.o.value.slice(37) < b.o.value.slice(37) ? -1 : 1));\r\n\r\n  // We then sort dbop array by the following rules:\r\n  // Those that are dbr (so without a datatype) shows up higher\r\n  // Then those with a smaller count shows up higher\r\n  // Then alphabetical order.\r\n\r\n  // The following code gets the count for each property(or neighbour)\r\n  dbopArray.sort((a, b) => (a.p.value.slice(28) < b.p.value.slice(28) ? -1 : 1));\r\n  if (dbopArray.length > 0) {\r\n    dbopArray[0].p.count = getPCount(dbopArray[0].p.value, dbopArray);\r\n  }\r\n  for (let i = 1; i < dbopArray.length; ++i) {\r\n    let prevNeighbour = dbopArray[i-1];\r\n    let curNeighbour = dbopArray[i];\r\n    if (prevNeighbour.p.value === curNeighbour.p.value) {\r\n      curNeighbour.p.count = prevNeighbour.p.count;\r\n    }\r\n    else {\r\n      curNeighbour.p.count = getPCount(dbopArray[i].p.value, dbopArray);\r\n    }\r\n  }\r\n\r\n  // The following code sorts the array\r\n  dbopArray.sort(function (a, b) {\r\n    if (a.o.datatype === undefined && b.o.datatype !== undefined) {\r\n      return -1;\r\n    }\r\n    else if (b.o.datatype === undefined && a.o.datatype !== undefined) {\r\n      return 1;\r\n    }\r\n    else {\r\n      if (a.p.count === b.p.count) {\r\n        return a.p.value.slice(28) < b.p.value.slice(28) ? -1 : 1;\r\n      }\r\n      else {\r\n        return a.p.count < b.p.count ? -1 : 1;\r\n      }\r\n    }\r\n  });\r\n  // console.log(dbopArray);\r\n\r\n  // At this stage, we have finished sorting both dctArray and dbopArray. Let's put them back together.\r\n  processedBinding = dctArray.concat(dbopArray);\r\n\r\n  // console.log(processedBinding);\r\n\r\n  // Now we need to loop over the processedBinding, and create an array of objects. \r\n  // This array should have length equal to processedBinding.length.\r\n  // Each object should have 6 attributes.\r\n  // 1) pValue: value of predicate\r\n  // 2) pDataset: which dataset does this predicate belong to (one of dbo, dbp, and dct)\r\n  // 3) oValue: value of object\r\n  // 4) oType: datatype of object, such as \"http://www.w3.org/2001/XMLSchema#date\". This can be empty.\r\n\r\n  // 5) value: same as pValue: historical code\r\n  // 6) label: same as pValue: historical code\r\n\r\n  let firstColSelection = [];\r\n\r\n  for (let i = 0; i < processedBinding.length; ++i) {\r\n    // First case: current neighbour is from dct:subject\r\n    if (processedBinding[i].p.value === \"http://purl.org/dc/terms/subject\") {\r\n      firstColSelection.push(\r\n        {\r\n          \"pValue\":\"category\",\r\n          \"pDataset\":\"dct\",\r\n          \"oValue\":processedBinding[i].o.value.slice(37),\r\n          \"oType\":\"\",\r\n          \"value\":\"category\",\r\n          \"label\":processedBinding[i].o.value.slice(37),\r\n        }\r\n      )\r\n    }\r\n    // Second case: current neighbour is from dbo or dbp\r\n    else {\r\n      firstColSelection.push(\r\n        {\r\n          \"pValue\":processedBinding[i].p.value.slice(28),\r\n          \"pDataset\":processedBinding[i].p.value.includes(\"property\") ? \"dbp\" : \"dbo\",\r\n          \"oValue\":removePrefix(processedBinding[i].o.value),\r\n          \"oType\":processedBinding[i].o.datatype === undefined ? \"\" : processedBinding[i].o.datatype,\r\n          \"value\":processedBinding[i].p.value.slice(28),\r\n          \"label\":processedBinding[i].p.value.slice(28)+\":\"+removePrefix(processedBinding[i].o.value),\r\n        }\r\n      )\r\n    }\r\n  }\r\n  return firstColSelection;\r\n}\r\n\r\n\r\n// This function takes in the clean data for the first table, clean data for the second table, and colMapping between these two tables\r\n// And returns the unioned clean data for the first table\r\n\r\nfunction tableConcat(tableData, otherTableData, tempMapping) {\r\n  // We want to correctly modify tableDataExplore, based on colMapping.\r\n  // If colMapping is null for some column, we want to set the data as \"N/A\"\r\n  // console.log(tableDataExplore);\r\n\r\n  // We first make some small modifications to colMapping, as we have inserted a new column into otherTableData and tableDataExplore\r\n  for (let j = 0; j < tempMapping.length; ++j) {\r\n    if (tempMapping[j] !== \"null\") {\r\n      tempMapping[j]++;\r\n    }\r\n  }\r\n  tempMapping.splice(0, 0, 0); // insert element 0 at the first position of colMapping, deleting 0 elements\r\n\r\n  // Now we insert the data into dataToAdd. dataToAdd will be concatenated with tableDataExplore\r\n  let dataToAdd = [];\r\n  for (let i = 0; i < otherTableData.length; ++i) {\r\n    let tempRow = [];\r\n    for (let j = 0; j < tempMapping.length; ++j) {\r\n      let colInNew = tempMapping[j];\r\n      if (colInNew !== \"null\") {\r\n        tempRow.push(otherTableData[i][colInNew]);\r\n      } else {\r\n        tempRow.push({ data: \"N/A\" });\r\n      }\r\n    }\r\n    dataToAdd.push(tempRow);\r\n  }\r\n  return tableData.concat(dataToAdd);\r\n}\r\n\r\nfunction HTMLCleanCell(str) {\r\n  // Note that this function also removes leading and trailing whitespaces\r\n  if (str[str.length - 1] === \"\\n\") {\r\n    return str.slice(0, -1).trim().split(\"[\")[0];\r\n  } else {\r\n    return str.trim().split(\"[\")[0];\r\n  }\r\n}\r\n\r\n// This function returns an array of table objects that are unionable with the selected table.\r\n\r\n// It taks two parameters:\r\n//  1) HTML \"tableHTML\" storing the HTML of the selected table\r\n//  2) HTML \"pageHTML\", storing the HTML of a sibling page\r\n\r\n// Table object has four attributes: isOpen, data, unionScore, colMapping\r\n\r\n// Once semantic mapping feature is added, the colMapping will be updated\r\n\r\nfunction findTableFromHTML(\r\n  tableHeader,\r\n  pageHTML,\r\n  selectedClassAnnotation,\r\n  semanticEnabled,\r\n  unionCutOff,\r\n  pageName\r\n) {\r\n  // We first get the column names of the table in the table panel, using this.state.tableHeader.\r\n  // Note: the index starts from 1 because we don't care about the originURL column (column 0). ***\r\n  let originCols = [];\r\n  // BUGFIX needs to be applied here. (Seems to be fixed)\r\n  // console.log(tableHeader);\r\n  for (let j = 1; j < tableHeader.length; ++j) {\r\n    let curValue = \"\"\r\n    for (let k = 0; k < tableHeader[j].length; ++k) {\r\n      curValue+=tableHeader[j][k].value;\r\n    }\r\n    originCols.push(curValue);\r\n  }\r\n\r\n  // We now fetch all the tables from pageHTML (the current sibling page)\r\n  let doc = new DOMParser().parseFromString(pageHTML, \"text/html\");\r\n  let wikiTablesFound = doc.getElementsByClassName(\"wikitable\");\r\n  let tablesFound = [];\r\n  for (let i = 0; i < wikiTablesFound.length; ++i) {\r\n    if (wikiTablesFound[i].tagName !== \"TH\") {\r\n      tablesFound.push(wikiTablesFound[i]);\r\n    }\r\n  }\r\n\r\n  // console.log(tablesFound);\r\n\r\n  // This is the array we will return.\r\n  let tableArray = [];\r\n\r\n  // We now loop through all the tables found on this sibling page, and see if they are unionable with the selected table\r\n  let tablePromise = [];\r\n  for (let i = 0; i < tablesFound.length; ++i) {\r\n    tablePromise.push(\r\n      findTableFromTable(\r\n        tablesFound[i],\r\n        originCols,\r\n        selectedClassAnnotation,\r\n        semanticEnabled,\r\n        unionCutOff,\r\n        pageName\r\n      )\r\n    );\r\n  }\r\n\r\n  return allPromiseReady(tablePromise).then((values) => {\r\n    for (let i = 0; i < values.length; ++i) {\r\n      tableArray.push(values[i]);\r\n    }\r\n    // we filter the tableArray here by removing those tables that do not have a high enough unionScore\r\n    // Note: In the unfiltered table array, we are using -1 to represent tables with a low unionScore\r\n    tableArray = tableArray.filter(function (x) {\r\n      return x !== -1;\r\n    });\r\n    // console.log(tableArray);\r\n    // We sort the tableArray here by unionScore\r\n    tableArray.sort((a, b) => (a.unionScore < b.unionScore ? 1 : -1));\r\n    return Promise.resolve(tableArray);\r\n  });\r\n}\r\n\r\n// This function takes in four parameters:\r\n\r\n// 1) a tableHTML\r\n// 2) originCols (denoting the columns names of the selected table)\r\n// 3) class annotation of the selected table\r\n// 4) whether semantic mapping is enabled or not\r\n\r\n// and return a table Object with properties: isOpen, unionScore, colMapping, and data\r\nfunction findTableFromTable(\r\n  tableHTML,\r\n  originCols,\r\n  selectedClassAnnotation,\r\n  semanticEnabled,\r\n  unionCutOff,\r\n  pageName\r\n) {\r\n  // Define some constants\r\n  const ontologySize = 780;\r\n  const matchCutOff = 0.999;\r\n\r\n  // We first fetch the cleaned column names of the current table\r\n  let curHeaderCells = tableHTML.rows[0].cells;\r\n  let newCols = []; // stores the cleaned column names of the this table. Let's consider using this value for display as well.\r\n  let remainCols = []; // stores an array of the indices of the columns of the current table that are not yet mapped\r\n  let searchCols = []; // stores an array of the indices of the columns from the selected table that are not yet mapped\r\n\r\n  // We potentially need to resort to semantic mapping. So let's create a promiseArray.\r\n  // This promiseArray will only contain one element\r\n  let promiseArray = [];\r\n\r\n  for (let j = 0; j < curHeaderCells.length; ++j) {\r\n    let headerName = HTMLCleanCell(curHeaderCells[j].innerText);\r\n    newCols.push(headerName);\r\n    remainCols.push(j);\r\n  }\r\n\r\n  // we want to make sure that newTable has more than half of the columns of the selectedTable\r\n  // because we require a >50% unionScore\r\n  // If it does not, we ignore this table automatically\r\n\r\n  if (newCols.length >= originCols.length * unionCutOff) {\r\n    // We use the proposed algo here.\r\n    // First we set the union score and column Mapping\r\n    let unionScore = 0;\r\n    let colMapping = [];\r\n    // We loop through the column headers in originCol, and see if they exist in newCols.\r\n    for (let k = 0; k < originCols.length; ++k) {\r\n      let curIndex = newCols.indexOf(originCols[k]);\r\n      if (curIndex !== -1) {\r\n        // This means the new table also contains column k from the selected table\r\n        // Thus we have found a mapping. We push it onto colMapping.\r\n        colMapping.push(curIndex);\r\n        unionScore += 1 / originCols.length;\r\n      } else {\r\n        colMapping.push(\"null\");\r\n      }\r\n    }\r\n    // In here we do a bit of string matching\r\n    // Chances are: tables from sibling pages with the same number of columns as the selected table, with structual invariability,\r\n    // is likely to be the \"same\" table as the selected on, we give it a chance for string matching\r\n    if (newCols.length === originCols.length) {\r\n      let sameStructure = true;\r\n      for (let i = 0; i < colMapping.length; ++i) {\r\n        if (colMapping[i] !== \"null\" && colMapping[i] !== i) {\r\n          sameStructure = false;\r\n          break;\r\n        }\r\n      }\r\n      if (sameStructure === true) {\r\n        for (let i = 0; i < colMapping.length; ++i) {\r\n          if (colMapping[i] === \"null\") {\r\n            if (\r\n              newCols[i].includes(originCols[i]) ||\r\n              originCols[i].includes(newCols[i])\r\n            ) {\r\n              colMapping[i] = i;\r\n              unionScore += 1 / originCols.length;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // console.log(colMapping);\r\n      // If unionScore is 1, and newCols.length is equal to originCols.length, we want to reward it with 0.01 unionScore\r\n      // This helps us to rank the tables with the exact same column headers a bit higher\r\n      if (unionScore === 1) {\r\n        unionScore += 0.01;\r\n      }\r\n    }\r\n\r\n    // We proceed differently based on whether semantic mapping is enabled or not\r\n\r\n    // Case 1: semantic mapping is enabled\r\n\r\n    if (semanticEnabled === \"enabled\") {\r\n      // If we are not finding a perfect match, we want to do use semantic mapping here to see if it's possible to map the unmapped columns\r\n      // Note: this part is expected to take quite some time. Now it's implemented just for testing purposes\r\n      if (unionScore < 0.999) {\r\n        // We want to remove from remainCols the columns that are already mapped\r\n        // The remaining will be the columns that we can still use from the current table\r\n        remainCols = remainCols.filter(function (x) {\r\n          return colMapping.indexOf(x) < 0;\r\n        });\r\n        for (let i = 0; i < colMapping.length; ++i) {\r\n          if (colMapping[i] === \"null\") {\r\n            searchCols.push(i);\r\n          }\r\n        }\r\n        // if (newCols[1] === \"Scorer\") {\r\n        // console.log(\"We still need to find these columns from the original table: \"+searchCols);\r\n        // console.log(\"These columns are still available for use: \"+remainCols);\r\n        // console.log(\"The current column mappings are \"+colMapping);\r\n        // console.log(\"Here are the class annotations of the search columns: \")\r\n        // for (let i=0;i<searchCols.length;++i) {\r\n        //   console.log(selectedClassAnnotation[searchCols[i]]);\r\n        // }\r\n        // }\r\n\r\n        // Now, searchCols stores the columns from the selected table that have not been mapped yet\r\n        // and remainCols stores the columns from the current table that can still be used for mapping\r\n        // Let's ask a query to find the class annotations for the remainCols\r\n        // if (remainCols.length > 0) {\r\n        promiseArray.push(findClassAnnotation(tableHTML, remainCols, pageName));\r\n        // }\r\n      }\r\n\r\n      // Because the return statement is here, it may be possible that we are pushing nothing onto the promiseArray!!!\r\n      // There is no need to worry about it.\r\n      return allPromiseReady(promiseArray).then((values) => {\r\n        // First, if we are in the perfect match case, we want to retrun straight away\r\n        if (unionScore >= 0.999) {\r\n          return Promise.resolve({\r\n            isOpen: false,\r\n            unionScore: unionScore,\r\n            colMapping: colMapping,\r\n            data: tableHTML,\r\n            title: newCols,\r\n          });\r\n        }\r\n        // Else, we want to look for semantic mapping opportunities\r\n        else {\r\n          // create a copy of values\r\n\r\n          // Note!!!! Sometimes the tableHTML only has one row, so values[0] would have a length of zero, in which case our algo breaks down\r\n          // Let's prevent it from happening\r\n          let remainClassAnnotation = values[0].slice();\r\n          if (remainClassAnnotation.length > 0) {\r\n            // let remainColsCopy = remainCols.slice();\r\n            // let remainClassAnnotationCopy = remainClassAnnotation.slice();\r\n            for (let i = 0; i < searchCols.length; ++i) {\r\n              let curSearchIndex = searchCols[i];\r\n              // console.log(curSearchIndex);\r\n              // console.log(selectedClassAnnotation[curSearchIndex]);\r\n\r\n              // If the class annotation for this column is empty, we skip it because there's no hope for semantic match.\r\n              // Otherwise we can work with it\r\n              if (selectedClassAnnotation[curSearchIndex].length > 0) {\r\n                // console.log(\"Current column being searched has index: \"+curSearchIndex);\r\n                // console.log(selectedClassAnnotation[curSearchIndex]);\r\n\r\n                // we loop through the remain cols and check their class annotations\r\n                for (let j = 0; j < remainCols.length; ++j) {\r\n                  // Let make sure this column does have a class annotation. Otherwise we skip it\r\n                  // console.log(remainClassAnnotation[j]);\r\n                  // Note: sometimes remainClassAnnotation[j] is undefined, which causes an error\r\n                  // if (remainClassAnnotation[j] === undefined) {\r\n                  //   console.log(\"This case is causing an error\");\r\n                  //   console.log(\"Remain cols are \"+remainCols);\r\n                  //   console.log(\"Remain class annotations are \"+remainClassAnnotation);\r\n                  //   console.log(\"Original remain cols are \"+remainColsCopy);\r\n                  //   console.log(\"original remain class annotations are \"+remainClassAnnotationCopy);\r\n                  //   console.log(\"Table HTML is \");\r\n                  //   console.log(tableHTML);\r\n                  //   console.log(values[0]);\r\n                  // }\r\n                  if (remainClassAnnotation[j].length > 0) {\r\n                    // console.log(\"Remain column index is \"+remainCols[j]);\r\n                    // console.log(\"Its class annotation is \"+remainClassAnnotation[j]);\r\n                    // Let make special cases when the any of search column class and current column class is [Number]\r\n                    // If they are both [Number], we will give it a match\r\n                    // Else it's not a match\r\n                    if (\r\n                      selectedClassAnnotation[curSearchIndex][0] === \"Number\" ||\r\n                      remainClassAnnotation[j][0] === \"Number\"\r\n                    ) {\r\n                      // This case we have a match\r\n                      if (\r\n                        selectedClassAnnotation[curSearchIndex][0] ===\r\n                        remainClassAnnotation[j][0]\r\n                      ) {\r\n                        // We need to update the colMapping and unionScore\r\n                        colMapping[curSearchIndex] = remainCols[j];\r\n                        unionScore += 1 / originCols.length;\r\n                        // we also need to remove this column from remainClassAnnotation and remainCols because we cannot use it anymore\r\n                        remainCols.splice(j, 1);\r\n                        remainClassAnnotation.splice(j, 1);\r\n                        // Also, since we are removing element from remainCols array and remainClassAnnotation array, we need to decrement\r\n                        // j to go back to the correct posiition\r\n                        --j;\r\n                        // Also we need to call break to prevent further looping: we are done with this search column\r\n                        break;\r\n                      }\r\n                      // Else there is no match. We simply ignore it.\r\n                    }\r\n                    // If neither of them is [Number], we need to use the test statistic\r\n                    else {\r\n                      // Let's first find the array intersection of selectedClassAnnotation[curSearchIndex] and remainClassAnnotation[j]\r\n                      let intersection = selectedClassAnnotation[\r\n                        curSearchIndex\r\n                      ].filter(function (x) {\r\n                        return remainClassAnnotation[j].indexOf(x) >= 0;\r\n                      });\r\n                      // console.log(\"Intersection is \"+intersection);\r\n                      // We only want to consider two column unionable if they at least have some intersections.\r\n                      if (intersection.length > 0) {\r\n                        let totalSuccess =\r\n                          selectedClassAnnotation[curSearchIndex].length;\r\n                        let numTrial = remainClassAnnotation[j].length;\r\n                        let numSuccess = intersection.length;\r\n                        let testStat = hyperCDF(\r\n                          numSuccess,\r\n                          ontologySize,\r\n                          totalSuccess,\r\n                          numTrial\r\n                        );\r\n                        // If testStat is larger than matchCutOff, we consider it a match\r\n                        if (testStat > matchCutOff) {\r\n                          // We need to update the colMapping and unionScore\r\n                          colMapping[curSearchIndex] = remainCols[j];\r\n                          unionScore += 1 / originCols.length;\r\n                          // we also need to remove this column from remainClassAnnotation and remainCols because we cannot use it anymore\r\n                          remainCols.splice(j, 1);\r\n                          remainClassAnnotation.splice(j, 1);\r\n                          // Also, since we are removing element from remainCols array and remainClassAnnotation array, we need to decrement\r\n                          // j to go back to the correct posiition\r\n                          --j;\r\n                          // Also we need to call break to prevent further looping: we are done with this search column\r\n                          break;\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          // console.log(\"Remain columns are \"+)\r\n          // console.log(\"Here is table HTML\");\r\n          // console.log(tableHTML);\r\n          // console.log(\"Here are the class annotations for columns that still need mapping\");\r\n          // for (let i=0;i<searchCols.length;++i) {\r\n          //   console.log(selectedClassAnnotation[searchCols[i]]);\r\n          // }\r\n          // console.log(\"The remain columns are \"+remainCols);\r\n          // console.log(\"Here are the class annotations for the remaining columns\");\r\n          // console.log(values);\r\n          // console.log(\"This is column mapping \"+colMapping);\r\n          // console.log(\"Union score is \"+unionScore);\r\n\r\n          // We need to loop through the searchCols\r\n\r\n          // We push on tables with unionScore > unionCutOff\r\n          if (unionScore >= unionCutOff) {\r\n            // console.log(\"This table is unionable!\");\r\n            // console.log(\"Table is \"+tableHTML);\r\n            // console.log(\"Union Score is \"+unionScore);\r\n            // console.log(\"Column mapping is \"+colMapping);\r\n            // tableArray.push({\"isOpen\":false,\"unionScore\":unionScore,\"colMapping\":colMapping,\"data\":tablesFound[i]});\r\n            // console.log(colMapping);\r\n            return Promise.resolve({\r\n              isOpen: false,\r\n              unionScore: unionScore,\r\n              colMapping: colMapping,\r\n              data: tableHTML,\r\n              title: newCols,\r\n            });\r\n          } else {\r\n            return Promise.resolve(-1);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // Case 2: semantic mapping is disabled.\r\n    // In this case we check if the unionScore is high enough directly, without going through the semantic mapping process\r\n    else {\r\n      // We push on tables with unionScore > unionCutOff\r\n      if (unionScore >= unionCutOff) {\r\n        // console.log(\"This table is unionable!\");\r\n        // console.log(\"Table is \"+tableHTML);\r\n        // console.log(\"Union Score is \"+unionScore);\r\n        // console.log(\"Column mapping is \"+colMapping);\r\n        // tableArray.push({\"isOpen\":false,\"unionScore\":unionScore,\"colMapping\":colMapping,\"data\":tablesFound[i]});\r\n        // console.log(colMapping);\r\n        return Promise.resolve({\r\n          isOpen: false,\r\n          unionScore: unionScore,\r\n          colMapping: colMapping,\r\n          data: tableHTML,\r\n          title: newCols,\r\n        });\r\n      } else {\r\n        return Promise.resolve(-1);\r\n      }\r\n    }\r\n  }\r\n  // This else clause means that this table does not even have enough number of columns.\r\n  // So we know right away it cannot be a match. So we return -1 (failure)\r\n  else {\r\n    return Promise.resolve(-1);\r\n  }\r\n}\r\n\r\n// This function takes in the HTML of a table, and returns a Promise that resolves to the class annotation for all the columns of the table\r\nfunction findClassAnnotation(tableHTML, remainCols, pageName) {\r\n  // console.log(\"Page Name is: \"+pageName);\r\n  // console.log(\"Table HTML is: \");\r\n  // console.log(tableHTML);\r\n  // console.log(remainCols);\r\n  let selectedTable = tableHTML;\r\n  let tempTable = [];\r\n\r\n  // We first fetch the plain, unprocessed version of the table.\r\n  // Note: this function potentially needs to be modified.\r\n  // Instead of using innerText for cell data, if its href exists, we should use its href instead\r\n  for (let i = 0; i < selectedTable.rows.length; ++i) {\r\n    let tempRow = [];\r\n    for (let j = 0; j < selectedTable.rows[i].cells.length; ++j) {\r\n      let curCellText = HTMLCleanCell(selectedTable.rows[i].cells[j].innerText);\r\n\r\n      // Note: We want to use the href as data for the first column (if such href exists) instead of its innerText.\r\n      if (i === 1) {\r\n        // We get all the links from this current cell (there may be more than one)\r\n        let anchorArray = selectedTable.rows[i].cells[j].getElementsByTagName(\r\n          \"a\"\r\n        );\r\n        // we want to use the first valid link as the search element for this cell\r\n        // Definition of being valid: its associated innerText is not empty (thus not the link of a picture)\r\n        //                            and it is not a citation (so [0] is not \"[\")\r\n        for (let k = 0; k < anchorArray.length; ++k) {\r\n          if (\r\n            anchorArray[k].innerText !== \"\" &&\r\n            anchorArray[k].innerText[0] !== \"[\"\r\n          ) {\r\n            let hrefArray = anchorArray[k].href.split(\"/\");\r\n            // console.log(\"InnerText is \"+anchorArray[k].innerText);\r\n            // console.log(\"It exists in DBPedia as \"+hrefArray[hrefArray.length-1]);\r\n            curCellText = hrefArray[hrefArray.length - 1];\r\n            // if (curCellText.includes(\"UEFA\")) {\r\n            // console.log(curCellText);\r\n            // }\r\n          }\r\n        }\r\n      }\r\n      let curRowSpan = selectedTable.rows[i].cells[j].rowSpan;\r\n      let curColSpan = selectedTable.rows[i].cells[j].colSpan;\r\n      // console.log(curColSpan);\r\n      tempRow.push({\r\n        data: curCellText,\r\n        rowSpan: curRowSpan,\r\n        colSpan: curColSpan,\r\n      });\r\n    }\r\n    tempTable.push(tempRow);\r\n  }\r\n\r\n  // We first deal with colspans.\r\n  for (let i = 0; i < tempTable.length; ++i) {\r\n    for (let j = 0; j < tempTable[i].length; ++j) {\r\n      let curCellText = tempTable[i][j].data;\r\n      if (tempTable[i][j].colSpan > 1) {\r\n        for (let k = 1; k < tempTable[i][j].colSpan; ++k) {\r\n          tempTable[i].splice(j + 1, 0, {\r\n            data: curCellText,\r\n            rowSpan: 1,\r\n            colSpan: 1,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // We now deal with rowspans.\r\n  for (let i = 0; i < tempTable.length; ++i) {\r\n    for (let j = 0; j < tempTable[i].length; ++j) {\r\n      let curCellText = tempTable[i][j].data;\r\n      if (tempTable[i][j].rowSpan > 1) {\r\n        for (let k = 1; k < tempTable[i][j].rowSpan; ++k) {\r\n          // Note: the if condition is necessary to take care of error conditions (the original HTML table element has errors)\r\n          if (i + k < tempTable.length) {\r\n            tempTable[i + k].splice(j, 0, {\r\n              data: curCellText,\r\n              rowSpan: 1,\r\n              colSpan: 1,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // console.log(\"Table data is: \");\r\n  // console.log(tempTable);\r\n\r\n  // Now tempTable contains the clean data we can use\r\n  let promiseArray = [];\r\n  // We take the minimum of (1, tempTable.length-1) number of values from each column to determine its class annotation\r\n  // Note!! This -1 here is important. It excludes the row corresponding to the column headers\r\n  let remainEntries = Math.min(1, tempTable.length - 1);\r\n\r\n  // This is a placeholder array to solve the 2D problem. It's a 1D array containing remainEntries number of -1's\r\n  // let placeHolderArray = [];\r\n  // let notFoundArray = [];\r\n  // for (let i=0;i<remainEntries;++i) {\r\n  //   placeHolderArray.push(-1);\r\n  //   notFoundArray.push(\"null\");\r\n  // }\r\n\r\n  // Let's loop through the table to ask our queries.\r\n  // If remainCols are undefined, we take every columns from the tempTable;\r\n  if (remainCols === undefined) {\r\n    remainCols = [];\r\n    for (let j = 0; j < tempTable[0].length; ++j) {\r\n      remainCols.push(j);\r\n    }\r\n  }\r\n\r\n  // console.log(\"Remain columns are: \"+remainCols);\r\n  for (let j = 0; j < remainCols.length; ++j) {\r\n    // console.log(\"We are taking this number of entries from this table: \"+remainEntries);\r\n    // Find the current column index\r\n    let curColIndex = remainCols[j];\r\n    // console.log(\"Current column index is: \"+curColIndex);\r\n\r\n    // Loop through the first three (or one) entries from this column\r\n    for (let i = 1; i <= remainEntries; ++i) {\r\n      // Here we make the query\r\n      let prefixURL =\r\n        \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n      let suffixURL =\r\n        \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n      // console.log(tempTable[i][j].data);\r\n      // console.log(regexReplace(tempTable[i][j].data));\r\n      // console.log(tempTable[i][curColIndex]);\r\n      let curEntry =\r\n        tempTable[i][curColIndex] === undefined\r\n          ? \"NONEXISTING\"\r\n          : regexReplace(tempTable[i][curColIndex].data);\r\n      // console.log(curEntry);\r\n      // console.log(regexReplace(tempTable[i][curColIndex].data));\r\n      // console.log(!isNaN(Number(curEntry)));\r\n      // console.log(\"Replaced data is \"+curEntry);\r\n      // console.log(curEntry === \"\");\r\n\r\n      // If we found out that the current entry is a number, we do not want to send a query.\r\n      // Note: Number(\"\") will show up as a number!! This was one of the bugs that we fixed\r\n      if (!isNaN(Number(curEntry)) && curEntry !== \"\") {\r\n        promiseArray.push(Promise.resolve([\"Number\"]));\r\n      }\r\n      // Else if we find the curEntry is too long, it will likely not exist in DBPedia\r\n      else if (curEntry.length > 40) {\r\n        promiseArray.push(Promise.resolve([\"Null\"]));\r\n      }\r\n      // Else we construct the query\r\n      else {\r\n        // console.log(\"Cur Entry is \"+curEntry);\r\n        if (curEntry === undefined || curEntry === \"\") {\r\n          curEntry = \"NONEXISTING\";\r\n        }\r\n        // if (curEntry === \"Sergio_Agüero\") {\r\n        //   console.log(\"We have another problem here\");\r\n        // }\r\n        // console.log(curEntry);\r\n        // console.log(tempTable[i][curColIndex].data);\r\n        // console.log(regexReplace(tempTable[i][curColIndex].data));\r\n        let queryBody =\r\n          \"SELECT+%3Fo%0D%0AWHERE+%7B%0D%0A++++++dbr%3A\" +\r\n          curEntry +\r\n          \"+rdf%3Atype+%3Fo.%0D%0A++++++BIND%28STR%28%3Fo%29+AS+%3FoString+%29.%0D%0A++++++FILTER%28regex%28%3FoString%2C%22dbpedia.org%2Fontology%2F%22%2C%22i%22%29%29%0D%0A%7D%0D%0A&\";\r\n        let queryURL = prefixURL + queryBody + suffixURL;\r\n        // if (curEntry === \"Bangor_City_F%5Cu002EC%5Cu002E\") {\r\n        //   console.log(\"There is something wrong with this entry\")\r\n        //   console.log(queryURL);\r\n        // }\r\n        // console.log(\"Query is constructed!\");\r\n        // if (queryURL === \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=SELECT+%3Fo%0D%0AWHERE+%7B%0D%0A++++++dbr%3A\") {\r\n        //   console.log(\"Here is where the problem occurs\");\r\n        // }\r\n        // console.log(queryURL);\r\n        promiseArray.push(fetchJSON(queryURL));\r\n        // console.log(\"Query pushed successfully. This is queryBody: \");\r\n        // console.log(queryBody);\r\n      }\r\n    }\r\n  }\r\n  return allPromiseReady(promiseArray).then((values) => {\r\n    // console.log(values);\r\n    // for (let i=0;i<values.length;++i) {\r\n    //   console.log(values[i]);\r\n    // }\r\n    // console.log(\"Query results from Virtuoso are:\");\r\n    // console.log(values);\r\n    let classAnnotation = [];\r\n    for (let j = 0; j < remainCols.length; ++j) {\r\n      // console.log(\"Number of remain cols is \"+remainCols.length);\r\n      let curColumnClass = [];\r\n      // If we are dealing with number results, we just want to push on an array with one element \"Number\"\r\n      if (values[remainEntries * j] !== undefined) {\r\n        if (values[remainEntries * j][0] !== undefined) {\r\n          if (values[remainEntries * j][0] === \"Number\") {\r\n            classAnnotation.push([\"Number\"]);\r\n          }\r\n          // If we are dealing with invalid results, we just want to push on an empty array\r\n          else if (values[remainEntries * j][0] === \"Null\") {\r\n            classAnnotation.push([]);\r\n          }\r\n        }\r\n        // if (values[remainEntries*j][0] === -1) {\r\n        //   classAnnotation.push([\"Number\"]);\r\n        // }\r\n        // // If we are dealing with invalid results, we just want to push on an empty array\r\n        // else if (values[remainEntries*j][0] === \"null\") {\r\n        //   classAnnotation.push([]);\r\n        // }\r\n        // Else, we find its class annotation from query results\r\n        else {\r\n          for (let i = 0; i < remainEntries; ++i) {\r\n            let curCellClass = [];\r\n            // console.log(remainEntries*j+i);\r\n            let bindingArray = values[remainEntries * j + i].results.bindings;\r\n            for (let k = 0; k < bindingArray.length; ++k) {\r\n              curCellClass.push(bindingArray[k].o.value.slice(28));\r\n            }\r\n            curColumnClass = [...new Set([...curColumnClass, ...curCellClass])];\r\n          }\r\n          classAnnotation.push(curColumnClass);\r\n        }\r\n      }\r\n    }\r\n    // return classAnnotation;\r\n    // console.log(\"Current class annotation is \");\r\n    // if (pageName === \"2009–10_Premier_League\") {\r\n    //   console.log(\"TableData is \");\r\n    //   console.log(tempTable);\r\n    //   console.log(classAnnotation);\r\n    // }\r\n    // console.log(classAnnotation);\r\n\r\n    return Promise.resolve(classAnnotation);\r\n  });\r\n}\r\n\r\n// This function returns a 2D array of objects representing the data for tableDataExplore.\r\n\r\n// It taks two parameters:\r\n//  1) HTML \"selectedTableHTML\" storing the HTML of a table\r\n//  2) string \"urlOrigin\", storing which page this table is from\r\n\r\n// It returns a 2D array of objects representing the data for tableDataExplore.\r\nfunction setTableFromHTML(selecteTableHTML, urlOrigin) {\r\n  let selectedTable = selecteTableHTML;\r\n  let tempTable = [];\r\n\r\n  // We first fetch the plain, unprocessed version of the table.\r\n  // This is the part where we make the modification: use links instead of cell literals\r\n\r\n  for (let i = 0; i < selectedTable.rows.length; ++i) {\r\n    let tempRow = [];\r\n    for (let j = 0; j < selectedTable.rows[i].cells.length; ++j) {\r\n      let curCellText = HTMLCleanCell(selectedTable.rows[i].cells[j].innerText);\r\n      // Note: We want to use the href as data (if such href exists) instead of its innerText.\r\n      if (i > 0) {\r\n        // We get all the links from this current cell (there may be more than one)\r\n        let anchorArray = selectedTable.rows[i].cells[j].getElementsByTagName(\r\n          \"a\"\r\n        );\r\n        // we want to use the first valid link as the search element for this cell\r\n        // Definition of being valid: its associated innerText is not empty (thus not the link of a picture)\r\n        //                            and it is not a citation (so [0] is not \"[\")\r\n        for (let k = 0; k < anchorArray.length; ++k) {\r\n          if (\r\n            anchorArray[k].innerText !== \"\" &&\r\n            anchorArray[k].innerText[0] !== \"[\"\r\n          ) {\r\n            let hrefArray = anchorArray[k].href.split(\"/\");\r\n            // console.log(\"InnerText is \"+anchorArray[k].innerText);\r\n            // console.log(\"It exists in DBPedia as \"+hrefArray[hrefArray.length-1]);\r\n            curCellText = decodeURIComponent(hrefArray[hrefArray.length - 1]);\r\n            // if (curCellText.includes(\"UEFA\")) {\r\n            // console.log(curCellText);\r\n            // }\r\n          }\r\n        }\r\n      }\r\n      let curRowSpan = selectedTable.rows[i].cells[j].rowSpan;\r\n      let curColSpan = selectedTable.rows[i].cells[j].colSpan;\r\n      // console.log(curColSpan);\r\n      tempRow.push({\r\n        data: curCellText,\r\n        origin: urlOrigin,\r\n        rowSpan: curRowSpan,\r\n        colSpan: curColSpan,\r\n      });\r\n    }\r\n    tempTable.push(tempRow);\r\n  }\r\n\r\n  // We first deal with colspans.\r\n  for (let i = 0; i < tempTable.length; ++i) {\r\n    for (let j = 0; j < tempTable[i].length; ++j) {\r\n      let curCellText = tempTable[i][j].data;\r\n      if (tempTable[i][j].colSpan > 1) {\r\n        for (let k = 1; k < tempTable[i][j].colSpan; ++k) {\r\n          tempTable[i].splice(j + 1, 0, {\r\n            data: curCellText,\r\n            origin: urlOrigin,\r\n            rowSpan: tempTable[i][j].rowSpan,\r\n            colSpan: 1,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // We now deal with rowspans.\r\n  for (let i = 0; i < tempTable.length; ++i) {\r\n    for (let j = 0; j < tempTable[i].length; ++j) {\r\n      let curCellText = tempTable[i][j].data;\r\n      if (tempTable[i][j].rowSpan > 1) {\r\n        for (let k = 1; k < tempTable[i][j].rowSpan; ++k) {\r\n          // Note: the if condition is necessary to take care of error conditions (the original HTML table element has errors)\r\n          if (i + k < tempTable.length) {\r\n            tempTable[i + k].splice(j, 0, {\r\n              data: curCellText,\r\n              origin: urlOrigin,\r\n              rowSpan: 1,\r\n              colSpan: 1,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // We now add in an additional column: the originURL of the page\r\n  tempTable[0].splice(0, 0, {\r\n    data: \"OriginURL\",\r\n    origin: urlOrigin,\r\n    rowSpan: 1,\r\n    colSpan: 1,\r\n  });\r\n  for (let i = 1; i < tempTable.length; ++i) {\r\n    tempTable[i].splice(0, 0, {\r\n      data: urlOrigin,\r\n      origin: \"null\",\r\n      rowSpan: 1,\r\n      colSpan: 1,\r\n    });\r\n  }\r\n  return tempTable; // tempTable is a 2D array of objects storing the table data. Object has two fields: data(string) and origin(string).\r\n}\r\n\r\n// This function takes in 1 parameter\r\n// 1) tableDataExplore, returned from setTableFromHTML.\r\n\r\n// And returns tableData (with no header rows) that can be unioned with the selected table.\r\n\r\nfunction setUnionData(tableDataExplore) {\r\n\r\n  // We first need to set the tableHeader, so that cells have the correct origins\r\n  let tableHeader = [];\r\n  for (let j=0;j<tableDataExplore[0].length;++j) {\r\n    tableHeader.push(\r\n      {\"value\":tableDataExplore[0][j].data\r\n      ,\"label\":tableDataExplore[0][j].data}\r\n    )\r\n  }\r\n  // We then need to handle both data and origin.\r\n  let tableData = [];\r\n  // console.log(tableDataExplore);\r\n  // This starts the loop for rows\r\n  for (let i=1;i<tableDataExplore.length;++i) {\r\n    let tempRow = [];\r\n    // This starts the loop for columns\r\n    for (let j=0;j<tableDataExplore[i].length;++j) {\r\n      // First set the data\r\n      let data = tableDataExplore[i][j].data;\r\n      // Then set the origin\r\n      let origin = [];\r\n      let originText = tableDataExplore[i][j].origin+\": \"+tableHeader[j].value+\": \"+tableDataExplore[i][j].data;\r\n      origin.push(originText);\r\n      tempRow.push({\"data\":data,\"origin\":origin});\r\n    }\r\n    tableData.push(tempRow);\r\n  }\r\n  return tableData;\r\n}\r\n\r\n// This function takes in four parameters and return the CDF for hypergeometric distribution, for x\r\n// N: total number of elements (780 in our case)\r\n// K: total number of successful elements (length of selected column's class annotation)\r\n// n: number of trials (length of test column's class annotation)\r\n// x: (length of intersection of selected column and test column)\r\n\r\nfunction hyperCDF(x, N, K, n) {\r\n  let count = 0;\r\n  // console.log(combinations(5,2));\r\n  let denom = combinations(N, n);\r\n  for (let i = 0; i <= x; ++i) {\r\n    count += (combinations(K, i) * combinations(N - K, n - i)) / denom;\r\n  }\r\n  return count;\r\n}\r\n\r\n// This function renders this.props.tableData[i][j].data in a nicer way. \r\n// It changes\"_\" to \" \", and removes everything after the first occurence of (\r\n\r\nfunction niceRender(str) {\r\n  let resultStr = str;\r\n  let bracketIndex = str.indexOf(\"(\");\r\n  // If ( is present in a string, we want to remove it\r\n  // We include the -1 because usually ( is preceeded by _\r\n  if (bracketIndex !== -1) {\r\n    resultStr = resultStr.slice(0, bracketIndex-1);\r\n  }\r\n  // now we turn all \"_\" into \" \"\r\n  return resultStr.replace(/_/g, \" \");\r\n}\r\n\r\n// This function takes in four parameters: \r\n// 1) resultsBinding: an array of JSON values representing entities satisfying the first column\r\n// 2) tableData:      the tableData before update\r\n// 3) tableHeader:    this.state.tableHeader\r\n// 4) colIndex:       which column usersa are filling (usually 0)\r\n\r\n// and returns the updated tableData, after updates have been made to the first column.\r\n\r\nfunction setFirstColumnData(resultsBinding, tableData, tableHeader, colIndex) {\r\n  // First we get the correct number of rows, which is equal to min(values[0].results.bindings.length, initialRowNum)\r\n  let updatedRowCount = Math.min(resultsBinding.length, initialRowNum);\r\n  // console.log(\"Original length is \"+values[0].results.bindings.length);\r\n  // console.log(\"Row Count is: \"+updatedRowCount);\r\n\r\n  // If tableData currently has too many rows, we slice it.\r\n  if (tableData.length > updatedRowCount) {\r\n    tableData = tableData.slice(0,updatedRowCount);\r\n  }\r\n  // Else, if tableData currently has too few rows, we need to add some empty rows.\r\n  else if (tableData.length < updatedRowCount) {\r\n    let rowsToAdd = updatedRowCount - tableData.length;\r\n    for (let i = 0; i < rowsToAdd; ++i) {\r\n      let tempRow = [];\r\n      for (let j = 0; j < initialColNum; ++j) {\r\n        tempRow.push({ data: \"\", origin: [] });\r\n      }\r\n      tableData.push(tempRow);\r\n    }\r\n  }\r\n\r\n  let rowNum = tableData.length;\r\n  // console.log(\"Number of rows is \"+rowNum);\r\n\r\n  // We do not want to overwrite entries that users have filled in.\r\n  // Let's calculate how many entries we want to fill in.\r\n  let emptyEntryCount = rowNum;\r\n  for (let i = 0; i < rowNum; ++i) {\r\n    if (tableData[i][colIndex].data !== \"\") {\r\n      emptyEntryCount--;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  // console.log(\"number of empty entries is \"+emptyEntryCount);\r\n\r\n  let startingIndex = rowNum - emptyEntryCount;\r\n  // console.log(\"Starting index is\"+startingIndex);\r\n\r\n  for (let i = 0; i < emptyEntryCount; ++i) {\r\n    tableData[i + startingIndex][colIndex].data = \r\n      resultsBinding[i].somevar.value.slice(28);\r\n  }\r\n\r\n  // second part sets the origin for each cell\r\n  for (let i = 0; i < rowNum; ++i) {\r\n    // For the first column, let's just use its data as the origin\r\n    let tempOrigin = tableData[i][colIndex].data;\r\n    tableData[i][colIndex].origin.push(tempOrigin);\r\n  }\r\n\r\n  // Now we dedup by tableData by tableData[i][0].data\r\n  tableData = _.uniqBy(tableData, function(x) {return x[0].data;});\r\n\r\n  // console.log(tableData);\r\n  return tableData;\r\n}\r\n\r\n// The following function takes in 2D array recording information of neighbours for the search column\r\n\r\n// It return a desired oneD keyColNeighbours that we can give to selection Headers.\r\n\r\nfunction processAllNeighbours(allNeighboursArray) {\r\n  let keyColNeighbours = [];\r\n  // console.log(allNeighboursArray);\r\n  let allNeighboursArrayCopy = _.cloneDeep(allNeighboursArray);\r\n\r\n  for (let i = 0; i < allNeighboursArrayCopy.length; ++i) {\r\n    keyColNeighbours = keyColNeighbours.concat(allNeighboursArrayCopy[i]);\r\n  }\r\n\r\n  // Now we sort keyColNeighbours based on value\r\n  keyColNeighbours.sort((a,b) => a.value < b.value ? -1 : 1);\r\n  // console.log(keyColNeighbours);\r\n\r\n  // Now, we run a loop to remove duplicates, and update count and filledCount\r\n  if (keyColNeighbours.length > 0) {\r\n    for (let i = 1; i < keyColNeighbours.length; ++i) {\r\n      let prevEntry = keyColNeighbours[i-1];\r\n      let curEntry = keyColNeighbours[i];\r\n\r\n      // If the current entry's data is equal to the previous entry's data, we want to \r\n      // 1) delete curEntry\r\n      // 2) (maybe) update prevEntry's count\r\n      // 3) increment prevEntry's filledCount\r\n      if (prevEntry.value === curEntry.value) {\r\n        keyColNeighbours[i-1].filledCount = keyColNeighbours[i-1].filledCount + 1;\r\n        keyColNeighbours[i-1].count = Math.max(prevEntry.count, curEntry.count);\r\n        keyColNeighbours.splice(i,1);\r\n        --i;\r\n      }\r\n    }\r\n  }\r\n  // Now we want to sort (and potentially filter) keyColNeighbours, by filledCount \r\n  keyColNeighbours.sort((a,b) => a.filledCount < b.filledCount ? 1 : -1);\r\n\r\n  // Before we return, let's change the label to include filledCount\r\n  for (let i = 0; i < keyColNeighbours.length; ++i) {\r\n    let filledPercent = Math.round(keyColNeighbours[i].filledCount/allNeighboursArrayCopy.length * 100) / 100;\r\n    keyColNeighbours[i].filledPercent = filledPercent;\r\n    keyColNeighbours[i].label = keyColNeighbours[i].label + \" (\" + filledPercent + \")\";\r\n  }\r\n\r\n  // Take a look at keyColNeighbours\r\n  // console.log(keyColNeighbours);\r\n\r\n  return keyColNeighbours;\r\n}\r\n\r\n// The following function stores both predicate and object array for all entries in search column.\r\n// Its return value is an array, length is tableData.length\r\n\r\nfunction storeFirstDeg(neighbourArray) {\r\n  // console.log(neighbourArray);\r\n  let firstDegNeighbours = [];\r\n  let neighbourArrayCopy = _.cloneDeep(neighbourArray);\r\n  for (let i = 0; i < neighbourArrayCopy.length; ++i) {\r\n    let tempObj = {};\r\n    for (let j = 0; j < neighbourArrayCopy[i].length; ++j) {\r\n      // The following line creates a deduped version of neighbourArrayCopy[i][j].data, since some bug seems to exist in DBpedia\r\n      let dedupedData = _.uniq(neighbourArrayCopy[i][j].data.slice())\r\n      tempObj[neighbourArrayCopy[i][j].value] = dedupedData;\r\n      // console.log(neighbourArrayCopy[i][j].data.slice());\r\n      // console.log(_.uniq(neighbourArrayCopy[i][j].data.slice()));\r\n      // tempObj[neighbourArrayCopy[i][j].value] = neighbourArrayCopy[i][j].data;\r\n    }\r\n    firstDegNeighbours.push(tempObj);\r\n  } \r\n  // console.log(firstDegNeighbours);\r\n  return firstDegNeighbours;\r\n}\r\n\r\n// This function creates neighbourArrayText from neighbourArray\r\n\r\nfunction createNeighbourText(neighbourArray) {\r\n  let neighbourArrayText = \"\";\r\n  for (let i = 0; i < neighbourArray.length; ++i) {\r\n    if (i > 0) {\r\n      neighbourArrayText+=\" OR \";\r\n    }\r\n    let curNeighbourText = neighbourArray[i].type === \"object\" ? \"is \" + neighbourArray[i].value + \" of\" : neighbourArray[i].value ;\r\n    neighbourArrayText+=curNeighbourText;\r\n  }\r\n  return neighbourArrayText;\r\n}\r\n\r\n// This function add in the recommendNeighbours to objects in processedNeighbours.\r\n// It takes in processedSubject(object)Neighbours, and returns the updated version.\r\n\r\n// For each element from processedNeighbours, we want to add an attribute called recommendNeighbours\r\n// recommendNeighbours is an array of objects with three attributes\r\n// 1) value:        value of the recommend attribute\r\n// 2) type:         type of the recommend attribute\r\n// 3) relation:     how the recommend attribute is related to the original attribute: string, or semantic\r\n\r\nfunction addRecommendNeighbours(processedNeighboursCopy) {\r\n  // console.log(processedNeighbours);\r\n  let processedNeighbours = _.cloneDeep(processedNeighboursCopy);\r\n\r\n  // To do this, we need to a double loop over the processedNeighbours\r\n  for (let i = 0; i < processedNeighbours.length; ++i) {\r\n\r\n    // Initialize the recommendNeighbours array\r\n    let recommendNeighbours = [];\r\n    \r\n    for (let j = 0; j < processedNeighbours.length; ++j) {\r\n      // We only look at cases where i !== j\r\n      if (i !== j) {\r\n        // We consider three types of matching\r\n\r\n        // 1st type is String Similarity: if X is a substring of Y, or Y is a substring of X \r\n        let upperStrOne = processedNeighbours[i].value.toUpperCase();\r\n        let upperStrTwo = processedNeighbours[j].value.toUpperCase();\r\n        if (upperStrOne.includes(upperStrTwo) || upperStrTwo.includes(upperStrOne)) {\r\n          recommendNeighbours.push(\r\n            {\r\n              \"value\": processedNeighbours[j].value,\r\n              \"type\": processedNeighbours[j].type,\r\n              \"relation\": \"string\"\r\n            }\r\n          )\r\n        }\r\n\r\n        // 2nd type is semantic: if X and Y has the same range, or same subPropertyOf \r\n        if ((processedNeighbours[i].range === processedNeighbours[j].range && processedNeighbours[i].range !== \"\") ||\r\n            (processedNeighbours[i].subPropertyOf === processedNeighbours[j].subPropertyOf && processedNeighbours[i].subPropertyOf !== \"\")) {\r\n          recommendNeighbours.push(\r\n            {\r\n              \"value\": processedNeighbours[j].value,\r\n              \"type\": processedNeighbours[j].type,\r\n              \"relation\": \"semantic\"\r\n            }\r\n          )\r\n        }\r\n      }\r\n    }\r\n    // We take a look at the recommendNeighbours\r\n    // console.log(\"Current neighbour is \"+processedNeighbours[i].value);\r\n    // if (recommendNeighbours.length > 0) {console.log(recommendNeighbours);}\r\n\r\n    // Now, we create the recommendNeighbours attributes for the current element in processedNeighbours\r\n    processedNeighbours[i][\"recommendNeighbours\"] = recommendNeighbours;\r\n  }\r\n  // console.log(processedNeighbours);\r\n  return processedNeighbours;\r\n}\r\n\r\n// The following function creates the list of recommend attributes passed to the ActionPanel.\r\n\r\n// It takes in one parameter: neighbourArray\r\n// returns an array: recommendArray\r\n\r\nfunction createRecommendArray(neighbourArray, keyColNeighbours) {\r\n  // We create the recommendArray variable using a simple rule:\r\n  // It should be union of recommendNeighbours of all neighbours from neighbourArray, minus the neighbours from neighbourArray\r\n  let recommendArray = [];\r\n\r\n  // First we run a loop to take the union of recommendNeighbours\r\n  for (let i = 0; i < neighbourArray.length; ++i) {\r\n    recommendArray = recommendArray.concat(neighbourArray[i].recommendNeighbours);\r\n  }\r\n\r\n  // console.log(neighbourArray);\r\n  // console.log(recommendArray);\r\n\r\n  // We then remove recommendations that are completely duplicated\r\n  recommendArray = _.uniqBy(recommendArray, function(x) {\r\n    return x.value || x.type || x.relation;\r\n  });\r\n  // We then remove recommendations that are already in neighbourArray\r\n  recommendArray = _.differenceBy(recommendArray, neighbourArray, function(x) {\r\n    return x.value || x.type;\r\n  });\r\n\r\n  // We want to do one more thing here: get the filledPercentage for the recommendation attributes\r\n\r\n  // console.log(recommendArray);\r\n  // console.log(keyColNeighbours);\r\n\r\n  for (let i = 0; i < recommendArray.length; ++i) {\r\n    for (let j = 0; j < keyColNeighbours.length; ++j) {\r\n      if (recommendArray[i].value === keyColNeighbours[j].value && recommendArray[i].type === keyColNeighbours[j].type) {\r\n        recommendArray[i][\"label\"] = keyColNeighbours[j].label;\r\n        recommendArray[i][\"filledPercent\"] = keyColNeighbours[j].filledPercent;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  // We now sort the recommendArray by filledPercent attribute\r\n  recommendArray.sort((a, b) =>\r\n    a.filledPercent < b.filledPercent ? 1 : -1\r\n  );\r\n  // console.log(recommendArray);\r\n\r\n  return recommendArray;\r\n}\r\n\r\n// The following function is a helper function for sorting used in updateFirstColSelection.\r\n\r\nfunction getPCount(str, myArray) {\r\n  let count = 0;\r\n  for (let i = 0; i < myArray.length; ++i) {\r\n    if (myArray[i].p.value === str) {\r\n      ++count\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\n// The following function scans through a string, and changes all \" \" to \"+\"\r\n\r\nfunction blankToPlus(str) {\r\n  return str.replace(/\\s/g, \"+\");\r\n}\r\n\r\n// The following function generates queryURL needed for Virtuoso, using information from neighbourArray (or tableHeader[0])\r\n\r\nfunction keyQueryGen(neighbourArray) {\r\n\r\n  // Following boolean is for error detection\r\n  let error = false;\r\n\r\n  // Following is a complete query.\r\n\r\n  // select ?somevar\r\n  // where {\r\n  // ?somevar dct:subject dbc:Obama_family.\r\n  // ?somevar dbp:district \"13\"^^<http://www.w3.org/2001/XMLSchema#integer>.\r\n  // ?somevar dbo:birthPlace dbr:Hawaii.\r\n  // ?somevar dbp:name \"Barack Obama\"^^<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString>.\r\n  // ?somevar dbo:activeYearsEndDate \"2004-11-04\"^^<http://www.w3.org/2001/XMLSchema#date>.\r\n  // }\r\n\r\n  let prefixURL = \"https://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=\";\r\n  let suffixURL = \"format=application%2Fsparql-results%2Bjson&CXML_redir_for_subjs=121&CXML_redir_for_hrefs=&timeout=30000&debug=on&run=+Run+Query+\";\r\n  let queryBody = \"select+%3Fsomevar%0D%0Awhere+%7B\";\r\n  for (let i = 0; i < neighbourArray.length; ++i) {\r\n    // There are 5 cases that we have to deal with in total\r\n    let textToAdd = \"\"\r\n    // Case 1: dct (%0D%0A%3Fsomevar+dct%3Asubject+dbc%3AObama_family.)\r\n    if (neighbourArray[i].pDataset === \"dct\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+dct%3Asubject+dbc%3A\" \r\n        + regexReplace(neighbourArray[i].oValue) \r\n        + \".\";\r\n    }\r\n    // Case 2: oType is date (%0D%0A%3Fsomevar+dbo%3AactiveYearsEndDate+%222004-11-04%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23date%3E.)\r\n    else if (neighbourArray[i].oType === \"http://www.w3.org/2001/XMLSchema#date\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+\" \r\n        + neighbourArray[i].pDataset\r\n        + \"%3A\"\r\n        + regexReplace(neighbourArray[i].pValue)\r\n        + \"+%22\"\r\n        + neighbourArray[i].oValue // Note no regexReplace here because it's in quotes\r\n        + \"%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23date%3E.\";\r\n    }\r\n    // Case 3: oType is integer (%0D%0A%3Fsomevar+dbp%3Adistrict+%2213%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23integer%3E.)\r\n    else if (neighbourArray[i].oType === \"http://www.w3.org/2001/XMLSchema#integer\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+\"\r\n        + neighbourArray[i].pDataset\r\n        + \"%3A\"\r\n        + regexReplace(neighbourArray[i].pValue)\r\n        + \"+%22\"\r\n        + neighbourArray[i].oValue // Note no regexReplace here because it's in quotes\r\n        + \"%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23integer%3E.\";\r\n    }\r\n    // Case 4: oType is string literal (%0D%0A%3Fsomevar+dbp%3Aname+%22Barack+Obama%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23langString%3E.)\r\n    else if (neighbourArray[i].oType === \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+\"\r\n        + neighbourArray[i].pDataset\r\n        + \"%3A\"\r\n        + regexReplace(neighbourArray[i].pValue)\r\n        + \"+%22\"\r\n        + blankToPlus(neighbourArray[i].oValue) // Note no regexReplace here, but blankToPlus is needed\r\n        + \"%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23langString%3E.\";\r\n    }\r\n    // Case 5: oType is nonnegative integer\r\n    else if (neighbourArray[i].oType === \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+\"\r\n        + neighbourArray[i].pDataset\r\n        + \"%3A\"\r\n        + regexReplace(neighbourArray[i].pValue)\r\n        + \"+%22\"\r\n        + neighbourArray[i].oValue // Note no regexReplace here because it's in quotes\r\n        + \"%22%5E%5E%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23nonNegativeInteger%3E.\";\r\n    }\r\n    // Case 6: oType is \"\", in this case the object value is some dbr\r\n    else if (neighbourArray[i].oType === \"\") {\r\n      textToAdd = \r\n        \"%0D%0A%3Fsomevar+\"\r\n        + neighbourArray[i].pDataset\r\n        + \"%3A\"\r\n        + regexReplace(neighbourArray[i].pValue)\r\n        + \"+dbr%3A\"\r\n        + regexReplace(neighbourArray[i].oValue)\r\n        + \".\";\r\n    }\r\n    // Otherwise, we have run into some error potentially\r\n    else {\r\n      console.log(neighbourArray[i].oType);\r\n      error = true;\r\n    }\r\n    queryBody+=textToAdd;\r\n  }\r\n  // Finally we add in the last bit of text to queryBody\r\n  queryBody+=\"%0D%0A%7D%0D%0A&\";\r\n\r\n  // Create the queryURL and take a look\r\n  let queryURL = prefixURL + queryBody + suffixURL;\r\n  \r\n  // We now return. If error is true, we return error, else, we return queryURL\r\n  if (error === true) {\r\n    return \"ERROR\";\r\n  }\r\n  else {\r\n    return queryURL;\r\n  }\r\n}\r\n\r\n// The following is a helper function used to update firstDegNeighbours and keyColNeighbours.\r\n// It makes use of two query result arrays.\r\n\r\n// It return an object with two attributes: firstDegNeighbours and keyColNeighbours\r\n\r\n// This function should be called whenever number of rows are changed.\r\n\r\nfunction updateNeighbourInfo(valuesOne, valuesTwo) {\r\n  // console.log(valuesOne);\r\n  // console.log(valuesTwo);\r\n\r\n  // To support the firstDegNeighbours prefetching, let's store the first degree neighbours in state firstDegNeighbours\r\n  let firstDegNeighbours = {};\r\n\r\n  // First we deal with subject neighbours, so valuesOne\r\n  let subjectNeighbourArray = [];\r\n  for (let i = 0; i < valuesOne.length; ++i) {\r\n    let temp = updateKeyColNeighbours(\r\n      [],\r\n      valuesOne[i].results.bindings,\r\n      \"subject\"\r\n    )\r\n    subjectNeighbourArray.push(temp);\r\n  }\r\n  firstDegNeighbours[\"subject\"] = storeFirstDeg(subjectNeighbourArray);\r\n  let processedSubjectNeighbours = processAllNeighbours(subjectNeighbourArray);\r\n  processedSubjectNeighbours = addRecommendNeighbours(processedSubjectNeighbours);\r\n\r\n  // Then we deal with object neighbours, so valuesTwo\r\n  let objectNeighbourArray = [];\r\n  for (let i = 0; i < valuesTwo.length; ++i) {\r\n    let temp = updateKeyColNeighbours(\r\n      [],\r\n      valuesTwo[i].results.bindings,\r\n      \"object\"\r\n    )\r\n    objectNeighbourArray.push(temp);\r\n  }\r\n  firstDegNeighbours[\"object\"] = storeFirstDeg(objectNeighbourArray);\r\n  let processedObjectNeighbours = processAllNeighbours(objectNeighbourArray);\r\n  processedObjectNeighbours = addRecommendNeighbours(processedObjectNeighbours);\r\n\r\n  // we now concat subjectNeighbours and objectNeighbours together\r\n  let keyColNeighbours = processedSubjectNeighbours.concat(processedObjectNeighbours);\r\n\r\n  // console.log(keyColNeighbours);\r\n  // console.log(firstDegNeighbours);\r\n  return {\r\n    \"firstDegNeighbours\":firstDegNeighbours,\r\n    \"keyColNeighbours\":keyColNeighbours,\r\n  }\r\n}\r\n\r\n","// import { Route, Switch, Link } from \"react-router-dom\";\r\nimport React, { Component } from \"react\";\r\n// import Header from \"../components/Header\";\r\n// import Footer from \"../components/Footer\";\r\nimport MainBody from \"../components/MainBody\";\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper \">\r\n        <div className=\"font-body\">\r\n          {/* <div className=\"header\">\r\n            <Header />\r\n          </div> */}\r\n          <div>\r\n            <MainBody />\r\n          </div>\r\n          {/* <div className=\"footer\">\r\n            <Footer />\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./assets/custom.css\";\r\nimport \"./assets/layout.css\";\r\n// import \"./assets/font-awesome.min.css\";\r\nimport App from \"./layouts/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}